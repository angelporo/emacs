** dap

#+begin_src emacs-lisp
(use-package dap-mode
  :disabled
  :config
  (dap-auto-configure-mode 1)
  (require 'dap-chrome))
#+end_src
+ 执行 =M-x dap-chrome-setup= 安装 VSCode Chrome Debug Extension.

** prettier

保存文件时自动格式化, 支持 html/java/js/js2/typescript/json/yaml/python/sh 等语言, 详情参考变量
prettier-major-mode-parsers:
#+begin_src emacs-lisp
(use-package prettier
  ;; TRAMP 支持的有问题, 故关闭。
  :disabled
  :ensure-system-package (prettier . "npm -g install prettier")
  :diminish
  :hook (prog-mode . prettier-mode)
  :init (setq prettier-mode-sync-config-flag nil))
#+end_src

** java

默认将 lsp java server 安装到 ~/.emacs.d/.cache/lsp/eclipse.jdt.ls 目录。

手动安装 lombok:
#+begin_src shell :results none
mvn dependency:get -DrepoUrl=http://download.java.net/maven/2/ -DgroupId=org.projectlombok -DartifactId=lombok -Dversion=1.18.6
#+end_src

#+begin_src emacs-lisp
(use-package lsp-java
  :disabled
  :after (lsp-mode)
  :init
  ;; 指定运行 jdtls 的 java 程序
  (setq lsp-java-java-path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
  ;; 指定 jdtls 编译源码使用的 jdk 版本（默认是启动 jdtls 的 java 版本）。
  ;; https://marketplace.visualstudio.com/items?itemName=redhat.java
  ;; 查看所有 java 版本：/usr/libexec/java_home -verbose
  (setq lsp-java-configuration-runtimes
        '[(:name "Java SE 8" :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home" :default t)
          (:name "Java SE 11.0.9" :path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
          (:name "Java SE 15.0.1" :path "/Library/Java/JavaVirtualMachines/jdk-15.0.1.jdk/Contents/Home")])
  ;; jdk11 不支持 -Xbootclasspath/a: 参数。
  (setq lsp-java-vmargs
        (list "-noverify" "-Xmx2G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"
              (concat "-javaagent:" (expand-file-name "~/.m2/repository/org/projectlombok/lombok/1.18.6/lombok-1.18.6.jar"))))
  :hook (java-mode . lsp)
  :config
  (use-package dap-java :disabled t))
#+end_src

** other

符号高亮和跳转, 已被 ctrlf 替代：
#+begin_src emacs-lisp
(use-package symbol-overlay
  :diminish
  :functions
  (turn-off-symbol-overlay turn-on-symbol-overlay)
  :custom-face
  (symbol-overlay-default-face ((t (:inherit (region bold)))))
  :bind
  (("M-i" . symbol-overlay-put)
   ("M-n" . symbol-overlay-jump-next)
   ("M-p" . symbol-overlay-jump-prev)
   ("M-N" . symbol-overlay-switch-forward)
   ("M-P" . symbol-overlay-switch-backward)
   ("M-C" . symbol-overlay-remove-all)
   ([M-f3] . symbol-overlay-remove-all))
  :hook
  (((prog-mode yaml-mode) . symbol-overlay-mode)
   (iedit-mode . turn-off-symbol-overlay)
   (iedit-mode-end . turn-on-symbol-overlay))
  :init
  (setq symbol-overlay-idle-time 0.1)
  :config
  ;; Disable symbol highlighting while selecting
  (defun turn-off-symbol-overlay (&rest _)
    "Turn off symbol highlighting."
    (interactive)
    (symbol-overlay-mode -1))
  (advice-add #'set-mark :after #'turn-off-symbol-overlay)

  (defun turn-on-symbol-overlay (&rest _)
    "Turn on symbol highlighting."
    (interactive)
    (when (derived-mode-p 'prog-mode 'yaml-mode)
      (symbol-overlay-mode 1)))
  (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay))
#+end_src

离线查询 devdocs 文档（已被 dash 替代）:
#+begin_src emacs-lisp
(use-package devdocs
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex))))
  (add-hook 'python-mode-hook (lambda () (setq-local devdocs-current-docs '("python~3.9"))))
  (add-hook 'go-mode-hook (lambda () (setq-local devdocs-current-docs '("go")))))
#+end_src
+ 安装文档: M-x devdocs-install
+ 更新当前使用的文档目录: C-u M-x dovdocs-lookup

#+begin_src emacs-lisp :tangle no
(setq rime-show-candidate 'posfram)
(setq rime-posframe-properties (list :font "Sarasa SC Gothic" :internal-border-width 2))

;; 有了更好的 ctrlf 替换
;; 直接在 minibuffer 中编辑 query(RIME 探测到 minibuffer 时自动关闭输入法)
(use-package isearch-mb
  :demand t
  :config
  (setq-default
   ;;启动 isearch 进行搜索时，M-<, M->, C-v 和 M-v 这些按键不会打断搜索
   isearch-allow-motion t
   ;; Match count next to the minibuffer prompt
   isearch-lazy-count t
   ;; Don't be stingy with history; default is to keep just 16 entries
   search-ring-max 200
   regexp-search-ring-max 200)

  ;; 习惯使用 regexp 类型的 isearch
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  (add-to-list 'isearch-mb--with-buffer #'consult-isearch)
  (define-key isearch-mb-minibuffer-map (kbd "M-r") #'consult-isearch)

  (add-to-list 'isearch-mb--after-exit #'consult-line)
  (define-key isearch-mb-minibuffer-map (kbd "M-s l") 'consult-line)
  (isearch-mb-mode t))


(use-package visual-regexp
  :config
  (setq vr/match-separator-use-custom-face t)
  (setq vr/match-separator-string "⇛")
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace))

;; diff-hl 会导致 buffer 内容错乱
(use-package diff-hl
  :disabled
  :after (magit)
  :config
  (setq diff-hl-disable-on-remote t)
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode 1)
  (diff-hl-show-hunk-mouse-mode 1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )

;; 中文不加空格使用行内格式, 如强调。（export pdf 时还是需要加空格)
;; 由于分词不准确，故不再使用
(setq org-emphasis-regexp-components
       '("-[:multibyte:][:space:]('\"{" "-[:multibyte:][:space:].,:!?;'\")}\\[" "[:space:]" "." 1))
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
(org-element-update-syntax)


;; 对于远程目录文件直接返回 nil（使用 default-directory)，防止 TRAMP 卡主。
;; -- 更好的解决办法是在 projectile 中集中修改 projectile-project-root 的实现, 如果时远程 project, 直接返回 default-directory
;; (setq consult-project-root-function
;;       (lambda ()
;;         (unless (file-remote-p default-directory)
;;           ;; 使用 projectile.el:
;;           (projectile-project-root)
;;           ;; 使用 project.el：
;;           ;;(when-let (project (project-current))
;;           ;; (car (project-roots project)))
;;           )))

;; 指针宽度与字符一致
(setq-default x-stretch-cursor t)

;; 智能扩展区域，被 easy-kill/mark 取代
(use-package expand-region
  :demand
  :bind
  ("M-@" . er/expand-region))

;; 管理 minior mode
(use-package manage-minor-mode)
(defvar hidden-minor-modes '(whitespace-mode))

(use-package posframe-project-term
  :straight (posframe-project-term :host github :repo "zwpaper/posframe-project-term")
  :bind
  (("C-c t" . posframe-project-term-toggle)))

;; 还是 go-translate 提供的 bing 翻译较为准确
(use-package youdao-dictionary
  :bind
  (("C-c y" . youdao-dictionary-search-at-point))
  :init
  (setq url-automatic-caching t)
  (setq youdao-dictionary-use-chinese-word-segmentation t)
  :config
  ;; 使用 jieba 进行中文分词: pip install jieba
  (use-package chinese-word-at-point :demand t))

(use-package posframe :demand)
(use-package vertico-posframe
  :straight (vertico-posframe :host github :repo "tumashu/vertico-posframe")
  :disabled
  :config
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)
          ;;(alpha . 80)
          ))
  ;; 在光标位置的上方显示 posframe, 避免遮住光标下方的内容
  (defun my/posframe-poshandler-p0.5p0-to-f0.5p1 (info)
    (let ((x (car (posframe-poshandler-p0.5p0-to-f0.5f0 info)))
          ;; 第三个参数 t 表示 upward
          (y (cdr (posframe-poshandler-point-1 info nil t))))
      (cons x y)))
  (setq vertico-posframe-poshandler 'my/posframe-poshandler-p0.5p0-to-f0.5p1)
  (vertico-posframe-mode 1))

;; no-littering 会导致 recentf 等不工作, 故关闭.
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

(use-package tree-sitter
  :demand t
  :config
  (global-tree-sitter-mode)
  ;; 对于支持的语言（查看变量 tree-sitter-major-mode-language-alist）使用
  ;; tree-sitter 提供的高亮来取代内置的、基于 font-lock 正则的低效高亮模式。
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :demand)

(use-package grammatical-edit
  :demand
  :straight (grammatical-edit :host github :repo "manateelazycat/grammatical-edit")
  :config
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'minibuffer-inactive-mode-hook
                 ))
    (add-hook hook '(lambda () (grammatical-edit-mode 1))))
  (define-key grammatical-edit-mode-map (kbd "(") 'grammatical-edit-open-round)
  (define-key grammatical-edit-mode-map (kbd "[") 'grammatical-edit-open-bracket)
  (define-key grammatical-edit-mode-map (kbd "{") 'grammatical-edit-open-curly)
  (define-key grammatical-edit-mode-map (kbd ")") 'grammatical-edit-close-round)
  (define-key grammatical-edit-mode-map (kbd "]") 'grammatical-edit-close-bracket)
  (define-key grammatical-edit-mode-map (kbd "}") 'grammatical-edit-close-curly)
  (define-key grammatical-edit-mode-map (kbd "=") 'grammatical-edit-equal)

  (define-key grammatical-edit-mode-map (kbd "%") 'grammatical-edit-match-paren)
  (define-key grammatical-edit-mode-map (kbd "\"") 'grammatical-edit-double-quote)

  (define-key grammatical-edit-mode-map (kbd "SPC") 'grammatical-edit-space)
  (define-key grammatical-edit-mode-map (kbd "RET") 'grammatical-edit-newline)

  (define-key grammatical-edit-mode-map (kbd "M-o") 'grammatical-edit-backward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-d") 'grammatical-edit-forward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-k") 'grammatical-edit-kill)

  (define-key grammatical-edit-mode-map (kbd "M-\"") 'grammatical-edit-wrap-double-quote)
  (define-key grammatical-edit-mode-map (kbd "M-[") 'grammatical-edit-wrap-bracket)
  (define-key grammatical-edit-mode-map (kbd "M-{") 'grammatical-edit-wrap-curly)
  (define-key grammatical-edit-mode-map (kbd "M-(") 'grammatical-edit-wrap-round)
  (define-key grammatical-edit-mode-map (kbd "M-)") 'grammatical-edit-unwrap)

  (define-key grammatical-edit-mode-map (kbd "M-p") 'grammatical-edit-jump-right)
  (define-key grammatical-edit-mode-map (kbd "M-n") 'grammatical-edit-jump-left)
  (define-key grammatical-edit-mode-map (kbd "M-:") 'grammatical-edit-jump-out-pair-and-newline)
  )

#+end_src

书签管理器:
#+begin_src emacs-lisp
(use-package ebuku
  :ensure-system-package (buku . "pip3 install buku")
  :config
  ;; 不限制结果
  (setq ebuku-results-limit 0))
#+end_src
+ =buku --ai= 导入 Firefox/Chrome 书签;
+ =M-x ebuku= : 浏览和编辑导入的书签, 点击 URL 使用 Mac 浏览器打开。

#+begin_src emacs-lisp :tangle no
(use-package shackle
  :demand
  :config
  (setq shackle-default-size 0.3)
  (setq shackle-default-alignment 'below)
  (setq shackle-default-rule nil)
  (setq shackle-select-reused-windows t)
  (setq shackle-rules
        '((("*Warnings*" "*Messages*" "*Completions*" "*Alerts*") :size 0.3 :align 'below :autoclose t)
          (compilation-mode :select t :size 0.3 :align 'below :autoclose t)
          ("*quickrun*" :select t :size 15 :align 'below :autoclose t)
          ("*Backtrace*" :select t :size 15 :align 'below :autoclose t)
          (("*Help*" "*Apropos*" "*Occur*") :select t :size 0.3 :align 'below :autoclose t)
          (helpful-mode :select t :size 0.5 :popup t :align 'below :autoclose t)
          ("^\\*.*Shell Command.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
          (" *Flycheck checkers*" :select t :size 0.3 :align 'below :autoclose t)
          ((flycheck-error-list-mode flymake-diagnostics-buffer-mode) :select t :size 0.25 :align 'below :autoclose t)
          (("*lsp-help*" "*lsp session*" "*LSP Error List*") :size 0.3 :align 'below :autoclose t)
          ("*DAP Templates*" :select t :size 0.4 :align 'below :autoclose t)
          (dap-server-log-mode :size 15 :align 'below :autoclose t)
          (profiler-report-mode :select t :size 0.5 :align 'below)
          ("*ELP Profiling Restuls*" :select t :size 0.5 :align 'below)
          (("*Gofmt Errors*" "*Go Test*") :select t :size 0.3 :align 'below :autoclose t)
          (godoc-mode :select t :size 0.4 :align 'below :autoclose t)
          ((grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode) :select t :size 0.4 :align 'below)
          (hover-mode :select t :size 0.2 :align 'below :autoclose t)
          (vterm-mode :select t :size 0.7 :align 'below)
          (vc-annotate-mode :select t :size 0.8 :align 'below :autoclose t)
          (special-mode :select t :size 0.5 :align 'below :autoclose t)
          (git-log-view-mode :select t :size 0.5 :align 'below :autoclose t)
          ("*tldr*" :size 0.4 :align 'below :autoclose t)
          ("*Finder*" :select t :size 0.3 :align 'below :autoclose t)
          ("^\\*elfeed-entry" :regexp t :size 0.7 :align 'below :autoclose t)
          (" *Install vterm* " :size 0.35 :same t :align 'below)
          ((youdao-dictionary-mode osx-dictionary-mode fanyi-mode) :select t :size 0.5 :align 'below :autoclose t)
          ("*Calendar*" :select t :size 0.3 :align 'below)
          (" *undo-tree*" :select t)
          (("*Org Agenda*" " *Agenda Commands*" " *Org todo*" "*Org Dashboard*" "*Org Select*") :select t :size 0.1 :align 'below :autoclose t)
          (("\\*Capture\\*" "^CAPTURE-.*\\.org*") :regexp t :select t :size 0.3 :align 'below :autoclose t)
          (Buffer-menu-mode :select t :size 0.5 :align 'below :autoclose t)
          ((process-menu-mode list-environment-mode) :select t :size 0.3 :align 'below)
          (bookmark-bmenu-mode :select t :size 0.4 :align 'below)
          (tabulated-list-mode :size 0.4 :autoclose t)
          ((inferior-python-mode inf-ruby-mode swift-repl-mode) :size 0.4 :align 'below)
          ("*prolog*" :size 0.4 :align 'below)))
  (shackle-mode t))

;; 高亮当前行。由于容易与候选者背景混淆, 所以不开启。
(global-hl-line-mode t)

(use-package company
  :bind
  (:map company-mode-map
        ([remap completion-at-point] . company-complete)
        :map company-active-map
        ([escape] . company-abort)
        ("C-p"     . company-select-previous)
        ("C-n"     . company-select-next)
        ("C-s"     . company-filter-candidates)
        ([tab]     . company-complete-common-or-cycle)
        ([backtab] . company-select-previous-or-abort)
        :map company-search-map
        ([escape] . company-search-abort)
        ("C-p"    . company-select-previous)
        ("C-n"    . company-select-next))
  :custom
  ;; trigger completion immediately.
  (company-idle-delay 0)
  (company-echo-delay 0)
  ;; allow input string that do not match candidate words
  ;; 开启后有大量不匹配的候选情况，故关闭
  ;;(company-require-match nil)
  ;; number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  ;; pop up a completion menu by tapping a character
  (company-minimum-prefix-length 1)
  (company-tooltip-limit 14)
  (company-tooltip-align-annotations t)
  ;; Only search the current buffer for `company-dabbrev' (a backend that
  ;; suggests text your open buffers). This prevents Company from causing
  ;; lag once you have a lot of buffers open.
  (company-dabbrev-other-buffers nil)
  ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
  ;; domain-specific words with particular casing.
  (company-dabbrev-ignore-case nil)
  ;; Don't downcase the returned candidates.
  (company-dabbrev-downcase nil)
  ;; 候选框宽度
  (company-tooltip-minimum-width 70)
  (company-tooltip-maximum-width 100)
  (company-global-modes '(not message-mode help-mode eshell-mode))
  ;; 补全后端
  (company-backends '(company-capf
                      (company-dabbrev-code company-keywords company-files)
                      company-dabbrev))
  :config
  ;; 高亮候选者（orderless 排序）。
  (defun just-one-face (fn &rest args)
    (let ((orderless-match-faces [completions-common-part]))
      (apply fn args)))
  (advice-add 'company-capf--candidates :around #'just-one-face)
  (global-company-mode t))

(use-package company-emoji
  :demand t
  :after (company)
  :config
  (company-emoji-init)
  (add-to-list 'company-backends 'company-emoji))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (use-package restclient-test :diminish :hook (restclient-mode . restclient-test-mode))

  (with-eval-after-load 'company
    (use-package company-restclient
      :defines company-backends
      :init (add-to-list 'company-backends 'company-restclient))))

(use-package company-ansible
  :after (ansible)
  :config
  (add-hook 'ansible-hook (lambda() (add-to-list 'company-backends 'company-ansible))))
#+end_src

project 配置参考：
1. [[https://github.com/jiacai2050/dotfiles/blob/master/.config/emacs/i-basic.el][jiacai2050/dotfiles]]
2. [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-lisp/prot-project.el][protesilaos/dotfiles]]

#+begin_src emacs-lisp :tangle no
;; 第一个 frame 规格
(setq initial-frame-alist '((top . 10 ) (left . 10) (width . 200) (height . 60)))
;; 后续 frame 规格
(setq default-frame-alist '((top . 10 ) (left . 10) (width . 200) (height . 60)))

(use-package pdf-continuous-scroll-mode
  :straight (:host github :repo  "dalanicolai/pdf-continuous-scroll-mode.el")
  :demand
  :after (pdf-tools)
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode))

(use-package find-file-in-project
  :config
  ;; ffip adds `ffap-guess-file-name-at-point' automatically and it is crazy slow on TRAMP buffers.
  ;; https://github.com/mpereira/.emacs.d/#find-file-in-project
  (remove-hook 'file-name-at-point-functions 'ffap-guess-file-name-at-point))

;;类似于 consult-grep 和 consult-find, 但前后端都异步且支持 fuzzy 搜索。
(use-package affe
  :after (orderless)
  :ensure-system-package
  ((gfind . findutils)
   (fd . fd)
   (fzf . fzf)
   (rg . ripgrep))
  :bind
  (;; bind-c bindings (mode-specific-map)
   ("M-s g" . affe-grep)
   ("M-s f" . affe-find))
  :config
  (setq affe-count 200)
  ;; Configure Orderless
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless--highlight)
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key (kbd "M-.")))

(use-package project
  :after (vterm)
  :config
  (setq project-switch-commands
    '((?f "File" project-find-file)
          (?g "Grep" project-find-regexp)
          (?d "Dired" project-dired)
          (?b "Buffer" project-switch-to-buffer)
          (?q "Query replace" project-query-replace-regexp)
          (?v "VC dir" project-vc-dir)
          (?t "Vterm" vterm)))

  (defun my/project-try-local (dir)
    "Determine if DIR is a non-Git project.
DIR must include a .project file to be considered a project."
    (catch 'ret
      ;;(dolist (flag-file '(".project" "README.org" "README.md" "Makefile" "pom.xml" "go.mod" "project.clj"))
      (dolist (flag-file '(".project" ".project."))
    (when-let ((root (locate-dominating-file dir flag-file)))
          (throw 'ret (cons 'local root))))))

  (setq project-find-functions '(my/project-try-local project-try-vc))

  (cl-defmethod project-root ((project (head local)))
    (cdr project))

  (defun my/project-info ()
    (interactive)
    (message "%s" (project-current t)))

  (defun my/project-discover ()
    (interactive)
    (dolist (search-path '("~/codes/" "~/go/src/github.com/*" "~/go/src/k8s.io/*" "~/go/src/gitlab.*/*/*"))
      (dolist (file (file-expand-wildcards search-path))
    (message "-> %s" file)
    (when (file-directory-p file)
          (when-let ((pr (project-current nil file)))
            (project-remember-project pr)
            (message "add project %s..." pr))))))

  (defun my/project-add (dir)
    (interactive "DWhich dir:")
    (let* ((project-flag-file (expand-file-name ".project." dir)))
      (if-let ((pr (project-current nil dir)))
          (if (string-equal (project-root pr) dir)
              (project-remember-project pr)
            (progn
              (make-empty-file project-flag-file)
              (project-remember-project (cons 'local dir))))
    (progn
          (make-empty-file project-flag-file)
          (project-remember-project (cons 'local dir)))))
    (message "Add project %s..." dir))

  (defun my/project-remove ()
    "Remove project from `project--list' using completion."
    (interactive)
    (project--ensure-read-project-list)
    (let* ((projects project--list)
           (dir (completing-read "REMOVE project: " projects nil t)))
      (setq project--list (delete (assoc dir projects) projects))
      (project--write-project-list)))
  )

(require 'package)
(setq package-archives '(("celpa" . "https://celpa.conao3.com/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
;; activate all the packages (in particular autoloads)
(package-initialize)
;; fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))
(setq package-native-compile t)

(setq use-package-always-ensure t
      use-package-always-demand t)
(setq use-package-verbose t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-compute-statistics t)

;; 由于编译 emacs 29 时指定了 no title-bar, 所以不再需要这个配置了
(use-package ns-auto-titlebar
  :demand t
  :config
  (when (eq system-type 'darwin)
    (ns-auto-titlebar-mode)))

;; Mac native fullscreen 会导致白屏和左右滑动问题，故使用传统全屏模式。
;; Emacs 28 开启后不能正常 max-frame 或 fullscreen
(when (eq system-type 'darwin)
  (setq ns-use-native-fullscreen nil
        ns-use-fullscreen-animation nil))

;; Make cursor movement an order of magnitude faster
;; https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
;; 会导致 buffer 部分 fontify 不准确
(setq fast-but-imprecise-scrolling 't)

(use-package origami
  :straight (origami :host github :repo "elp-revive/origami.el")
  :demand t
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

(use-package lsp-origami
  :after (lsp origami)
  :demand t
  :config
  (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable))

(use-package emmet-mode
  :after(web-mode js2-mode)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
  (setq emmet-expand-jsx-className? t)
  ;; Make `emmet-expand-yas' not conflict with yas/mode
  (setq emmet-preview-default nil))

;; flycheck
;; 在当前窗口底部显示错误列表
(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (side            . bottom)
               (reusable-frames . visible)
               (window-height   . 0.33)))

(use-package modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend)
        modus-themes-variable-pitch-ui t
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-title 1.33)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; modus 要求切换主题时设置字体，否则 org code 字体不对。
  ;;(add-hook 'modus-themes-after-load-theme-hook #'my/faces)
  (modus-themes-load-operandi) ;; 浅色主题
  ;;(modus-themes-load-vivendi)  ;; 深色主题
  )

(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

(use-package mini-frame
  :disabled
  :config
  (setq x-gtk-resize-child-frames 'resize-mode)
  ;; 光标位置显示 minibuffer
  (setq mini-frame-show-parameters
        (lambda ()
          (let* ((info (posframe-poshandler-argbuilder))
                 (posn (posframe-poshandler-point-bottom-left-corner info))
                 (left (car posn))
                 (top (cdr posn)))
            `((left . ,left)
              (top . ,top)))))
  ;; 固定在 frame 顶部显式。
  ;;(custom-set-variables '(mini-frame-show-parameters '((top . 10) (width . 0.7) (left . 0.5)  (height . 10))))
  (mini-frame-mode))


(transient-mark-mode t)

(add-to-list 'default-frame-alist '(height . 600))
(add-to-list 'default-frame-alist '(width . 600))

;; That tells auth-source (the package responsible for retrieving and storing
;; passwords from the environment) to consult the keychain for your credentials
;; - instead of putting them into ~/.authinfo in plaintext
;; https://www.reddit.com/r/emacs/comments/ew75ib/comment/fg23tcj/?utm_source=share&utm_medium=web2x&context=3
(eval-after-load 'auth-source
  '(when (member window-system '(mac ns))
     (add-to-list 'auth-sources 'macos-keychain-internet)
     (add-to-list 'auth-sources 'macos-keychain-generic)))

;; buffer 智能分组（取代 ibuffer）
;; 显示 buffer 列表时会自动连接 TRAMP buffer, 可能会卡住。
(use-package bufler :config (global-set-key (kbd "C-x C-b") 'bufler))

;; 多光标编辑
(use-package iedit)

(defconst sys/macp (eq system-type 'darwin) "Are we running on a Mac system?")
(defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "Are we running under X on a Mac system?")
(defconst sys/mac-ns-p (eq window-system 'ns) "Are we running on a GNUstep or Macintosh Cocoa display?")
(defconst sys/mac-cocoa-p (featurep 'cocoa) "Are we running with Cocoa on a Mac system?")
(defconst sys/mac-port-p (eq window-system 'mac) "Are we running a macport build on a Mac system?")

;; cnfont 会自动设置 hook，开启 cnfont 的情况下，不需要配置这个 hook
(add-hook 'emacs-startup-hook #'my/faces)

;; 不能在 load-theme 时执行这个函数，否则字体缩放有问题。
;; 这个函数只被 modus-theme 在切换主题时调用。
;;(advice-add #'load-theme :after #'my/faces)

;; (add-hook 'emacs-startup-hook
;;           (lambda () (load-theme 'doom-dracula t))
;;           'append)

;; Get rid of "For information about GNU Emacs..." message at startup, unless
;; we're in a daemon session where it'll say "Starting Emacs daemon." instead,
;; which isn't so bad.
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))

;; 中英文之间自动加空格
(use-package pangu-spacing
  :config
  ;; 只是在中英文之间显示空格
  (global-pangu-spacing-mode 1)
  ;; 保存时真正插入空格
  (setq pangu-spacing-real-insert-separtor t))

(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  ;;(eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :bind
  ("s-`" . eshell-toggle))

(use-package native-complete
  :custom
  (with-eval-after-load 'shell
    (native-complete-setup-bash)))

(use-package company-native-complete
  :after (company)
  :custom
  (add-to-list 'company-backends 'company-native-complete))

(use-package persp-mode
  :custom
  (persp-keymap-prefix (kbd "C-x p"))
  :config
  (persp-mode))

(use-package treemacs-persp
  :after (treemacs persp-mode)
  :config
  (treemacs-set-scope-type 'Perspectives))

;; pyenv-mode 通过给项目设置环境变量 ~PYENV_VERSION~ 来达到指定 pyenv 环境的目的：
(use-package pyenv-mode
  ;;:after (projectile)
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  ;; (defun projectile-pyenv-mode-set ()
  ;;   (let ((project (projectile-project-name)))
  ;;     (if (member project (pyenv-mode-versions))
  ;;         (pyenv-mode-set project)
  ;;       (pyenv-mode-unset))))
  ;;(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  :bind
  ;; 防止和 org-mode 快捷键冲突
  (:map pyenv-mode-map ("C-c C-u") . nil)
  (:map pyenv-mode-map ("C-c C-s") . nil))

(use-package selectrum :init (selectrum-mode +1))
(use-package prescient  :config (prescient-persist-mode +1))
(use-package selectrum-prescient :init (selectrum-prescient-mode +1))

;;company-prescient 精准排序：
(use-package company-prescient
  :after (company prescient)
  :init (company-prescient-mode +1))

(use-package modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend)
        modus-themes-variable-pitch-ui t
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-title 1.33)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; modus 要求切换主题时设置字体，否则 org code 字体不对。
  (add-hook 'modus-themes-after-load-theme-hook #'my/faces)
  ;;(modus-themes-load-operandi) ;; 浅色主题
  ;;(modus-themes-load-vivendi)  ;; 深色主题
  )

(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

;; cnfont 会自动设置字体和缩放，开启 cnfont 时不需要配置这个 hook 。而且这个只是
;; 很对特定字号的scale, 如果缩放屏幕就会出现中英文混乱的情况，所以最好使用
;; cnfonts
(add-hook 'emacs-startup-hook (lambda ()
                                ;; 只会对初始 frame 生效
                                (my/faces)
                                ;; 创建新 frame 时也生效
                                (add-to-list 'after-make-frame-functions
                                             (lambda (new-frame)
                                               (select-frame new-frame)
                                               (if window-system
                                                   (my/faces))))))

;; https://github.com/minad/mini-popup
;; https://raw.githubusercontent.com/minad/mini-popup/main/mini-popup.el
(use-package mini-popup
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp"
  :config
  ;; Configure a height function (Example for Vertico)
  (defun mini-popup-height-resize ()
    (* (1+ (min vertico--total vertico-count)) (default-line-height)))
  (defun mini-popup-height-fixed ()
    (* (1+ (if vertico--input vertico-count 0)) (default-line-height)))
  (setq mini-popup--height-function #'mini-popup-height-resize)

  ;; Disable the minibuffer resizing of Vertico (HACK)
  (advice-add #'vertico--resize-window :around
              (lambda (&rest args)
                (unless mini-popup-mode
                  (apply args))))

  ;; Ensure that the popup is updated after refresh (Consult-specific)
  (add-hook 'consult--completion-refresh-hook
            (lambda (&rest _) (mini-popup--setup)) 99)
  (mini-popup-mode t))

;; 键盘黏滞键
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global ".." 'ebuku)
  (key-chord-define-global ",," '(lamba ()(find-file "~/Downloads/history.json"))))

;; 画图
(use-package svg
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp")

;; 自动调整窗口大小
(use-package zoom
  :disabled
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(dired-mode markdown-mode ediff-mode))
  (zoom-ignored-buffer-names '("zoom.el" "init.el" "*Ediff Control Panel*"))
  (zoom-ignored-buffer-name-regexps '("^\\*calc" "^\\*[eE]diff.*"))
  (zoom-ignore-predicates (list (lambda () (< (count-lines (point-min) (point-max)) 20))))
  :config
  (zoom-mode t))

;; 使用 embark C-h 替换 which-key
;; which-key 会导致 ediff 的 gX 命令卡住，解决办法是向 Emacs 发送 USR2 信号
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.8))

;; org-msg 在回复消息时，只能看到回复引用的内容，而看不到消息本身，故不再使用。
(use-package org-msg
  :ensure t
  :disabled
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-recipient-names '(("geekard@qq.com" . "zhangjun"))
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text)))
        org-msg-convert-citation t)
  (org-msg-mode)
  )

;;company-box 为候选者显示图标和帮助文档, 会导致 RIME 输入法提示时卡住, 故关闭。
(use-package company-box
  :after (company all-the-icons)
  :init
  ;;(setq company-box-doc-enable nil)
  (setq company-box-doc-delay 0.1)
  :hook (company-mode . company-box-mode))

;;origami 提供代码折叠功能，最新版本[[https://github.com/elp-revive/origami.el/issues/1][从 celpa 源安装]]：
;; 由于可以使用 consult-line 和 occur 来替代，所以不再使用。
(use-package origami
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

;; youdao
(defun my-youdao-dictionary-search-at-point ()
  "Search word at point and display result with `posframe', `pos-tip', or buffer."
  (interactive)
  (if (display-graphic-p)
      (youdao-dictionary-search-at-point-posframe)
    (youdao-dictionary-search-at-point)))

(with-no-warnings
  (defun my-youdao-dictionary--posframe-tip (string)
    "Show STRING using posframe-show."
    (unless (and (require 'posframe nil t) (posframe-workable-p))
      (error "Posframe not workable"))

    (let ((word (youdao-dictionary--region-or-word)))
      (if word
          (progn
            (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
              (let ((inhibit-read-only t))
                (erase-buffer)
                (youdao-dictionary-mode)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (insert string)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
            (posframe-show youdao-dictionary-buffer-name
                           :position (point)
                           :left-fringe 16
                           :right-fringe 16
                           :posframe-width 100
                           :background-color (face-background 'tooltip nil t)
                           :internal-border-color (face-foreground 'font-lock-comment-face nil t)
                           :internal-border-width 1)
            (unwind-protect
                (push (read-event) unread-command-events)
              (progn
                (posframe-hide youdao-dictionary-buffer-name)
                (other-frame 0))))
        (message "Nothing to look up"))))

  (advice-add #'youdao-dictionary--posframe-tip
              :override #'my-youdao-dictionary--posframe-tip))

;;安装外置输入法切换工具 [[https://github.com/laishulu/macism#install][macism]]，
;;解决 Mac 切换输入法后必须输入一个字符才能生效的问题。同时系统的 “快捷键”->“选
;;择上一个输入法” 快捷键必须要开启，否则 macism
;;[[https://github.com/laishulu/macism/issues/2][会切换失败]]。必须在启用
;;=respect-mode= 之前设置 =sis-prefix-override-keys= 变量，否则变量不生效。
(use-package sis
  ;; mac 输入法选择
  :ensure-system-package (macism . "brew tap laishulu/macism; brew install macism")
  :config
  (sis-ism-lazyman-config "com.apple.keylayout.ABC" "com.sogou.inputmethod.sogou.pinyin")
  ;; 自动切换到英文的前缀快捷键
  (push "C-;" sis-prefix-override-keys)
  (push "M-o" sis-prefix-override-keys)
  (push "M-g" sis-prefix-override-keys)
  (push "M-s" sis-prefix-override-keys)
  (sis-global-context-mode nil)
  (sis-global-respect-mode t)
  (global-set-key (kbd "C-\\") 'sis-switch))

;; 快速跳转当前标记符
(use-package symbol-overlay
  :config
  (global-set-key (kbd "M-i") 'symbol-overlay-put)
  (global-set-key (kbd "M-n") 'symbol-overlay-jump-next)
  (global-set-key (kbd "M-p") 'symbol-overlay-jump-prev)
  (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
  (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
  :hook (prog-mode . symbol-overlay-mode))

;;isearch 与 rime [[https://github.com/DogLooksGood/emacs-rime/issues/21][不兼
;;容]]，会导致输入的中文不能候选，可以使用 phi-search 解决：
;; 注: occur 比 isearch 更好用，与 rime 兼容。
(use-package phi-search
  :after (rime)
  :config
  (global-set-key (kbd "C-s") 'phi-search)
  (global-set-key (kbd "C-r") 'phi-search-backward))

(defun my/disable-vertico (orig-fun &rest args)
  (print args)
  (apply orig-fun args)
  ;; (if (string-match ".*(ssh|scp):.*" args)
  ;;     (progn (vertico-mode -1)
  ;;            (apply orig-fun args))
  ;;   (progn (vertico-mode t)
  ;;          (apply orig-fun args))
  )
(advice-add 'find-file-noselect :around #'my/disable-vertico)

(defun my/time-advice (func-orig &rest r)
  ;;(print r)
  (apply func-orig r))
(setq my/completion-func-to-advise #'completion-all-completions)
(advice-add my/completion-func-to-advise :around #'my/time-advice)

(use-package mu4e-dashboard
  :straight (mu4e-dashboard :host github :repo "rougier/mu4e-dashboard"))

;;Make invisible parts of Org elements appear visible.
(use-package org-appear
  :custom
  (org-appear-autolinks t)
  :hook (org-mode . org-appear-mode))

;; 在 side-window 显示窗口，side-window 会一直显示，为 vterm mode 专用（不能最大化），
;; vterm-toggle-forward 和  'vterm-toggle-backward 也都显示在这个 side-window 中。
(setq vterm-toggle-fullscreen-p nil)
(add-to-list 'display-buffer-alist
             '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . bottom)
               (dedicated . t)
               (reusable-frames . visible)
               (window-height . 0.4)))

;; 增强窗口背景对比度
(use-package solaire-mode
  :demand
  :config (solaire-global-mode +1))

;; :config
;; (doom-modeline-def-modeline 'main
;;   ;; left-hand segment list, 去掉 remote-host，避免编辑远程文件时卡住。
;;   '(bar workspace-name window-number modals matches buffer-info buffer-position word-count parrot selection-info)
;;   ;; right-hand segment list，尾部增加空格，避免溢出。
;;   '(objed-state misc-info battery grip debug repl lsp minor-modes input-method major-mode process vcs checker " "))
#+end_src

#+begin_src emacs-lisp
;; 窗口大小调整快捷键。
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

(use-package ansible
  :after (yaml-mode)
  :config
  (add-hook 'yaml-mode-hook (lambda () (ansible 1))))

;; ansible-doc 使用系统的 ansible-doc 命令搜索文档
(use-package ansible-doc
  :ensure-system-package (ansible-doc . "pip install ansible")
  :after (ansible yasnippet)
  :config
  (add-hook 'ansible-hook (lambda() (ansible-doc-mode) (yas-minor-mode-on)))
  (define-key ansible-doc-mode-map (kbd "M-?") #'ansible-doc))
#+end_src

词典:
#+begin_src emacs-lisp
(use-package go-translate
  :bind
  (("C-c d t" . gts-do-translate))
  :config
  (setq gts-translate-list '(("en" "zh")))
  (setq gts-default-translator
        (gts-translator
         :picker (gts-prompt-picker)
         :engines (list (gts-bing-engine) (gts-google-engine))
         :render (gts-buffer-render))))

;; pip install jieba
(use-package chinese-word-at-point)
#+end_src

在线搜索：
#+begin_src emacs-lisp
(use-package engine-mode
  :config
  (engine-mode t)
  ;;(setq engine/browser-function 'eww-browse-url)
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "h")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine twitter
    "https://twitter.com/search?q=%s"
    :keybinding "t")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Searchin' the wikis."))
#+end_src
+ 搜索前缀命令： =C-x /= , 可以先选中 region 再执行上面的搜索。
+ 修复启动报错:  =rm ~/.emacs.d/elpa/engine-mode*/engine-mode-*.el*=;

使用 Mac 默认浏览器打开 URL:
#+begin_src emacs-lisp
;; 执行 browser-url 时使用 Mac 默认浏览器。
(setq browse-url-browser-function 'browse-url-default-macosx-browser)

;; 也可以使用自定义程序
;; (setq browse-url-browser-function 'browse-url-generic
;;       browse-url-generic-program "mychrome")
;;(setq browse-url-chrome-program "mychrome")
#+end_src

上面引用的 mychrome 程序：
#+begin_src bash  :tangle ~/go/bin/mychrome
#!/bin/bash
open -a 'Google Chrome' $*
#+end_src


#+begin_src emacs-lisp
;; 记录最近 100 次按键，可以通过 M-x view-lossage 来查看输入的内容。
(lossage-size 100)

(use-package uniquify
  :straight (:type built-in)
  :config
  ;; Better unique buffer names for files with the same base name.
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))

;; Framework for mode-specific buffer indexes
(use-package imenu
  :straight (:type built-in)
  :bind (("C-c i" . imenu)))
#+end_src

Org-mode Web 站点:
#+begin_src emacs-lisp
(use-package easy-hugo
:init
(setq easy-hugo-basedir "~/blog/my_website/")
(setq easy-hugo-url "https://blog.opsnull.com")
(setq easy-hugo-previewtime "300")
:bind ("C-c C-e" . easy-hugo))
#+end_src

** hugo

#+begin_src emacs-lisp
(use-package cnfonts
  :demand
  :disabled
  :init
  ;; 中英文均使用 Sarasa Term SC 字体。
  (setq cnfonts-personal-fontnames '(("Sarasa Term SC") ("Sarasa Term SC") ("HanaMinB")))
  ;; 允许字体缩放(部分主题如 lenven 依赖) 。
  (setq cnfonts-use-face-font-rescale t)
  :config
  ;; emoji 和 symbol 字体, 必须通过 cnfonts-set-font-finish-hook 调用才会生效。
  (defun my/set-fonts (&optional font)
    (setq use-default-font-for-symbols nil)
    (set-fontset-font t '(#x1f000 . #x1faff) (font-spec :family "Apple Color Emoji"))
    (set-fontset-font t 'symbol (font-spec :family "Apple Symbols" :size 20)))
  (add-hook 'cnfonts-set-font-finish-hook 'my/set-fonts)
  (cnfonts-enable))
#+end_src

#+begin_src emacs-lisp
;; New link type for Org-Hugo internal links
(org-link-set-parameters "hugo"
                         :complete (lambda ()
                                     (concat "{{% ref "(file-name-nondirectory (read-file-name "File: "))" %}}")))
#+end_src

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
#+end_src

key chord 连续按键快捷键:
#+begin_src emacs-lisp
(use-package key-chord
  :demand
  :config
   (key-chord-mode 1)
   (key-chord-define-global "ll" 'avy-goto-line)
   (key-chord-define-global "cc" 'avy-goto-char-2)
   (key-chord-define-global ",," 'indent-for-comment)
   (setq key-chord-one-key-delay 0.4)
   (setq key-chord-two-keys-delay 0.3))
#+end_src

* email

#+begin_src emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :ensure-system-package
  ((mu . mu)
   (mbsync . isync)
   (gpg . gnupg)
   (proxychains4 . proxychains-ng)
   (openssl . openssl@1.1)))
#+end_src
+ mbsync(isync): 同步邮件到本地；
+ mu(带 mu4e emacs 包): 索引和读取邮件；
+ proxychains-ng: 任意 socket 代理, 访问 gmail 使用;
+ gnupg: 加密；
+ openssl@1.1: 提供 isync 和 msmtp 所需的根证书；

** gnupg

参考: [[https://ruanyifeng.com/blog/2013/07/gpg.html][阮一峰 GPG 入门教程]]

创建加密 key 。为了提高 key 安全系数，一般推荐在创建 key 时设置一个密码，这样即使密钥丢了，别人也无法使用:
#+begin_src shell :tangle no
# 生成加密 key
$ gpg --gen-key
# 生成吊销证书
$ gpg --gen-revoke B1D06C306F507C66
# 查看 key
$ gpg --list-keys
/Users/zhangjun/.gnupg/pubring.kbx
----------------------------------
pub   ed25519 2021-10-03 [SC] [有效至：2023-10-03]
10BC65EE905F64CCAFF5E123B1D06C306F507C66
uid             [ 绝对 ] zhangjun <geekard@qq.com>
sub   cv25519 2021-10-03 [E] [有效至：2023-10-03]
#+end_src

uid 是 zhangjun 或 geekard@qq.com 或 hash 值。获取 hash 值：
+ =gpg -a --export |gpg --list-packets --verbose=
+ =M-x epa-list-keys=

为了避免每次使用 key 时都输入密码，可以配置 =gpg-agent= 来记住密码，这样只需在系统第一次使用时输入即可：
#+begin_src shell :tangle ~/.gnupg/gpg-agent.conf
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src

为了让 Emacs 能在首次使用 GPG 时，捕获密码输入框，在 minibuffer 中输入密码，需要做如下的配置：
#+begin_src emacs-lisp :tangle no
(setq epa-pinentry-mode 'loopback)
#+end_src
+ pinentry 是 GPG 提供的程序, [[https://sarata.com/manpages/pinentry-curses.1.html]["它会让用户输入的密码不会因内存不足而换出到磁盘"]] 。

创建 qq 和 gmail 加密密码文件：
 #+begin_src shell :tangle no
$ mkdir ~/.mail
$ echo my.qq.password >.mail/qq.pwd
$ gpg --encrypt --recipient 'geekard@qq.com' ~/.mail/qq.pwd

$ echo my.gmail.password >.mail/gmail/gmail.pwd
$ gpg --encrypt --recipient 'geekard@qq.com' ~/.mail/gmail.pwd

$ ls ~/.mail/*.gpg
/Users/zhangjun/.mail/gmail.pwd.gpg  /Users/zhangjun/.mail/qq.pwd.gpg

# 删除原始明文密码
rm ~/.mail/{qq,gmail}.pwd
 #+end_src

解压密码文件: =gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.mail/qq.pwd.gpg=

** mbsync

#+begin_src txt :tangle ~/.mbsyncrc
########################################
# qq.com
########################################
IMAPAccount qq
Host imap.qq.com
User geekard@qq.com
PassCmd "gpg --quiet --for-your-eyes-only --no-tty --decrypt \~/.mail/qq.pwd.gpg"
Port 993
AuthMechs LOGIN
SSLType IMAPS
#CertificateFile /etc/ssl/certs/ca-certificates.crt # Linux
CertificateFile /usr/local/etc/openssl@1.1/cert.pem  # MacOS

IMAPStore qq-remote
Account qq

MaildirStore qq-local
# The trailing "/" is important
Path ~/.mail/qq/
Inbox ~/.mail/qq/Inbox/
# The SubFolders option allows to represent all IMAP subfolders as local subfolders
SubFolders Verbatim

## Connections
Channel qq-inbox
Far :qq-remote:"INBOX"
Near :qq-local:"Inbox"
Create Near
Expunge Both
SyncState *

Channel qq-drafts
Far :qq-remote:"Drafts"
Near :qq-local:"Drafts"
Create Near
Expunge Both
SyncState *

Channel qq-sent
Far :qq-remote:"Sent Messages"
Near :qq-local:"Sent"
Create Near
Expunge Both
SyncState *

Channel qq-trash
Far :qq-remote:"Deleted Messages"
Near :qq-local:"Trash"
Create Near
Expunge Both
SyncState *

## Groups
Group qq
Channel qq-inbox
Channel qq-drafts
Channel qq-sent
Channel qq-trash

########################################
# gmail
########################################
IMAPAccount gmail
Host imap.gmail.com
User geekard@gmail.com
PassCmd "gpg --quiet --for-your-eyes-only --no-tty --decrypt \~/.mail/gmail.pwd.gpg"
SSLType IMAPS
AuthMechs PLAIN
CertificateFile /usr/local/etc/openssl@1.1/cert.pem  # MacOS

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
# The trailing "/" is important
Path ~/.mail/gmail/
Inbox ~/.mail/gmail/inbox

Channel gmail-default
Far :gmail-remote:
Near :gmail-local:Inbox
#Patterns INBOX
Create Near
Expunge Both
SyncState *

Channel gmail-sent
Far :gmail-remote:"[Gmail]/Sent Mail"
Near  :gmail-local:Sent
Create Near
Expunge Both
SyncState *

Channel gmail-trash
Far :gmail-remote:"[Gmail]/Trash"
Near  :gmail-local:Trash
Create Near
Expunge Both
SyncState *

Channel gmail-archive
Far :gmail-remote:"[Gmail]/All Mail"
Near  :gmail-local:All
Create Near
Expunge Both
SyncState *

Channel gmail-junk
Far :gmail-remote:"[Gmail]/Spam"
Near  :gmail-local:Junk
Create Near
Expunge Both
SyncState *

Group gmail
Channel gmail-default
Channel gmail-trash
Channel gmail-archive
Channel gmail-sent
Channel gmail-junk
#+end_src

同步邮件:
#+begin_src shell
$ mkdir -p ~/.mail/qq/{Sent,Drafts,Trash,Archive}
$ mkdir -p ~/.mail/gmail/{All,Sent,Drafts,Junk,Trash}
$ mbsync --all
#+end_src
+ 使用 https://gitlab.com/shackra/goimapnotify 可以实现自动调用 mbsync 同步邮件。

** proxychains

proxychains 为不支持代理的命令行程序（如 mbsync )提供任意 socks 代理功能：
#+begin_src shell :tangle no
$ mkdir .proxychains/
$ cp /usr/local/Cellar/proxychains-ng/4.14/.bottle/etc/proxychains.conf ~/.proxychains/proxychains.conf
#+end_src

在 proxychains.conf 的 ProxyList 中添加 socks5 代理地址:
#+begin_src text :tangle no
[ProxyList]
socks5  127.0.0.1 13659
#+end_src

测试 gmail:
#+begin_src shell :tangle no
$ proxychains4 mbsync gmail
#+end_src

** mu4e

#+begin_src shell
# 初始化索引, 指定自己的 email 地址列表
$ mu init --maildir ~/.mail/ --my-address=geekard@qq.com --my-address=geekard@gmail.com
# 建立索引
$ mu index
# 检索索引
$ mu find github
# 查看信息
$ mu info
#+end_src
+ 索引位置： =~/.cache/mu=

#+begin_src emacs-lisp
(defvar attachments-directory "~/.mail/attachments")
(if (not (file-exists-p attachments-directory))
    (make-directory attachments-directory t))

(use-package mu4e
  :disabled
  ;; 使用 mu4e/* 目录下的 lisp 文件, 跳过 straight 的 build 过程;
  :straight (:host github :repo "djcb/mu" :branch "master" :files ("mu4e/*") :build nil)
  :config
  ;; Run mu4e in the background to sync mail periodically
  (mu4e t)

  (setq shr-color-visible-luminance-min 80)

  ;; View images inline in message view buffer
  (setq mu4e-view-show-images t)
  (setq mu4e-view-image-max-width 800)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; show full addresses in view message (instead of just names)
  (setq mu4e-view-show-addresses t)

  ;; Do not insert signature in sent emails
  (setq mu4e-compose-signature-auto-include nil)

  ;; every new email composition using current frame
  (setq mu4e-compose-in-new-frame nil)
  (setq mu4e-compose-format-flowed nil)

  ;; It is OK to use non-ascii characters
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-attachment-dir attachments-directory)

  ;; This enabled the thread like viewing of email similar to gmail's UI.
  (setq mu4e-headers-include-related t)
  ;; Do not display duplicate messages
  (setq mu4e-headers-skip-duplicates t)
  (setq mu4e-headers-date-format "%Y/%m/%d")

  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-display-update-status-in-modeline t)
  (setq mu4e-hide-index-messages t)
  (setq mu4e-date-format "%y/%m/%d")

  ;; Do not confirm on quit
  (setq mu4e-confirm-quit nil)

  ;; use mu4e as MUA in emacs
  (setq mail-user-agent 'mu4e-user-agent)

  ;; Kill message buffer after email is sent
  (setq message-kill-buffer-on-exit t)

  ;; 回复邮件时，插入邮件引用信息
  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  (setq message-citation-line-format "On %a, %b %d %Y, %f wrote:\n")

  (setq gnus-unbuttonized-mime-types nil)

  ;; mu find 搜索任意单个中文字符。
  (setenv "XAPIAN_CJK_NGRAM" "yes")

  (add-to-list 'mu4e-view-actions '("browser" . mu4e-action-view-in-browser) t)
  (add-hook 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;; 使用 proxychains4 socks5 代理周期同步邮件
  (setq mu4e-get-mail-command  "proxychains4 mbsync -a")
  (setq mu4e-update-interval 3600)

  ;; 使用 gnus 发送邮件
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verb t)

  (setq mu4e-user-mailing-lists '("geekard@qq.com" "geekard@gmail.com"))

  ;; root maildir
  (setq mu4e-maildir "~/.mail")

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "gmail"
             :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
             :match-func (lambda (msg)
                           (when msg
                             (or (mu4e-message-contact-field-matches msg '(:to :bcc :cc) "geekard@gmail.com")
                                 (string-match-p "^/gmail" (mu4e-message-field msg :maildir)))))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address            . "geekard@gmail.com")
                     (user-full-name               . "张俊(Jun Zhang)")
                     (smtpmail-default-smtp-server . "smtp.gmail.com")
                     (smtpmail-smtp-server         . "smtp.gmail.com")
                     (smtpmail-smtp-user           . "geekard@gmail.com")
                     (smtpmail-smtp-service        . 587)
                     (smtpmail-stream-type         . starttls)
                     (mu4e-compose-signature       . (concat "---\n zhangjun \n"))
                     (mu4e-sent-folder      . "/gmail/Sent") ;; folder for sent messages
                     (mu4e-drafts-folder    . "/gmail/Drafts") ;; unfinished messages
                     (mu4e-trash-folder     . "/gmail/Junk") ;; trashed messages
                     (mu4e-refile-folder    . "/gmail/Archive"))) ;; ;; saved messages
           ,(make-mu4e-context
             :name "qq"
             :enter-func (lambda () (mu4e-message "Switch to the qq context"))
             :match-func (lambda (msg)
                           (when msg
                             (or (mu4e-message-contact-field-matches msg '(:to :bcc :cc) "geekard@qq.com")
                                 (string-match-p "^/qq" (mu4e-message-field msg :maildir)))))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '(
                     (user-mail-address            . "geekard@qq.com")
                     (user-full-name               . "张俊(Jun Zhang)")
                     (smtpmail-default-smtp-server . "smtp.qq.com")
                     (smtpmail-smtp-server         . "smtp.qq.com")
                     (smtpmail-smtp-user           . "geekard@qq.com")
                     (smtpmail-smtp-service        . 465)
                     (smtpmail-stream-type         . ssl)
                     (mu4e-compose-signature       . (concat "---\n Zhang Jun \n"))
                     (mu4e-sent-folder      . "/qq/Sent")
                     (mu4e-drafts-folder    . "/qq/Drafts")
                     (mu4e-trash-folder     . "/qq/Trash")
                     (mu4e-refile-folder    . "/qq/Archive")
                     )))))
;; 为 message 添加 Tag
(with-eval-after-load 'mu4e
  (add-to-list 'mu4e-marks
               '(tag
                 :char       "g"
                 :prompt     "gtag"
                 :ask-target (lambda () (read-string "Add Tag: "))
                 :action      (lambda (docid msg target)
                                (mu4e-action-retag-message msg (concat "+" target)))))
  (mu4e~headers-defun-mark-for tag)
  (define-key mu4e-headers-mode-map (kbd "g") 'mu4e-headers-mark-for-tag)

  ;; 在 Dired 中标记文件, 然后 C-c RET C-a 来发送附件
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

  ;; 发送前确认
  (add-hook 'message-send-hook
            (lambda ()
              (unless (yes-or-no-p "Sure you want to send this?")
                (signal 'quit nil))))

  ;; 先选择邮件, 然后按 r, 自动 refile 到对应目录
  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ;; messages to the mu mailing list go to the /mu folder
           ((mu4e-message-contact-field-matches msg :to "mu-discuss@googlegroups.com") "/mu")
           ;; messages sent directly to some spefic address me go to /private
           ((mu4e-message-contact-field-matches msg :to "me@example.com") "/private")
           ;; messages with football or soccer in the subject go to /football
           ((string-match "football\\|soccer" (mu4e-message-field msg :subject)) "/football")
           ;; messages sent by me go to the sent folder
           ((mu4e-message-sent-by-me msg (mu4e-personal-addresses)) mu4e-sent-folder)
           ;; everything else goes to /archive
           ;; important to have a catch-all at the end!
           (t  "/archive")))))
#+end_src
+ mu4e 的使用详情参考在线 Info 手册 [[info:mu4e#Top][mu4e#Top]]。

mu4e 默认使用 gnus 发送 SMTP 邮件, 而 gnus 从 =~/.authinfo.gpg= 读取 SMTP 服务器的帐号信息:

#+begin_src txt :tangle no
machine smtp.qq.com login geekard@qq.com password {QQ 授权码}
machine smtp.gmail.com login geekard@gmail.com password {Gmail 密码}
#+end_src

使用 mu4e-alert 和 notifier(通过 terminal-notifier 程序) 进行桌面通知:
#+begin_src emacs-lisp
(use-package mu4e-alert
  :disabled
  :after mu4e
  :config
  (mu4e-alert-set-default-style 'notifier)
  ;; (mu4e-alert-set-default-style 'growl)
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  ;; enable mode line display
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
  (setq mu4e-alert-email-notification-types '(count)))
#+end_src

使用 mu4e-maildirs-extension 在 mu4e-main-view 展示 Maildirs 概览。
#+begin_src emacs-lisp
(use-package mu4e-maildirs-extension
  :after mu4e
  :config
  (mu4e-maildirs-extension))
#+end_src

mu4e-views 使用 xwdigets 来显示 html 格式邮件：
#+begin_src emacs-lisp
(use-package mu4e-views
  :after mu4e
  :bind (:map mu4e-headers-mode-map
              ("v" . mu4e-views-mu4e-select-view-msg-method) ;; 切换展示类型
              ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
              ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
              ("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
              ("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
              )
  :config
  (setq mu4e-views-completion-method 'default) ;; use ivy for completion
  (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window) ;; when pressing n and p stay in the current window
  (setq mu4e-views-auto-view-selected-message t)) ;; automatically open messages when moving in the headers view
#+end_src
+ 测试 Emacs 是否支持 xwdigets: (xwidget-webkit-browse-url "https://www.gnu.org/");
+ 在 mu4e-header 中使用 v 来切换邮件显示方式;

** org-mime
org-mime 使用 org-mode 来编辑和发送 html 格式邮件：
#+begin_src emacs-lisp
(use-package org-mime
  :after mu4e
  :config
  (setq org-mime-export-options '(:section-numbers nil :with-author nil :with-toc nil))
  ;; Prompt for confirmation if message has no HTML
  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart))
#+end_src

使用方法：
+ M-x org-mime-htmlize
+ M-x org-mime-edit-mail-in-org-mode
+ M-x org-mime-revert-to-plain-text-mail
* pdf

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure-system-package
  ((pdfinfo . poppler)
   (automake . automake)
   (mutool . mupdf)
   ("/usr/local/opt/zlib" . zlib))
  :init
  ;; 使用 scaling 确保中文字体不模糊
  (setq pdf-view-use-scaling t)
  (setq pdf-view-use-imagemagick nil)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-resize-factor 1.1)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  :hook
  ((pdf-view-mode . pdf-view-themed-minor-mode)
   (pdf-view-mode . pdf-view-auto-slice-minor-mode)
   (pdf-view-mode . pdf-isearch-minor-mode))
  :config
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (setenv "PKG_CONFIG_PATH" "/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/pkgconfig:/usr/local/lib/pkgconfig")
  (pdf-tools-install))

;; pdf 转为 png 时使用更高分辨率（默认 90）。
(setq doc-view-resolution 144)

(use-package org-noter)
#+end_src

+ pdf-tools 默认是白底黑字，可以：
  + 深色模式： =M-x pdf-view-midnight-minor-mode=
  + 主题模式： =M-x pdf-view-themed-minor-mode=
+ 搜索中文时，需要使用系统中文输入法和 isearch 模式, 或者使用 =M-s o(occur)= ；phi-search 与 pdf-tools 不兼容；
* twitter

#+begin_src emacs-lisp
(use-package twittering-mode
  :commands (twit)
  :init
  ;; 解决报错 "epa--decode-coding-string not defined"
  (defalias 'epa--decode-coding-string 'decode-coding-string)
  (setq twittering-icon-mode t)
  (setq twittering-use-icon-storage t)
  ;; 解决内置的 twitter 根证书失效的问题。
  (setq twittering-allow-insecure-server-cert t)
  (setq twittering-use-master-password t))
#+end_src
+ 默认将 OAuth Token 加密保存到 =~/.twittering-mode.gpg=, 第一次需要输入两次相同的加密密码。


#+begin_src emacs-lisp
;; 未选中窗口。
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;; 高亮粘贴的内容。
(use-package volatile-highlights
  :after(undo-tree)
  :config
  (volatile-highlights-mode t)
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree))

#+end_src

* theme

#+begin_src emacs-lisp
;; 高对比度主题。
(use-package modus-themes
  :demand
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-region '(accented no-extend)
        modus-themes-hl-line '(underline accented)
        modus-themes-paren-match '(intense)
        modus-themes-links '(neutral-underline background)
        modus-themes-box-buttons '(variable-pitch flat faint 0.9)
        modus-themes-prompts '(intense bold)
        modus-themes-syntax '(alt-syntax)
        modus-themes-mixed-fonts t
        modus-themes-mode-line-padding 6
        ;; 不能设置为 'deuteranopia，否则 orgmode heading 显示的字体不对。
        ;;modus-themes-diffs 'deuteranopia
        modus-themes-org-blocks 'gray-background ;; 'tinted-background
        modus-themes-variable-pitch-ui t
        modus-themes-headings '((t . (variable-pitch background overline rainbow semibold)))
        )
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  (modus-themes-load-operandi) ;; 浅色主题
  ;;(modus-themes-load-vivendi)  ;; 深色主题
  )

;; 预览主题: https://emacsthemes.com/
(use-package doom-themes
  :demand
  ;; 添加 "extensions/*" 后才支持 visual-bell/treemacs/org 配置。
  :straight (:files ("*.el" "themes/*" "extensions/*"))
  :custom-face
  (doom-modeline-buffer-file ((t (:inherit (mode-line bold)))))
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  (doom-themes-treemacs-theme "doom-colors")
  ;; modeline 两边各加 4px 空白。
  (doom-themes-padded-modeline t)
  :config
  (doom-themes-visual-bell-config)
  ;; 为 treemacs 关闭 variable-pitch 模式，否则显示的较丑！
  ;; 必须在执行 doom-themes-treemacs-config 前设置该变量为 nil, 否则不生效。
  (setq doom-themes-treemacs-enable-variable-pitch nil)
  (doom-themes-treemacs-config)
  (doom-themes-org-config))

;; 跟随 Mac 自动切换深浅主题。
(defun my/load-light-theme () (interactive) (load-theme 'doom-zenburn t))
(defun my/load-dark-theme () (interactive) (load-theme 'doom-zenburn t))
(add-hook 'ns-system-appearance-change-functions
          (lambda (appearance)
            (pcase appearance
              ('light (my/load-light-theme))
              ('dark (my/load-dark-theme)))))

(use-package centaur-tabs
  :hook (emacs-startup . centaur-tabs-mode)
  :init
  (setq centaur-tabs-set-icons t)
  (setq centaur-tabs-height 25)
  (setq centaur-tabs-gray-out-icons 'buffer)
  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-cycle-scope 'tabs)
  (setq centaur-tabs-enable-ido-completion nil)
  (setq centaur-tabs-set-bar 'under)
  (setq x-underline-at-descent-line t)
  (setq centaur-tabs-show-navigation-buttons t)
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (centaur-tabs-mode t)
  (centaur-tabs-headline-match)
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-group-by-projectile-project)
  (defun centaur-tabs-hide-tab (x)
    (let ((name (format "%s" x)))
      (or
       (window-dedicated-p (selected-window))
       ;; 不显示以 * 开头的 buffer 。
       (string-prefix-p "*" name)
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name)))))))
#+end_src

** vertico
#+begin_src emacs-lisp
(use-package vertico
  :demand
  :straight (:repo "minad/vertico" :files ("*" "extensions/*.el" (:exclude ".git")))
  :bind
  (:map vertico-map
        ;; 在多个 source 中切换(如 consult-buffer, consult-grep) 。
        ("C-M-n" . vertico-next-group)
        ("C-M-p" . vertico-previous-group)
        ;; 快速插入。
        ("M-i" . vertico-quick-insert)
        ("M-e" . vertico-quick-exit)
        ;; 切换显示风格。
        ("M-V" . vertico-multiform-vertical)
        ("M-G" . vertico-multiform-grid)
        ("M-F" . vertico-multiform-flat)
        ("M-R" . vertico-multiform-reverse)
        ("M-U" . vertico-multiform-unobtrusive)
        ;; 文件路径操作。
        ("<backspace>" . vertico-directory-delete-char)
        ("C-w" . vertico-directory-delete-word)
        ("C-<backspace>" . vertico-directory-delete-word)
        ("RET" . vertico-directory-enter))
#+end_src

* font
#+begin_src emacs-lisp
;; 参考: https://github.com/DogLooksGood/dogEmacs/blob/master/elisp/init-font.el
;; 缺省字体。
(setq +font-family "Fira Code Retina")
(setq +modeline-font-family "Fira Code Retina")
;; org-table 使用 fixed-pitch 字体, Sarasa Term SC 可以让对齐效果更好。
(setq +fixed-pitch-family "Sarasa Term SC")
(setq +variable-pitch-family "LXGW WenKai Screen")
(setq +font-unicode-family "LXGW WenKai Screen")
(setq +font-size-list '(10 11 12 13 14 15 16 17 18))
(setq +font-size 14)

;; 设置缺省字体。
(defun +load-base-font ()
  ;; 为缺省字体设置 size, 其它字体都是通过 :height 进行动态伸缩。
  (let* ((font-spec (format "%s-%d" +font-family +font-size)))
    (set-frame-parameter nil 'font font-spec)
    (add-to-list 'default-frame-alist `(font . ,font-spec))))

;; 设置各特定 face 的字体。
(defun +load-face-font (&optional frame)
  (let ((font-spec (format "%s" +font-family))
        (line-font-spec (format "%s" +modeline-font-family))
        (variable-pitch-font-spec (format "%s" +variable-pitch-family))
        (fixed-pitch-font-spec (format "%s" +fixed-pitch-family)))
    (set-face-attribute 'variable-pitch frame :font variable-pitch-font-spec :height 1.2)
    (set-face-attribute 'fixed-pitch frame :font fixed-pitch-font-spec :height 1.0)
    (set-face-attribute 'fixed-pitch-serif frame :font fixed-pitch-font-spec :height 1.0)
    (set-face-attribute 'tab-bar frame :font font-spec :height 1.0)
    (set-face-attribute 'mode-line frame :font line-font-spec :height 1.0)
    (set-face-attribute 'mode-line-inactive frame :font line-font-spec :height 1.0)))

;; 设置中文字体。
(defun +load-ext-font ()
  (when window-system
    (let ((font (frame-parameter nil 'font))
          (font-spec (font-spec :family +font-unicode-family)))
      (dolist (charset '(kana han hangul cjk-misc bopomofo symbol))
        (set-fontset-font font charset font-spec)))))

;; 设置 emobji 字体。
(defun +load-emoji-font ()
  (when window-system
      (setq use-default-font-for-symbols nil)
      (set-fontset-font t '(#x1f000 . #x1faff) (font-spec :family "Apple Color Emoji"))
      (set-fontset-font t 'symbol (font-spec :family "Symbola"))))

(defun +load-font ()
  (+load-base-font)
  (+load-face-font)
  (+load-ext-font)
  (+load-emoji-font))

(+load-font)
(add-hook 'after-make-frame-functions 
          ( lambda (f) 
            (+load-face-font f)
            (+load-ext-font)
            (+load-emoji-font)))

;; 只为 org-mode 和 markdown-mode 开启 variable-pitch-mode 。
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'markdown-mode-hook 'variable-pitch-mode)

(defun +larger-font ()
  (interactive)
  (if-let ((size (--find (> it +font-size) +font-size-list)))
      (progn (setq +font-size size)
             (+load-font)
             (message "Font size: %s" +font-size))
    (message "Using largest font")))

(defun +smaller-font ()
  (interactive)
  (if-let ((size (--find (< it +font-size) (reverse +font-size-list))))
      (progn (setq +font-size size)
             (message "Font size: %s" +font-size)
             (+load-font))
    (message "Using smallest font")))

(global-set-key (kbd "M-+") #'+larger-font)
(global-set-key (kbd "M--") #'+smaller-font)

(defun +use-fixed-pitch ()
  (interactive)
  (setq buffer-face-mode-face `(:family ,+fixed-pitch-family))
  (buffer-face-mode +1))

;; fire-code-mode 只能在 GUI 模式下使用。
(when (display-graphic-p)
  (use-package fira-code-mode
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
    :hook prog-mode))

;; 使用字体缓存，避免卡顿。
(setq inhibit-compacting-font-caches t)
  #+end_src

* go
#+begin_src emacs-lisp
(use-package flycheck-golangci-lint
  :ensure-system-package
  (golangci-lint)
  :after flycheck
  :defines flycheck-disabled-checkers
  :hook (go-mode . (lambda ()
                     "Enable golangci-lint."
                     (setq flycheck-disabled-checkers '(go-gofmt
                                                        go-golint
                                                        go-vet
                                                        go-build
                                                        go-test
                                                        go-staticcheck
                                                        go-errcheck))
                     (flycheck-golangci-lint-setup))))
#+end_src

* face
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer :init (all-the-icons-ibuffer-mode 1))
(use-package all-the-icons-completion
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

;; 选择 buffer: b, 选择 project: p, 选择文件：f 。
(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :bind
  ("C-x p p" . consult-projectile))

(use-package consult-dir
  :bind
  (("C-x C-d" . consult-dir)
   :map minibuffer-local-completion-map
   ("C-x C-d" . consult-dir)
   ("C-x C-j" . consult-dir-jump-file)))


#+end_src

** kind-icon

#+begin_src emacs-lisp
(use-package kind-icon
  :straight '(kind-icon :host github :repo "jdtsmith/kind-icon")
  :after corfu
  :demand
  :custom
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src


** marginalia

#+begin_src  emacs-lisp
(use-package marginalia
  :init
  ;; 显示绝对时间。
  (setq marginalia-max-relative-age 0)
  (marginalia-mode)
  ;;:config
  ;; 不给 file 加注释，防止 TRAMP 变慢。
  ;; (setq marginalia-annotator-registry
  ;;       (assq-delete-all 'file marginalia-annotator-registry))
  ;; (setq marginalia-annotator-registry
  ;;       (assq-delete-all 'project-file marginalia-annotator-registry))
  )
#+end_src

** cape

Cape 为 Corfu 提供多种类型的 Completion At Point 扩展。
#+begin_src emacs-lisp
(use-package cape
  :demand
  :straight '(cape :host github :repo "minad/cape")
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; Complete word from current buffers
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; Complete Elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; Complete abbreviation
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; Complete word from dictionary file
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;; Complete entire line from file
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  :config
  (setq cape-dabbrev-min-length 3)
  ;; 前缀长度达到 3 时才调用 CAPF，避免频繁调用自动补全。
  (cape-wrap-prefix-length #'cape-dabbrev 3))
#+end_src

** easy-kill

#+begin_src emacs-lisp
(use-package easy-kill-extras
  :demand
  :bind
  (([remap kill-ring-save] . easy-kill) ;; M-w
   ([remap mark-sexp] . easy-mark-sexp) ;; C-M-SPC
   ([remap mark-word] . easy-mark-word) ;; M-@
   ;; 集成 zap-to-char.
   ([remap zap-to-char] . easy-mark-to-char)
   ([remap zap-up-to-char] . easy-mark-up-to-char))
  :init
  (setq kill-ring-max 200
        ;; 替换前先保存剪贴板内容。
        save-interprogram-paste-before-kill t
        easy-kill-alist '((?w word           " ")
                          (?s sexp           "\n")
                          (?l list           "\n")
                          (?d defun          "\n\n")
                          (?D defun-name     " ")
                          (?e line           "\n")
                          (?b buffer-file-name)

                          (?^ backward-line-edge "")
                          (?$ forward-line-edge "")
                          (?h buffer "")
                          (?< buffer-before-point "")
                          (?> buffer-after-point "")
                          (?f string-to-char-forward "")
                          (?F string-up-to-char-forward "")
                          (?t string-to-char-backward "")
                          (?T string-up-to-char-backward "")

                          (?W  WORD " ") ;; 非空白字符序列。
                          (?\' squoted-string "")
                          (?\" dquoted-string "")
                          (?\` bquoted-string "")
                          (?q  quoted-string "") ;; 任何字符串类型
                          (?Q  quoted-string-universal "")
                          (?\) parentheses-pair-content "\n")
                          (?\( parentheses-pair "\n")
                          (?\] brackets-pair-content "\n")
                          (?\[ brackets-pair "\n")
                          (?}  curlies-pair-content "\n")
                          (?{  curlies-pair "\n")
                          (?>  angles-pair-content "\n")
                          (?<  angles-pair "\n")))
:config
;; 加载 extra-things 后, 上面 WORD 开始的 alist 才生效。
(require 'extra-things))
#+end_src
M-w 是前缀，默认选择当前行，使用 easy-kill-alist 中的快捷键可以用其它选择方式，然后用下面的键来修改选择的内容：
+ @: 将选择区域添加到前一次的 kill, 如 M-w d @;
+ C-w: 剪切选择；
+ +, - and 1..9: 扩大或缩小选择；
+ 0: 将选择缩小到初始大小；
+ SPC: 根据 easy-kill-alist 中循环操作；
+ C-SPC: 将选择转为 active region;
+ C-g: 终止；
+ ?: 帮助；


** lsp
#+begin_src emacs-lisp

  ;; https://github.com/minad/corfu/wiki
  (defun my/orderless-dispatch-flex-first (_pattern index _total)
  (and (eq index 0) 'orderless-flex))
  ;; Optionally configure the first word as flex filtered.
  (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)

  ;; Optionally configure the cape-capf-buster.
  (setq-local completion-at-point-functions (list (cape-capf-buster #'lsp-completion-at-point)))
#+end_src
