* programming
** prettier

保存文件时自动格式化, 支持 html/java/js/js2/typescript/json/yaml/python/sh 等语言, 详情参考变量
prettier-major-mode-parsers:
#+begin_src emacs-lisp
(use-package prettier
  ;; TRAMP 支持的有问题, 故关闭。
  :disabled
  :ensure-system-package (prettier . "npm -g install prettier")
  :diminish
  :hook (prog-mode . prettier-mode)
  :init (setq prettier-mode-sync-config-flag nil))
#+end_src

** java

默认将 lsp java server 安装到 ~/.emacs.d/.cache/lsp/eclipse.jdt.ls 目录。

手动安装 lombok:
#+begin_src shell :results none
mvn dependency:get -DrepoUrl=http://download.java.net/maven/2/ -DgroupId=org.projectlombok -DartifactId=lombok -Dversion=1.18.6
#+end_src

#+begin_src emacs-lisp
(use-package lsp-java
  :disabled
  :after (lsp-mode)
  :init
  ;; 指定运行 jdtls 的 java 程序
  (setq lsp-java-java-path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
  ;; 指定 jdtls 编译源码使用的 jdk 版本（默认是启动 jdtls 的 java 版本）。
  ;; https://marketplace.visualstudio.com/items?itemName=redhat.java
  ;; 查看所有 java 版本：/usr/libexec/java_home -verbose
  (setq lsp-java-configuration-runtimes
        '[(:name "Java SE 8" :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home" :default t)
          (:name "Java SE 11.0.9" :path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
          (:name "Java SE 15.0.1" :path "/Library/Java/JavaVirtualMachines/jdk-15.0.1.jdk/Contents/Home")])
  ;; jdk11 不支持 -Xbootclasspath/a: 参数。
  (setq lsp-java-vmargs
        (list "-noverify" "-Xmx2G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"
              (concat "-javaagent:" (expand-file-name "~/.m2/repository/org/projectlombok/lombok/1.18.6/lombok-1.18.6.jar"))))
  :hook (java-mode . lsp)
  :config
  (use-package dap-java :disabled t))
#+end_src

** other

符号高亮和跳转, 已被 ctrlf 替代：
#+begin_src emacs-lisp
(use-package symbol-overlay
  :diminish
  :functions
  (turn-off-symbol-overlay turn-on-symbol-overlay)
  :custom-face
  (symbol-overlay-default-face ((t (:inherit (region bold)))))
  :bind
  (("M-i" . symbol-overlay-put)
   ("M-n" . symbol-overlay-jump-next)
   ("M-p" . symbol-overlay-jump-prev)
   ("M-N" . symbol-overlay-switch-forward)
   ("M-P" . symbol-overlay-switch-backward)
   ("M-C" . symbol-overlay-remove-all)
   ([M-f3] . symbol-overlay-remove-all))
  :hook
  (((prog-mode yaml-mode) . symbol-overlay-mode)
   (iedit-mode . turn-off-symbol-overlay)
   (iedit-mode-end . turn-on-symbol-overlay))
  :init
  (setq symbol-overlay-idle-time 0.1)
  :config
  ;; Disable symbol highlighting while selecting
  (defun turn-off-symbol-overlay (&rest _)
    "Turn off symbol highlighting."
    (interactive)
    (symbol-overlay-mode -1))
  (advice-add #'set-mark :after #'turn-off-symbol-overlay)

  (defun turn-on-symbol-overlay (&rest _)
    "Turn on symbol highlighting."
    (interactive)
    (when (derived-mode-p 'prog-mode 'yaml-mode)
      (symbol-overlay-mode 1)))
  (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay))
#+end_src

离线查询 devdocs 文档（已被 dash 替代）:
#+begin_src emacs-lisp
(use-package devdocs
  :bind ("C-c b" . devdocs-lookup)
  :config
  (add-to-list 'completion-category-defaults '(devdocs (styles . (flex))))
  (add-hook 'python-mode-hook (lambda () (setq-local devdocs-current-docs '("python~3.9"))))
  (add-hook 'go-mode-hook (lambda () (setq-local devdocs-current-docs '("go")))))
#+end_src
+ 安装文档: M-x devdocs-install
+ 更新当前使用的文档目录: C-u M-x dovdocs-lookup

#+begin_src emacs-lisp :tangle no
(setq rime-show-candidate 'posfram)
(setq rime-posframe-properties (list :font "Sarasa SC Gothic" :internal-border-width 2))

;; 有了更好的 ctrlf 替换
;; 直接在 minibuffer 中编辑 query(RIME 探测到 minibuffer 时自动关闭输入法)
(use-package isearch-mb
  :demand t
  :config
  (setq-default
   ;;启动 isearch 进行搜索时，M-<, M->, C-v 和 M-v 这些按键不会打断搜索
   isearch-allow-motion t
   ;; Match count next to the minibuffer prompt
   isearch-lazy-count t
   ;; Don't be stingy with history; default is to keep just 16 entries
   search-ring-max 200
   regexp-search-ring-max 200)

  ;; 习惯使用 regexp 类型的 isearch
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  (add-to-list 'isearch-mb--with-buffer #'consult-isearch)
  (define-key isearch-mb-minibuffer-map (kbd "M-r") #'consult-isearch)

  (add-to-list 'isearch-mb--after-exit #'consult-line)
  (define-key isearch-mb-minibuffer-map (kbd "M-s l") 'consult-line)
  (isearch-mb-mode t))


(use-package visual-regexp
  :config
  (setq vr/match-separator-use-custom-face t)
  (setq vr/match-separator-string "⇛")
  (define-key global-map (kbd "C-c r") 'vr/replace)
  (define-key global-map (kbd "C-c q") 'vr/query-replace))

;; diff 时显示空白字符。
(defun my/diff-spaces ()
  (setq-local whitespace-style
              '(face
                tabs
                tab-mark
                spaces
                space-mark
                trailing
                indentation::space
                indentation::tab
                newline
                newline-mark))
  (whitespace-mode 1))
 (add-hook 'diff-mode-hook 'my/diff-spaces)

;; diff-hl 会导致 buffer 内容错乱
(use-package diff-hl
  :disabled
  :after (magit)
  :config
  (setq diff-hl-disable-on-remote t)
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode 1)
  (diff-hl-show-hunk-mouse-mode 1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )

;; 中文不加空格使用行内格式, 如强调。（export pdf 时还是需要加空格)
;; 由于分词不准确，故不再使用
(setq org-emphasis-regexp-components
       '("-[:multibyte:][:space:]('\"{"
         "-[:multibyte:][:space:].,:!?;'\")}\\["
         "[:space:]"
         "[^=~*_]"
         1))
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
(org-element-update-syntax)


;; 对于远程目录文件直接返回 nil（使用 default-directory)，防止 TRAMP 卡主。
;; -- 更好的解决办法是在 projectile 中集中修改 projectile-project-root 的实现, 如果时远程 project, 直接返回 default-directory
;; (setq consult-project-root-function
;;       (lambda ()
;;         (unless (file-remote-p default-directory)
;;           ;; 使用 projectile.el:
;;           (projectile-project-root)
;;           ;; 使用 project.el：
;;           ;;(when-let (project (project-current))
;;           ;; (car (project-roots project)))
;;           )))

;; 指针宽度与字符一致
(setq-default x-stretch-cursor t)

;; 智能扩展区域，被 easy-kill/mark 取代
(use-package expand-region
  :demand
  :bind
  ("M-@" . er/expand-region))

(use-package manage-minor-mode
  :straight (manage-minor-mode :host github :repo "emacsorphanage/manage-minor-mode")
  :config
  (setq manage-minor-mode-bals-exclude-list
        '((global (recentf-mode global-font-lock-mode delete-selection-mode transient-mark-mode vertico-mode consult-mode))
          (text-mode (line-number-mode))
          (json-mode (tree-sitter-mode ts-fold-mode))
          (javascript-mode (tree-sitter-mode ts-fold-mode))
          (org-mode (line-number-mode blink-cursor-mode)))))

(defvar hidden-minor-modes '(whitespace-mode))

(use-package posframe-project-term
  :straight (posframe-project-term :host github :repo "zwpaper/posframe-project-term")
  :bind
  (("C-c t" . posframe-project-term-toggle)))

;; 还是 go-translate 提供的 bing 翻译较为准确
(use-package youdao-dictionary
  :bind
  (("C-c y" . youdao-dictionary-search-at-point))
  :init
  (setq url-automatic-caching t)
  (setq youdao-dictionary-use-chinese-word-segmentation t)
  :config
  ;; 使用 jieba 进行中文分词: pip install jieba
  (use-package chinese-word-at-point :demand t))

(use-package posframe :demand)
(use-package vertico-posframe
  :straight (vertico-posframe :host github :repo "tumashu/vertico-posframe")
  :disabled
  :config
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)
          ;;(alpha . 80)
          ))
  ;; 在光标位置的上方显示 posframe, 避免遮住光标下方的内容
  (defun my/posframe-poshandler-p0.5p0-to-f0.5p1 (info)
    (let ((x (car (posframe-poshandler-p0.5p0-to-f0.5f0 info)))
          ;; 第三个参数 t 表示 upward
          (y (cdr (posframe-poshandler-point-1 info nil t))))
      (cons x y)))
  (setq vertico-posframe-poshandler 'my/posframe-poshandler-p0.5p0-to-f0.5p1)
  (vertico-posframe-mode 1))

;; no-littering 会导致 recentf 等不工作, 故关闭.
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

(use-package grammatical-edit
  :demand
  :straight (grammatical-edit :host github :repo "manateelazycat/grammatical-edit")
  :config
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'minibuffer-inactive-mode-hook
                 ))
    (add-hook hook '(lambda () (grammatical-edit-mode 1))))
  (define-key grammatical-edit-mode-map (kbd "(") 'grammatical-edit-open-round)
  (define-key grammatical-edit-mode-map (kbd "[") 'grammatical-edit-open-bracket)
  (define-key grammatical-edit-mode-map (kbd "{") 'grammatical-edit-open-curly)
  (define-key grammatical-edit-mode-map (kbd ")") 'grammatical-edit-close-round)
  (define-key grammatical-edit-mode-map (kbd "]") 'grammatical-edit-close-bracket)
  (define-key grammatical-edit-mode-map (kbd "}") 'grammatical-edit-close-curly)
  (define-key grammatical-edit-mode-map (kbd "=") 'grammatical-edit-equal)

  (define-key grammatical-edit-mode-map (kbd "%") 'grammatical-edit-match-paren)
  (define-key grammatical-edit-mode-map (kbd "\"") 'grammatical-edit-double-quote)

  (define-key grammatical-edit-mode-map (kbd "SPC") 'grammatical-edit-space)
  (define-key grammatical-edit-mode-map (kbd "RET") 'grammatical-edit-newline)

  (define-key grammatical-edit-mode-map (kbd "M-o") 'grammatical-edit-backward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-d") 'grammatical-edit-forward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-k") 'grammatical-edit-kill)

  (define-key grammatical-edit-mode-map (kbd "M-\"") 'grammatical-edit-wrap-double-quote)
  (define-key grammatical-edit-mode-map (kbd "M-[") 'grammatical-edit-wrap-bracket)
  (define-key grammatical-edit-mode-map (kbd "M-{") 'grammatical-edit-wrap-curly)
  (define-key grammatical-edit-mode-map (kbd "M-(") 'grammatical-edit-wrap-round)
  (define-key grammatical-edit-mode-map (kbd "M-)") 'grammatical-edit-unwrap)

  (define-key grammatical-edit-mode-map (kbd "M-p") 'grammatical-edit-jump-right)
  (define-key grammatical-edit-mode-map (kbd "M-n") 'grammatical-edit-jump-left)
  (define-key grammatical-edit-mode-map (kbd "M-:") 'grammatical-edit-jump-out-pair-and-newline)
  )

#+end_src

书签管理器:
#+begin_src emacs-lisp
(use-package ebuku
  :ensure-system-package (buku . "pip3 install buku")
  :config
  ;; 不限制结果
  (setq ebuku-results-limit 0))
#+end_src
+ =buku --ai= 导入 Firefox/Chrome 书签;
+ =M-x ebuku= : 浏览和编辑导入的书签, 点击 URL 使用 Mac 浏览器打开。

#+begin_src emacs-lisp :tangle no
(use-package shackle
  :demand
  :config
  (setq shackle-default-size 0.3)
  (setq shackle-default-alignment 'below)
  (setq shackle-default-rule nil)
  (setq shackle-select-reused-windows t)
  (setq shackle-rules
        '((("*Warnings*" "*Messages*" "*Completions*" "*Alerts*") :size 0.3 :align 'below :autoclose t)
          (compilation-mode :select t :size 0.3 :align 'below :autoclose t)
          ("*quickrun*" :select t :size 15 :align 'below :autoclose t)
          ("*Backtrace*" :select t :size 15 :align 'below :autoclose t)
          (("*Help*" "*Apropos*" "*Occur*") :select t :size 0.3 :align 'below :autoclose t)
          (helpful-mode :select t :size 0.5 :popup t :align 'below :autoclose t)
          ("^\\*.*Shell Command.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
          (" *Flycheck checkers*" :select t :size 0.3 :align 'below :autoclose t)
          ((flycheck-error-list-mode flymake-diagnostics-buffer-mode) :select t :size 0.25 :align 'below :autoclose t)
          (("*lsp-help*" "*lsp session*" "*LSP Error List*") :size 0.3 :align 'below :autoclose t)
          ("*DAP Templates*" :select t :size 0.4 :align 'below :autoclose t)
          (dap-server-log-mode :size 15 :align 'below :autoclose t)
          (profiler-report-mode :select t :size 0.5 :align 'below)
          ("*ELP Profiling Restuls*" :select t :size 0.5 :align 'below)
          (("*Gofmt Errors*" "*Go Test*") :select t :size 0.3 :align 'below :autoclose t)
          (godoc-mode :select t :size 0.4 :align 'below :autoclose t)
          ((grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode) :select t :size 0.4 :align 'below)
          (hover-mode :select t :size 0.2 :align 'below :autoclose t)
          (vterm-mode :select t :size 0.7 :align 'below)
          (vc-annotate-mode :select t :size 0.8 :align 'below :autoclose t)
          (special-mode :select t :size 0.5 :align 'below :autoclose t)
          (git-log-view-mode :select t :size 0.5 :align 'below :autoclose t)
          ("*tldr*" :size 0.4 :align 'below :autoclose t)
          ("*Finder*" :select t :size 0.3 :align 'below :autoclose t)
          ("^\\*elfeed-entry" :regexp t :size 0.7 :align 'below :autoclose t)
          (" *Install vterm* " :size 0.35 :same t :align 'below)
          ((youdao-dictionary-mode osx-dictionary-mode fanyi-mode) :select t :size 0.5 :align 'below :autoclose t)
          ("*Calendar*" :select t :size 0.3 :align 'below)
          (" *undo-tree*" :select t)
          (("*Org Agenda*" " *Agenda Commands*" " *Org todo*" "*Org Dashboard*" "*Org Select*") :select t :size 0.1 :align 'below :autoclose t)
          (("\\*Capture\\*" "^CAPTURE-.*\\.org*") :regexp t :select t :size 0.3 :align 'below :autoclose t)
          (Buffer-menu-mode :select t :size 0.5 :align 'below :autoclose t)
          ((process-menu-mode list-environment-mode) :select t :size 0.3 :align 'below)
          (bookmark-bmenu-mode :select t :size 0.4 :align 'below)
          (tabulated-list-mode :size 0.4 :autoclose t)
          ((inferior-python-mode inf-ruby-mode swift-repl-mode) :size 0.4 :align 'below)
          ("*prolog*" :size 0.4 :align 'below)))
  (shackle-mode t))

;; 高亮当前行。由于容易与候选者背景混淆, 所以不开启。
(global-hl-line-mode t)

(use-package company
  :bind
  (:map company-mode-map
        ([remap completion-at-point] . company-complete)
        :map company-active-map
        ([escape] . company-abort)
        ("C-p"     . company-select-previous)
        ("C-n"     . company-select-next)
        ("C-s"     . company-filter-candidates)
        ([tab]     . company-complete-common-or-cycle)
        ([backtab] . company-select-previous-or-abort)
        :map company-search-map
        ([escape] . company-search-abort)
        ("C-p"    . company-select-previous)
        ("C-n"    . company-select-next))
  :custom
  ;; trigger completion immediately.
  (company-idle-delay 0)
  (company-echo-delay 0)
  ;; allow input string that do not match candidate words
  ;; 开启后有大量不匹配的候选情况，故关闭
  ;;(company-require-match nil)
  ;; number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  ;; pop up a completion menu by tapping a character
  (company-minimum-prefix-length 1)
  (company-tooltip-limit 14)
  (company-tooltip-align-annotations t)
  ;; Only search the current buffer for `company-dabbrev' (a backend that
  ;; suggests text your open buffers). This prevents Company from causing
  ;; lag once you have a lot of buffers open.
  (company-dabbrev-other-buffers nil)
  ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
  ;; domain-specific words with particular casing.
  (company-dabbrev-ignore-case nil)
  ;; Don't downcase the returned candidates.
  (company-dabbrev-downcase nil)
  ;; 候选框宽度
  (company-tooltip-minimum-width 70)
  (company-tooltip-maximum-width 100)
  (company-global-modes '(not message-mode help-mode eshell-mode))
  ;; 补全后端
  (company-backends '(company-capf
                      (company-dabbrev-code company-keywords company-files)
                      company-dabbrev))
  :config
  ;; 高亮候选者（orderless 排序）。
  (defun just-one-face (fn &rest args)
    (let ((orderless-match-faces [completions-common-part]))
      (apply fn args)))
  (advice-add 'company-capf--candidates :around #'just-one-face)
  (global-company-mode t))

(use-package company-emoji
  :demand t
  :after (company)
  :config
  (company-emoji-init)
  (add-to-list 'company-backends 'company-emoji))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (use-package restclient-test :diminish :hook (restclient-mode . restclient-test-mode))

  (with-eval-after-load 'company
    (use-package company-restclient
      :defines company-backends
      :init (add-to-list 'company-backends 'company-restclient))))

(use-package company-ansible
  :after (ansible)
  :config
  (add-hook 'ansible-hook (lambda() (add-to-list 'company-backends 'company-ansible))))
#+end_src

project 配置参考：
1. [[https://github.com/jiacai2050/dotfiles/blob/master/.config/emacs/i-basic.el][jiacai2050/dotfiles]]
2. [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-lisp/prot-project.el][protesilaos/dotfiles]]

#+begin_src emacs-lisp :tangle no
;; 第一个 frame 规格
(setq initial-frame-alist '((top . 10 ) (left . 10) (width . 200) (height . 60)))
;; 后续 frame 规格
(setq default-frame-alist '((top . 10 ) (left . 10) (width . 200) (height . 60)))

(use-package pdf-continuous-scroll-mode
  :straight (:host github :repo  "dalanicolai/pdf-continuous-scroll-mode.el")
  :demand
  :after (pdf-tools)
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode))

(use-package find-file-in-project
  :config
  ;; ffip adds `ffap-guess-file-name-at-point' automatically and it is crazy slow on TRAMP buffers.
  ;; https://github.com/mpereira/.emacs.d/#find-file-in-project
  (remove-hook 'file-name-at-point-functions 'ffap-guess-file-name-at-point))

;;类似于 consult-grep 和 consult-find, 但前后端都异步且支持 fuzzy 搜索。
(use-package affe
  :after (orderless)
  :ensure-system-package
  ((gfind . findutils)
   (fd . fd)
   (fzf . fzf)
   (rg . ripgrep))
  :bind
  (;; bind-c bindings (mode-specific-map)
   ("M-s g" . affe-grep)
   ("M-s f" . affe-find))
  :config
  (setq affe-count 200)
  ;; Configure Orderless
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless--highlight)
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key (kbd "M-.")))

(use-package project
  :after (vterm)
  :config
  (setq project-switch-commands
    '((?f "File" project-find-file)
          (?g "Grep" project-find-regexp)
          (?d "Dired" project-dired)
          (?b "Buffer" project-switch-to-buffer)
          (?q "Query replace" project-query-replace-regexp)
          (?v "VC dir" project-vc-dir)
          (?t "Vterm" vterm)))

  (defun my/project-try-local (dir)
    "Determine if DIR is a non-Git project.
DIR must include a .project file to be considered a project."
    (catch 'ret
      ;;(dolist (flag-file '(".project" "README.org" "README.md" "Makefile" "pom.xml" "go.mod" "project.clj"))
      (dolist (flag-file '(".project" ".project."))
    (when-let ((root (locate-dominating-file dir flag-file)))
          (throw 'ret (cons 'local root))))))

  (setq project-find-functions '(my/project-try-local project-try-vc))

  (cl-defmethod project-root ((project (head local)))
    (cdr project))

  (defun my/project-info ()
    (interactive)
    (message "%s" (project-current t)))

  (defun my/project-discover ()
    (interactive)
    (dolist (search-path '("~/codes/" "~/go/src/github.com/*" "~/go/src/k8s.io/*" "~/go/src/gitlab.*/*/*"))
      (dolist (file (file-expand-wildcards search-path))
    (message "-> %s" file)
    (when (file-directory-p file)
          (when-let ((pr (project-current nil file)))
            (project-remember-project pr)
            (message "add project %s..." pr))))))

  (defun my/project-add (dir)
    (interactive "DWhich dir:")
    (let* ((project-flag-file (expand-file-name ".project." dir)))
      (if-let ((pr (project-current nil dir)))
          (if (string-equal (project-root pr) dir)
              (project-remember-project pr)
            (progn
              (make-empty-file project-flag-file)
              (project-remember-project (cons 'local dir))))
    (progn
          (make-empty-file project-flag-file)
          (project-remember-project (cons 'local dir)))))
    (message "Add project %s..." dir))

  (defun my/project-remove ()
    "Remove project from `project--list' using completion."
    (interactive)
    (project--ensure-read-project-list)
    (let* ((projects project--list)
           (dir (completing-read "REMOVE project: " projects nil t)))
      (setq project--list (delete (assoc dir projects) projects))
      (project--write-project-list)))
  )

(require 'package)
(setq package-archives '(("celpa" . "https://celpa.conao3.com/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
;; activate all the packages (in particular autoloads)
(package-initialize)
;; fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))
(setq package-native-compile t)

(setq use-package-always-ensure t
      use-package-always-demand t)
(setq use-package-verbose t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-compute-statistics t)

;; 由于编译 emacs 29 时指定了 no title-bar, 所以不再需要这个配置了
(use-package ns-auto-titlebar
  :demand t
  :config
  (when (eq system-type 'darwin)
    (ns-auto-titlebar-mode)))

;; Mac native fullscreen 会导致白屏和左右滑动问题，故使用传统全屏模式。
;; Emacs 28 开启后不能正常 max-frame 或 fullscreen
(when (eq system-type 'darwin)
  (setq ns-use-native-fullscreen nil
        ns-use-fullscreen-animation nil))

;; Make cursor movement an order of magnitude faster
;; https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
;; 会导致 buffer 部分 fontify 不准确
(setq fast-but-imprecise-scrolling 't)

(use-package origami
  :straight (origami :host github :repo "elp-revive/origami.el")
  :demand t
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

(use-package lsp-origami
  :after (lsp origami)
  :demand t
  :config
  (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable))

(use-package emmet-mode
  :after(web-mode js2-mode)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
  (setq emmet-expand-jsx-className? t)
  ;; Make `emmet-expand-yas' not conflict with yas/mode
  (setq emmet-preview-default nil))

;; flycheck
;; 在当前窗口底部显示错误列表
(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (side            . bottom)
               (reusable-frames . visible)
               (window-height   . 0.33)))

(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

(use-package mini-frame
  :disabled
  :config
  (setq x-gtk-resize-child-frames 'resize-mode)
  ;; 光标位置显示 minibuffer
  (setq mini-frame-show-parameters
        (lambda ()
          (let* ((info (posframe-poshandler-argbuilder))
                 (posn (posframe-poshandler-point-bottom-left-corner info))
                 (left (car posn))
                 (top (cdr posn)))
            `((left . ,left)
              (top . ,top)))))
  ;; 固定在 frame 顶部显式。
  ;;(custom-set-variables '(mini-frame-show-parameters '((top . 10) (width . 0.7) (left . 0.5)  (height . 10))))
  (mini-frame-mode))


(transient-mark-mode t)

(add-to-list 'default-frame-alist '(height . 600))
(add-to-list 'default-frame-alist '(width . 600))

;; That tells auth-source (the package responsible for retrieving and storing
;; passwords from the environment) to consult the keychain for your credentials
;; - instead of putting them into ~/.authinfo in plaintext
;; https://www.reddit.com/r/emacs/comments/ew75ib/comment/fg23tcj/?utm_source=share&utm_medium=web2x&context=3
(eval-after-load 'auth-source
  '(when (member window-system '(mac ns))
     (add-to-list 'auth-sources 'macos-keychain-internet)
     (add-to-list 'auth-sources 'macos-keychain-generic)))

;; buffer 智能分组（取代 ibuffer）
;; 显示 buffer 列表时会自动连接 TRAMP buffer, 可能会卡住。
(use-package bufler :config (global-set-key (kbd "C-x C-b") 'bufler))

;; 多光标编辑
(use-package iedit)

(defconst sys/macp (eq system-type 'darwin) "Are we running on a Mac system?")
(defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "Are we running under X on a Mac system?")
(defconst sys/mac-ns-p (eq window-system 'ns) "Are we running on a GNUstep or Macintosh Cocoa display?")
(defconst sys/mac-cocoa-p (featurep 'cocoa) "Are we running with Cocoa on a Mac system?")
(defconst sys/mac-port-p (eq window-system 'mac) "Are we running a macport build on a Mac system?")

;; cnfont 会自动设置 hook，开启 cnfont 的情况下，不需要配置这个 hook
(add-hook 'emacs-startup-hook #'my/faces)

;; 不能在 load-theme 时执行这个函数，否则字体缩放有问题。
;; 这个函数只被 modus-theme 在切换主题时调用。
;;(advice-add #'load-theme :after #'my/faces)

;; (add-hook 'emacs-startup-hook
;;           (lambda () (load-theme 'doom-dracula t))
;;           'append)

;; Get rid of "For information about GNU Emacs..." message at startup, unless
;; we're in a daemon session where it'll say "Starting Emacs daemon." instead,
;; which isn't so bad.
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))

;; 中英文之间自动加空格
(use-package pangu-spacing
  :config
  ;; 只是在中英文之间显示空格
  (global-pangu-spacing-mode 1)
  ;; 保存时真正插入空格
  (setq pangu-spacing-real-insert-separtor t))

(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  ;;(eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :bind
  ("s-`" . eshell-toggle))

(use-package native-complete
  :custom
  (with-eval-after-load 'shell
    (native-complete-setup-bash)))

(use-package company-native-complete
  :after (company)
  :custom
  (add-to-list 'company-backends 'company-native-complete))

(use-package persp-mode
  :custom
  (persp-keymap-prefix (kbd "C-x p"))
  :config
  (persp-mode))

(use-package treemacs-persp
  :after (treemacs persp-mode)
  :config
  (treemacs-set-scope-type 'Perspectives))

;; pyenv-mode 通过给项目设置环境变量 ~PYENV_VERSION~ 来达到指定 pyenv 环境的目的：
(use-package pyenv-mode
  ;;:after (projectile)
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  ;; (defun projectile-pyenv-mode-set ()
  ;;   (let ((project (projectile-project-name)))
  ;;     (if (member project (pyenv-mode-versions))
  ;;         (pyenv-mode-set project)
  ;;       (pyenv-mode-unset))))
  ;;(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  :bind
  ;; 防止和 org-mode 快捷键冲突
  (:map pyenv-mode-map ("C-c C-u") . nil)
  (:map pyenv-mode-map ("C-c C-s") . nil))

(use-package selectrum :init (selectrum-mode +1))
(use-package prescient  :config (prescient-persist-mode +1))
(use-package selectrum-prescient :init (selectrum-prescient-mode +1))

;;company-prescient 精准排序：
(use-package company-prescient
  :after (company prescient)
  :init (company-prescient-mode +1))


(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

;; cnfont 会自动设置字体和缩放，开启 cnfont 时不需要配置这个 hook 。而且这个只是
;; 很对特定字号的scale, 如果缩放屏幕就会出现中英文混乱的情况，所以最好使用
;; cnfonts
(add-hook 'emacs-startup-hook (lambda ()
                                ;; 只会对初始 frame 生效
                                (my/faces)
                                ;; 创建新 frame 时也生效
                                (add-to-list 'after-make-frame-functions
                                             (lambda (new-frame)
                                               (select-frame new-frame)
                                               (if window-system
                                                   (my/faces))))))

;; https://github.com/minad/mini-popup
;; https://raw.githubusercontent.com/minad/mini-popup/main/mini-popup.el
(use-package mini-popup
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp"
  :config
  ;; Configure a height function (Example for Vertico)
  (defun mini-popup-height-resize ()
    (* (1+ (min vertico--total vertico-count)) (default-line-height)))
  (defun mini-popup-height-fixed ()
    (* (1+ (if vertico--input vertico-count 0)) (default-line-height)))
  (setq mini-popup--height-function #'mini-popup-height-resize)

  ;; Disable the minibuffer resizing of Vertico (HACK)
  (advice-add #'vertico--resize-window :around
              (lambda (&rest args)
                (unless mini-popup-mode
                  (apply args))))

  ;; Ensure that the popup is updated after refresh (Consult-specific)
  (add-hook 'consult--completion-refresh-hook
            (lambda (&rest _) (mini-popup--setup)) 99)
  (mini-popup-mode t))

;; 键盘黏滞键
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global ".." 'ebuku)
  (key-chord-define-global ",," '(lamba ()(find-file "~/Downloads/history.json"))))

;; 画图
(use-package svg
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp")

;; 自动调整窗口大小
(use-package zoom
  :disabled
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(dired-mode markdown-mode ediff-mode))
  (zoom-ignored-buffer-names '("zoom.el" "init.el" "*Ediff Control Panel*"))
  (zoom-ignored-buffer-name-regexps '("^\\*calc" "^\\*[eE]diff.*"))
  (zoom-ignore-predicates (list (lambda () (< (count-lines (point-min) (point-max)) 20))))
  :config
  (zoom-mode t))

;; 使用 embark C-h 替换 which-key
;; which-key 会导致 ediff 的 gX 命令卡住，解决办法是向 Emacs 发送 USR2 信号
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.8))

;; org-msg 在回复消息时，只能看到回复引用的内容，而看不到消息本身，故不再使用。
(use-package org-msg
  :ensure t
  :disabled
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-recipient-names '(("geekard@qq.com" . "zhangjun"))
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text)))
        org-msg-convert-citation t)
  (org-msg-mode)
  )

;;company-box 为候选者显示图标和帮助文档, 会导致 RIME 输入法提示时卡住, 故关闭。
(use-package company-box
  :after (company all-the-icons)
  :init
  ;;(setq company-box-doc-enable nil)
  (setq company-box-doc-delay 0.1)
  :hook (company-mode . company-box-mode))

;;origami 提供代码折叠功能，最新版本[[https://github.com/elp-revive/origami.el/issues/1][从 celpa 源安装]]：
;; 由于可以使用 consult-line 和 occur 来替代，所以不再使用。
(use-package origami
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

;; youdao
(defun my-youdao-dictionary-search-at-point ()
  "Search word at point and display result with `posframe', `pos-tip', or buffer."
  (interactive)
  (if (display-graphic-p)
      (youdao-dictionary-search-at-point-posframe)
    (youdao-dictionary-search-at-point)))

(with-no-warnings
  (defun my-youdao-dictionary--posframe-tip (string)
    "Show STRING using posframe-show."
    (unless (and (require 'posframe nil t) (posframe-workable-p))
      (error "Posframe not workable"))

    (let ((word (youdao-dictionary--region-or-word)))
      (if word
          (progn
            (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
              (let ((inhibit-read-only t))
                (erase-buffer)
                (youdao-dictionary-mode)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (insert string)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
            (posframe-show youdao-dictionary-buffer-name
                           :position (point)
                           :left-fringe 16
                           :right-fringe 16
                           :posframe-width 100
                           :background-color (face-background 'tooltip nil t)
                           :internal-border-color (face-foreground 'font-lock-comment-face nil t)
                           :internal-border-width 1)
            (unwind-protect
                (push (read-event) unread-command-events)
              (progn
                (posframe-hide youdao-dictionary-buffer-name)
                (other-frame 0))))
        (message "Nothing to look up"))))

  (advice-add #'youdao-dictionary--posframe-tip
              :override #'my-youdao-dictionary--posframe-tip))

;;安装外置输入法切换工具 [[https://github.com/laishulu/macism#install][macism]]，
;;解决 Mac 切换输入法后必须输入一个字符才能生效的问题。同时系统的 “快捷键”->“选
;;择上一个输入法” 快捷键必须要开启，否则 macism
;;[[https://github.com/laishulu/macism/issues/2][会切换失败]]。必须在启用
;;=respect-mode= 之前设置 =sis-prefix-override-keys= 变量，否则变量不生效。
(use-package sis
  ;; mac 输入法选择
  :ensure-system-package (macism . "brew tap laishulu/macism; brew install macism")
  :config
  (sis-ism-lazyman-config "com.apple.keylayout.ABC" "com.sogou.inputmethod.sogou.pinyin")
  ;; 自动切换到英文的前缀快捷键
  (push "C-;" sis-prefix-override-keys)
  (push "M-o" sis-prefix-override-keys)
  (push "M-g" sis-prefix-override-keys)
  (push "M-s" sis-prefix-override-keys)
  (sis-global-context-mode nil)
  (sis-global-respect-mode t)
  (global-set-key (kbd "C-\\") 'sis-switch))

;; 快速跳转当前标记符
(use-package symbol-overlay
  :config
  (global-set-key (kbd "M-i") 'symbol-overlay-put)
  (global-set-key (kbd "M-n") 'symbol-overlay-jump-next)
  (global-set-key (kbd "M-p") 'symbol-overlay-jump-prev)
  (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
  (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
  :hook (prog-mode . symbol-overlay-mode))

;;isearch 与 rime [[https://github.com/DogLooksGood/emacs-rime/issues/21][不兼
;;容]]，会导致输入的中文不能候选，可以使用 phi-search 解决：
;; 注: occur 比 isearch 更好用，与 rime 兼容。
(use-package phi-search
  :after (rime)
  :config
  (global-set-key (kbd "C-s") 'phi-search)
  (global-set-key (kbd "C-r") 'phi-search-backward))

(defun my/disable-vertico (orig-fun &rest args)
  (print args)
  (apply orig-fun args)
  ;; (if (string-match ".*(ssh|scp):.*" args)
  ;;     (progn (vertico-mode -1)
  ;;            (apply orig-fun args))
  ;;   (progn (vertico-mode t)
  ;;          (apply orig-fun args))
  )
(advice-add 'find-file-noselect :around #'my/disable-vertico)

(defun my/time-advice (func-orig &rest r)
  ;;(print r)
  (apply func-orig r))
(setq my/completion-func-to-advise #'completion-all-completions)
(advice-add my/completion-func-to-advise :around #'my/time-advice)

(use-package mu4e-dashboard
  :straight (mu4e-dashboard :host github :repo "rougier/mu4e-dashboard"))

;;Make invisible parts of Org elements appear visible.
(use-package org-appear
  :custom
  (org-appear-autolinks t)
  :hook (org-mode . org-appear-mode))

;; 在 side-window 显示窗口，side-window 会一直显示，为 vterm mode 专用（不能最大化），
;; vterm-toggle-forward 和  'vterm-toggle-backward 也都显示在这个 side-window 中。
(setq vterm-toggle-fullscreen-p nil)
(add-to-list 'display-buffer-alist
             '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . bottom)
               (dedicated . t)
               (reusable-frames . visible)
               (window-height . 0.4)))

;; 增强窗口背景对比度
(use-package solaire-mode
  :demand
  :config (solaire-global-mode +1))

:config
(doom-modeline-def-modeline 'main
  ;; left-hand segment list, 去掉 remote-host，避免编辑远程文件时卡住。
  '(bar workspace-name window-number modals matches buffer-info buffer-position word-count parrot selection-info)
  ;; right-hand segment list，尾部增加空格，避免溢出。
  '(objed-state misc-info battery grip debug repl lsp minor-modes input-method major-mode process vcs checker " "))
#+end_src

#+begin_src emacs-lisp
;; 窗口大小调整快捷键。
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

(use-package ansible
  :after (yaml-mode)
  :config
  (add-hook 'yaml-mode-hook (lambda () (ansible 1))))

;; ansible-doc 使用系统的 ansible-doc 命令搜索文档
(use-package ansible-doc
  :ensure-system-package (ansible-doc . "pip install ansible")
  :after (ansible yasnippet)
  :config
  (add-hook 'ansible-hook (lambda() (ansible-doc-mode) (yas-minor-mode-on)))
  (define-key ansible-doc-mode-map (kbd "M-?") #'ansible-doc))
#+end_src

在线词典:
#+begin_src emacs-lisp
(use-package go-translate
  :straight (:host github :repo "lorniu/go-translate")
  :config
  (setq gts-translate-list '(("en" "zh")))
  (setq gts-default-translator
        (gts-translator
         :picker (gts-prompt-picker)
         :engines (list
                   (gts-bing-engine)
                   (gts-google-engine :parser (gts-google-summary-parser))
                   (gts-google-rpc-engine)
                   (gts-youdao-dict-engine))
         :render (gts-buffer-render))))

;; pip install jieba
(use-package chinese-word-at-point)

;;; go-translate
(global-set-key (kbd "C-c d t") #'gts-do-translate)
#+end_src

在线搜索：
#+begin_src emacs-lisp
(use-package engine-mode
  :config
  (engine-mode t)
  ;;(setq engine/browser-function 'eww-browse-url)
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "h")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine twitter
    "https://twitter.com/search?q=%s"
    :keybinding "t")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w"
    :docstring "Searchin' the wikis."))
#+end_src
+ 搜索前缀命令： =C-x /= , 可以先选中 region 再执行上面的搜索。
+ 修复启动报错:  =rm ~/.emacs.d/elpa/engine-mode*/engine-mode-*.el*=;

使用 Mac 默认浏览器打开 URL:
#+begin_src emacs-lisp
;; 执行 browser-url 时使用 Mac 默认浏览器。
(setq browse-url-browser-function 'browse-url-default-macosx-browser)

;; 也可以使用自定义程序
;; (setq browse-url-browser-function 'browse-url-generic
;;       browse-url-generic-program "mychrome")
;;(setq browse-url-chrome-program "mychrome")
#+end_src

上面引用的 mychrome 程序：
#+begin_src bash  :tangle ~/go/bin/mychrome
#!/bin/bash
open -a 'Google Chrome' $*
#+end_src


#+begin_src emacs-lisp
;; 记录最近 100 次按键，可以通过 M-x view-lossage 来查看输入的内容。
(lossage-size 100)

(use-package uniquify
  :straight (:type built-in)
  :config
  ;; Better unique buffer names for files with the same base name.
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))

;; Framework for mode-specific buffer indexes
(use-package imenu
  :straight (:type built-in)
  :bind (("C-c i" . imenu)))
#+end_src

Org-mode Web 站点:
#+begin_src emacs-lisp
(use-package easy-hugo
:init
(setq easy-hugo-basedir "~/blog/my_website/")
(setq easy-hugo-url "https://blog.opsnull.com")
(setq easy-hugo-previewtime "300")
:bind ("C-c C-e" . easy-hugo))
#+end_src

** hugo

#+begin_src emacs-lisp
(use-package cnfonts
  :demand
  :disabled
  :init
  ;; 中英文均使用 Sarasa Term SC 字体。
  (setq cnfonts-personal-fontnames '(("Sarasa Term SC") ("Sarasa Term SC") ("HanaMinB")))
  ;; 允许字体缩放(部分主题如 lenven 依赖) 。
  (setq cnfonts-use-face-font-rescale t)
  :config
  ;; emoji 和 symbol 字体, 必须通过 cnfonts-set-font-finish-hook 调用才会生效。
  (defun my/set-fonts (&optional font)
    (setq use-default-font-for-symbols nil)
    (set-fontset-font t '(#x1f000 . #x1faff) (font-spec :family "Apple Color Emoji"))
    (set-fontset-font t 'symbol (font-spec :family "Apple Symbols" :size 20)))
  (add-hook 'cnfonts-set-font-finish-hook 'my/set-fonts)
  (cnfonts-enable))
#+end_src

#+begin_src emacs-lisp
;; New link type for Org-Hugo internal links
(org-link-set-parameters "hugo"
                         :complete (lambda ()
                                     (concat "{{% ref "(file-name-nondirectory (read-file-name "File: "))" %}}")))
#+end_src

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
#+end_src

key chord 连续按键快捷键:
#+begin_src emacs-lisp
(use-package key-chord
  :demand
  :config
   (key-chord-mode 1)
   (key-chord-define-global "ll" 'avy-goto-line)
   (key-chord-define-global "cc" 'avy-goto-char-2)
   (key-chord-define-global ",," 'indent-for-comment)
   (setq key-chord-one-key-delay 0.4)
   (setq key-chord-two-keys-delay 0.3))
#+end_src

** dap

如果 =M-x dap-chrome-setup= 命令执行失败，则可以手动编译安装 [[https://github.com/microsoft/vscode-chrome-debug][VS Code - Debugger for Chrome]]：
#+begin_src shell :tangle no
$ pwd
/Users/zhangjun/.emacs.d/.extension/vscode/msjsdiag.debugger-for-chrome
$ git clone git clone git@github.com:microsoft/vscode-chrome-debug.git
$ mv vscode-chrome-debug extension/
$ cd extension
$ npm install -g gulp
$ gulp build

$ ls -l out/src/
total 116K
-rw-r--r-- 1 zhangjun 2.0K  5 30 21:02 chromeDebug.js
-rw-r--r-- 1 zhangjun  884  5 30 21:02 chromeDebug.js.map
-rw-r--r-- 1 zhangjun  31K  5 30 21:02 chromeDebugAdapter.js
-rw-r--r-- 1 zhangjun  19K  5 30 21:02 chromeDebugAdapter.js.map
#+end_src

#+begin_src emacs-lisp
(use-package dap-mode
  :disabled
  :demand
  :config
  (dap-auto-configure-mode 1)
  (require 'dap-chrome))
#+end_src
+ 执行 =M-x dap-chrome-setup= 安装 =VSCode Chrome Debug Extension= .

* email

#+begin_src emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :ensure-system-package
  ((mu . mu)
   (mbsync . isync)
   (gpg . gnupg)
   (proxychains4 . proxychains-ng)
   (openssl . openssl@1.1)))
#+end_src
+ mbsync(isync): 同步邮件到本地；
+ mu(带 mu4e emacs 包): 索引和读取邮件；
+ proxychains-ng: 任意 socket 代理, 访问 gmail 使用;
+ gnupg: 加密；
+ openssl@1.1: 提供 isync 和 msmtp 所需的根证书；

** gnupg

参考: [[https://ruanyifeng.com/blog/2013/07/gpg.html][阮一峰 GPG 入门教程]]

创建加密 key 。为了提高 key 安全系数，一般推荐在创建 key 时设置一个密码，这样即使密钥丢了，别人也无法使用:
#+begin_src shell :tangle no
# 生成加密 key
$ gpg --gen-key
# 生成吊销证书
$ gpg --gen-revoke B1D06C306F507C66
# 查看 key
$ gpg --list-keys
/Users/zhangjun/.gnupg/pubring.kbx
----------------------------------
pub   ed25519 2021-10-03 [SC] [有效至：2023-10-03]
10BC65EE905F64CCAFF5E123B1D06C306F507C66
uid             [ 绝对 ] zhangjun <geekard@qq.com>
sub   cv25519 2021-10-03 [E] [有效至：2023-10-03]
#+end_src

uid 是 zhangjun 或 geekard@qq.com 或 hash 值。获取 hash 值：
+ =gpg -a --export |gpg --list-packets --verbose=
+ =M-x epa-list-keys=

为了避免每次使用 key 时都输入密码，可以配置 =gpg-agent= 来记住密码，这样只需在系统第一次使用时输入即可：
#+begin_src shell :tangle ~/.gnupg/gpg-agent.conf
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src

为了让 Emacs 能在首次使用 GPG 时，捕获密码输入框，在 minibuffer 中输入密码，需要做如下的配置：
#+begin_src emacs-lisp :tangle no
(setq epa-pinentry-mode 'loopback)
#+end_src
+ pinentry 是 GPG 提供的程序, [[https://sarata.com/manpages/pinentry-curses.1.html]["它会让用户输入的密码不会因内存不足而换出到磁盘"]] 。

创建 qq 和 gmail 加密密码文件：
 #+begin_src shell :tangle no
$ mkdir ~/.mail
$ echo my.qq.password >.mail/qq.pwd
$ gpg --encrypt --recipient 'geekard@qq.com' ~/.mail/qq.pwd

$ echo my.gmail.password >.mail/gmail/gmail.pwd
$ gpg --encrypt --recipient 'geekard@qq.com' ~/.mail/gmail.pwd

$ ls ~/.mail/*.gpg
/Users/zhangjun/.mail/gmail.pwd.gpg  /Users/zhangjun/.mail/qq.pwd.gpg

# 删除原始明文密码
rm ~/.mail/{qq,gmail}.pwd
 #+end_src

解压密码文件: =gpg --quiet --for-your-eyes-only --no-tty --decrypt ~/.mail/qq.pwd.gpg=

** mbsync

#+begin_src txt :tangle ~/.mbsyncrc
########################################
# qq.com
########################################
IMAPAccount qq
Host imap.qq.com
User geekard@qq.com
PassCmd "gpg --quiet --for-your-eyes-only --no-tty --decrypt \~/.mail/qq.pwd.gpg"
Port 993
AuthMechs LOGIN
SSLType IMAPS
#CertificateFile /etc/ssl/certs/ca-certificates.crt # Linux
CertificateFile /usr/local/etc/openssl@1.1/cert.pem  # MacOS

IMAPStore qq-remote
Account qq

MaildirStore qq-local
# The trailing "/" is important
Path ~/.mail/qq/
Inbox ~/.mail/qq/Inbox/
# The SubFolders option allows to represent all IMAP subfolders as local subfolders
SubFolders Verbatim

## Connections
Channel qq-inbox
Far :qq-remote:"INBOX"
Near :qq-local:"Inbox"
Create Near
Expunge Both
SyncState *

Channel qq-drafts
Far :qq-remote:"Drafts"
Near :qq-local:"Drafts"
Create Near
Expunge Both
SyncState *

Channel qq-sent
Far :qq-remote:"Sent Messages"
Near :qq-local:"Sent"
Create Near
Expunge Both
SyncState *

Channel qq-trash
Far :qq-remote:"Deleted Messages"
Near :qq-local:"Trash"
Create Near
Expunge Both
SyncState *

## Groups
Group qq
Channel qq-inbox
Channel qq-drafts
Channel qq-sent
Channel qq-trash

########################################
# gmail
########################################
IMAPAccount gmail
Host imap.gmail.com
User geekard@gmail.com
PassCmd "gpg --quiet --for-your-eyes-only --no-tty --decrypt \~/.mail/gmail.pwd.gpg"
SSLType IMAPS
AuthMechs PLAIN
CertificateFile /usr/local/etc/openssl@1.1/cert.pem  # MacOS

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
# The trailing "/" is important
Path ~/.mail/gmail/
Inbox ~/.mail/gmail/inbox

Channel gmail-default
Far :gmail-remote:
Near :gmail-local:Inbox
#Patterns INBOX
Create Near
Expunge Both
SyncState *

Channel gmail-sent
Far :gmail-remote:"[Gmail]/Sent Mail"
Near  :gmail-local:Sent
Create Near
Expunge Both
SyncState *

Channel gmail-trash
Far :gmail-remote:"[Gmail]/Trash"
Near  :gmail-local:Trash
Create Near
Expunge Both
SyncState *

Channel gmail-archive
Far :gmail-remote:"[Gmail]/All Mail"
Near  :gmail-local:All
Create Near
Expunge Both
SyncState *

Channel gmail-junk
Far :gmail-remote:"[Gmail]/Spam"
Near  :gmail-local:Junk
Create Near
Expunge Both
SyncState *

Group gmail
Channel gmail-default
Channel gmail-trash
Channel gmail-archive
Channel gmail-sent
Channel gmail-junk
#+end_src

同步邮件:
#+begin_src shell
$ mkdir -p ~/.mail/qq/{Sent,Drafts,Trash,Archive}
$ mkdir -p ~/.mail/gmail/{All,Sent,Drafts,Junk,Trash}
$ mbsync --all
#+end_src
+ 使用 https://gitlab.com/shackra/goimapnotify 可以实现自动调用 mbsync 同步邮件。

** proxychains

proxychains 为不支持代理的命令行程序（如 mbsync )提供任意 socks 代理功能：
#+begin_src shell :tangle no
$ mkdir .proxychains/
$ cp /usr/local/Cellar/proxychains-ng/4.14/.bottle/etc/proxychains.conf ~/.proxychains/proxychains.conf
#+end_src

在 proxychains.conf 的 ProxyList 中添加 socks5 代理地址:
#+begin_src text :tangle no
[ProxyList]
socks5  127.0.0.1 13659
#+end_src

测试 gmail:
#+begin_src shell :tangle no
$ proxychains4 mbsync gmail
#+end_src

** mu4e

#+begin_src shell
# 初始化索引, 指定自己的 email 地址列表
$ mu init --maildir ~/.mail/ --my-address=geekard@qq.com --my-address=geekard@gmail.com
# 建立索引
$ mu index
# 检索索引
$ mu find github
# 查看信息
$ mu info
#+end_src
+ 索引位置： =~/.cache/mu=

#+begin_src emacs-lisp
(defvar attachments-directory "~/.mail/attachments")
(if (not (file-exists-p attachments-directory))
    (make-directory attachments-directory t))

(use-package mu4e
  :disabled
  ;; 使用 mu4e/* 目录下的 lisp 文件, 跳过 straight 的 build 过程;
  :straight (:host github :repo "djcb/mu" :branch "master" :files ("mu4e/*") :build nil)
  :config
  ;; Run mu4e in the background to sync mail periodically
  (mu4e t)

  (setq shr-color-visible-luminance-min 80)

  ;; View images inline in message view buffer
  (setq mu4e-view-show-images t)
  (setq mu4e-view-image-max-width 800)
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; show full addresses in view message (instead of just names)
  (setq mu4e-view-show-addresses t)

  ;; Do not insert signature in sent emails
  (setq mu4e-compose-signature-auto-include nil)

  ;; every new email composition using current frame
  (setq mu4e-compose-in-new-frame nil)
  (setq mu4e-compose-format-flowed nil)

  ;; It is OK to use non-ascii characters
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-attachment-dir attachments-directory)

  ;; This enabled the thread like viewing of email similar to gmail's UI.
  (setq mu4e-headers-include-related t)
  ;; Do not display duplicate messages
  (setq mu4e-headers-skip-duplicates t)
  (setq mu4e-headers-date-format "%Y/%m/%d")

  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-display-update-status-in-modeline t)
  (setq mu4e-hide-index-messages t)
  (setq mu4e-date-format "%y/%m/%d")

  ;; Do not confirm on quit
  (setq mu4e-confirm-quit nil)

  ;; use mu4e as MUA in emacs
  (setq mail-user-agent 'mu4e-user-agent)

  ;; Kill message buffer after email is sent
  (setq message-kill-buffer-on-exit t)

  ;; 回复邮件时，插入邮件引用信息
  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  (setq message-citation-line-format "On %a, %b %d %Y, %f wrote:\n")

  (setq gnus-unbuttonized-mime-types nil)

  ;; mu find 搜索任意单个中文字符。
  (setenv "XAPIAN_CJK_NGRAM" "yes")

  (add-to-list 'mu4e-view-actions '("browser" . mu4e-action-view-in-browser) t)
  (add-hook 'mu4e-view-mode-hook
            (lambda()
              ;; try to emulate some of the eww key-bindings
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  ;; 使用 proxychains4 socks5 代理周期同步邮件
  (setq mu4e-get-mail-command  "proxychains4 mbsync -a")
  (setq mu4e-update-interval 3600)

  ;; 使用 gnus 发送邮件
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-debug-info t)
  (setq smtpmail-debug-verb t)

  (setq mu4e-user-mailing-lists '("geekard@qq.com" "geekard@gmail.com"))

  ;; root maildir
  (setq mu4e-maildir "~/.mail")

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "gmail"
             :enter-func (lambda () (mu4e-message "Switch to the gmail context"))
             :match-func (lambda (msg)
                           (when msg
                             (or (mu4e-message-contact-field-matches msg '(:to :bcc :cc) "geekard@gmail.com")
                                 (string-match-p "^/gmail" (mu4e-message-field msg :maildir)))))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '((user-mail-address            . "geekard@gmail.com")
                     (user-full-name               . "张俊(Jun Zhang)")
                     (smtpmail-default-smtp-server . "smtp.gmail.com")
                     (smtpmail-smtp-server         . "smtp.gmail.com")
                     (smtpmail-smtp-user           . "geekard@gmail.com")
                     (smtpmail-smtp-service        . 587)
                     (smtpmail-stream-type         . starttls)
                     (mu4e-compose-signature       . (concat "---\n zhangjun \n"))
                     (mu4e-sent-folder      . "/gmail/Sent") ;; folder for sent messages
                     (mu4e-drafts-folder    . "/gmail/Drafts") ;; unfinished messages
                     (mu4e-trash-folder     . "/gmail/Junk") ;; trashed messages
                     (mu4e-refile-folder    . "/gmail/Archive"))) ;; ;; saved messages
           ,(make-mu4e-context
             :name "qq"
             :enter-func (lambda () (mu4e-message "Switch to the qq context"))
             :match-func (lambda (msg)
                           (when msg
                             (or (mu4e-message-contact-field-matches msg '(:to :bcc :cc) "geekard@qq.com")
                                 (string-match-p "^/qq" (mu4e-message-field msg :maildir)))))
             :leave-func (lambda () (mu4e-clear-caches))
             :vars '(
                     (user-mail-address            . "geekard@qq.com")
                     (user-full-name               . "张俊(Jun Zhang)")
                     (smtpmail-default-smtp-server . "smtp.qq.com")
                     (smtpmail-smtp-server         . "smtp.qq.com")
                     (smtpmail-smtp-user           . "geekard@qq.com")
                     (smtpmail-smtp-service        . 465)
                     (smtpmail-stream-type         . ssl)
                     (mu4e-compose-signature       . (concat "---\n Zhang Jun \n"))
                     (mu4e-sent-folder      . "/qq/Sent")
                     (mu4e-drafts-folder    . "/qq/Drafts")
                     (mu4e-trash-folder     . "/qq/Trash")
                     (mu4e-refile-folder    . "/qq/Archive")
                     )))))
;; 为 message 添加 Tag
(with-eval-after-load 'mu4e
  (add-to-list 'mu4e-marks
               '(tag
                 :char       "g"
                 :prompt     "gtag"
                 :ask-target (lambda () (read-string "Add Tag: "))
                 :action      (lambda (docid msg target)
                                (mu4e-action-retag-message msg (concat "+" target)))))
  (mu4e~headers-defun-mark-for tag)
  (define-key mu4e-headers-mode-map (kbd "g") 'mu4e-headers-mark-for-tag)

  ;; 在 Dired 中标记文件, 然后 C-c RET C-a 来发送附件
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

  ;; 发送前确认
  (add-hook 'message-send-hook
            (lambda ()
              (unless (yes-or-no-p "Sure you want to send this?")
                (signal 'quit nil))))

  ;; 先选择邮件, 然后按 r, 自动 refile 到对应目录
  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ;; messages to the mu mailing list go to the /mu folder
           ((mu4e-message-contact-field-matches msg :to "mu-discuss@googlegroups.com") "/mu")
           ;; messages sent directly to some spefic address me go to /private
           ((mu4e-message-contact-field-matches msg :to "me@example.com") "/private")
           ;; messages with football or soccer in the subject go to /football
           ((string-match "football\\|soccer" (mu4e-message-field msg :subject)) "/football")
           ;; messages sent by me go to the sent folder
           ((mu4e-message-sent-by-me msg (mu4e-personal-addresses)) mu4e-sent-folder)
           ;; everything else goes to /archive
           ;; important to have a catch-all at the end!
           (t  "/archive")))))
#+end_src
+ mu4e 的使用详情参考在线 Info 手册 [[info:mu4e#Top][mu4e#Top]]。

mu4e 默认使用 gnus 发送 SMTP 邮件, 而 gnus 从 =~/.authinfo.gpg= 读取 SMTP 服务器的帐号信息:

#+begin_src txt :tangle no
machine smtp.qq.com login geekard@qq.com password {QQ 授权码}
machine smtp.gmail.com login geekard@gmail.com password {Gmail 密码}
#+end_src

使用 mu4e-alert 和 notifier(通过 terminal-notifier 程序) 进行桌面通知:
#+begin_src emacs-lisp
(use-package mu4e-alert
  :disabled
  :after mu4e
  :config
  (mu4e-alert-set-default-style 'notifier)
  ;; (mu4e-alert-set-default-style 'growl)
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
  ;; enable mode line display
  (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
  (setq mu4e-alert-email-notification-types '(count)))
#+end_src

使用 mu4e-maildirs-extension 在 mu4e-main-view 展示 Maildirs 概览。
#+begin_src emacs-lisp
(use-package mu4e-maildirs-extension
  :after mu4e
  :config
  (mu4e-maildirs-extension))
#+end_src

mu4e-views 使用 xwdigets 来显示 html 格式邮件：
#+begin_src emacs-lisp
(use-package mu4e-views
  :after mu4e
  :bind (:map mu4e-headers-mode-map
              ("v" . mu4e-views-mu4e-select-view-msg-method) ;; 切换展示类型
              ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
              ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
              ("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
              ("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
              )
  :config
  (setq mu4e-views-completion-method 'default) ;; use ivy for completion
  (setq mu4e-views-default-view-method "html") ;; make xwidgets default
  (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
  (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window) ;; when pressing n and p stay in the current window
  (setq mu4e-views-auto-view-selected-message t)) ;; automatically open messages when moving in the headers view
#+end_src
+ 测试 Emacs 是否支持 xwdigets: (xwidget-webkit-browse-url "https://www.gnu.org/");
+ 在 mu4e-header 中使用 v 来切换邮件显示方式;

** org-mime
org-mime 使用 org-mode 来编辑和发送 html 格式邮件：
#+begin_src emacs-lisp
(use-package org-mime
  :after mu4e
  :config
  (setq org-mime-export-options '(:section-numbers nil :with-author nil :with-toc nil))
  ;; Prompt for confirmation if message has no HTML
  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart))
#+end_src

使用方法：
+ M-x org-mime-htmlize
+ M-x org-mime-edit-mail-in-org-mode
+ M-x org-mime-revert-to-plain-text-mail
* pdf

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure-system-package
  ((pdfinfo . poppler)
   (automake . automake)
   (mutool . mupdf)
   ("/usr/local/opt/zlib" . zlib))
  :init
  ;; 使用 scaling 确保中文字体不模糊
  (setq pdf-view-use-scaling t)
  (setq pdf-view-use-imagemagick nil)
  (setq pdf-annot-activate-created-annotations t)
  (setq pdf-view-resize-factor 1.1)
  (setq-default pdf-view-display-size 'fit-page)
  (setq pdf-annot-activate-created-annotations t)
  :hook
  ((pdf-view-mode . pdf-view-themed-minor-mode)
   (pdf-view-mode . pdf-view-auto-slice-minor-mode)
   (pdf-view-mode . pdf-isearch-minor-mode))
  :config
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (setenv "PKG_CONFIG_PATH" "/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/pkgconfig:/usr/local/lib/pkgconfig")
  (pdf-tools-install))

;; pdf 转为 png 时使用更高分辨率（默认 90）。
(setq doc-view-resolution 144)

(use-package org-noter)
#+end_src

+ pdf-tools 默认是白底黑字，可以：
  + 深色模式： =M-x pdf-view-midnight-minor-mode=
  + 主题模式： =M-x pdf-view-themed-minor-mode=
+ 搜索中文时，需要使用系统中文输入法和 isearch 模式, 或者使用 =M-s o(occur)= ；phi-search 与 pdf-tools 不兼容；
* twitter

#+begin_src emacs-lisp
(use-package twittering-mode
  :commands (twit)
  :init
  ;; 解决报错 "epa--decode-coding-string not defined"
  (defalias 'epa--decode-coding-string 'decode-coding-string)
  (setq twittering-icon-mode t)
  (setq twittering-use-icon-storage t)
  ;; 解决内置的 twitter 根证书失效的问题。
  (setq twittering-allow-insecure-server-cert t)
  (setq twittering-use-master-password t))
#+end_src
+ 默认将 OAuth Token 加密保存到 =~/.twittering-mode.gpg=, 第一次需要输入两次相同的加密密码。


#+begin_src emacs-lisp
;; 未选中窗口。
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;; 高亮粘贴的内容。
(use-package volatile-highlights
  :after(undo-tree)
  :config
  (volatile-highlights-mode t)
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree))

#+end_src

* font

不开启 variable-pitch-mode, 否则 doom-modeline 右侧容易溢出。
#+begin_src emacs-lisp
;; 参考: https://github.com/DogLooksGood/dogEmacs/blob/master/elisp/init-font.el
;; 缺省字体。
(setq +font-family "Fira Code Retina")
(setq +modeline-font-family "Fira Code Retina")
;; org-table 使用 fixed-pitch 字体, Sarasa Term SC 可以让对齐效果更好。
(setq +fixed-pitch-family "Sarasa Term SC")
(setq +variable-pitch-family "LXGW WenKai Screen")
(setq +font-unicode-family "LXGW WenKai Screen")
(setq +font-size-list '(10 11 12 13 14 15 16 17 18))
(setq +font-size 14)

;; 设置缺省字体。
(defun +load-base-font ()
  ;; 为缺省字体设置 size, 其它字体都是通过 :height 进行动态伸缩。
  (let* ((font-spec (format "%s-%d" +font-family +font-size)))
    (set-frame-parameter nil 'font font-spec)
    (add-to-list 'default-frame-alist `(font . ,font-spec))))

;; 设置各特定 face 的字体。
(defun +load-face-font (&optional frame)
  (let ((font-spec (format "%s" +font-family))
        (line-font-spec (format "%s" +modeline-font-family))
        (variable-pitch-font-spec (format "%s" +variable-pitch-family))
        (fixed-pitch-font-spec (format "%s" +fixed-pitch-family)))
    (set-face-attribute 'variable-pitch frame :font variable-pitch-font-spec :height 1.2)
    (set-face-attribute 'fixed-pitch frame :font fixed-pitch-font-spec :height 1.0)
    (set-face-attribute 'fixed-pitch-serif frame :font fixed-pitch-font-spec :height 1.0)
    (set-face-attribute 'tab-bar frame :font font-spec :height 1.0)
    (set-face-attribute 'mode-line frame :font line-font-spec :height 1.0)
    (set-face-attribute 'mode-line-inactive frame :font line-font-spec :height 1.0)))

;; 设置中文字体。
(defun +load-ext-font ()
  (when window-system
    (let ((font (frame-parameter nil 'font))
          (font-spec (font-spec :family +font-unicode-family)))
      (dolist (charset '(kana han hangul cjk-misc bopomofo symbol))
        (set-fontset-font font charset font-spec)))))

;; 设置 emobji 字体。
(defun +load-emoji-font ()
  (when window-system
      (setq use-default-font-for-symbols nil)
      (set-fontset-font t '(#x1f000 . #x1faff) (font-spec :family "Apple Color Emoji"))
      (set-fontset-font t 'symbol (font-spec :family "Symbola"))))

(defun +load-font ()
  (+load-base-font)
  (+load-face-font)
  (+load-ext-font)
  (+load-emoji-font))

(+load-font)
(add-hook 'after-make-frame-functions 
          ( lambda (f) 
            (+load-face-font f)
            (+load-ext-font)
            (+load-emoji-font)))

;; 只为 org-mode 和 markdown-mode 开启 variable-pitch-mode 。
(add-hook 'org-mode-hook 'variable-pitch-mode)
(add-hook 'markdown-mode-hook 'variable-pitch-mode)

(defun +larger-font ()
  (interactive)
  (if-let ((size (--find (> it +font-size) +font-size-list)))
      (progn (setq +font-size size)
             (+load-font)
             (message "Font size: %s" +font-size))
    (message "Using largest font")))

(defun +smaller-font ()
  (interactive)
  (if-let ((size (--find (< it +font-size) (reverse +font-size-list))))
      (progn (setq +font-size size)
             (message "Font size: %s" +font-size)
             (+load-font))
    (message "Using smallest font")))

(global-set-key (kbd "M-+") #'+larger-font)
(global-set-key (kbd "M--") #'+smaller-font)

(defun +use-fixed-pitch ()
  (interactive)
  (setq buffer-face-mode-face `(:family ,+fixed-pitch-family))
  (buffer-face-mode +1))

;; fire-code-mode 只能在 GUI 模式下使用。
(when (display-graphic-p)
  (use-package fira-code-mode
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
    :hook prog-mode))

;; 使用字体缓存，避免卡顿。
(setq inhibit-compacting-font-caches t)
  #+end_src

* cnfonts

#+begin_src emacs-lisp
(use-package cnfonts
  :demand
  :init
  ;; 中英文均使用 Sarasa Mono SC 字体。
  (setq cnfonts-personal-fontnames '(("Sarasa Mono SC") ("Sarasa Mono SC") ("HanaMinB")))
  ;; 允许字体缩放(部分主题如 lenven 依赖) 。
  (setq cnfonts-use-face-font-rescale t)
  :config
  ;; emoji 和 symbol 字体, 必须通过 cnfonts-set-font-finish-hook 调用才会生效。
  (defun my/set-fonts (&optional font)
    (setq use-default-font-for-symbols nil)
    (set-fontset-font t '(#x1f000 . #x1faff) (font-spec :family "Apple Color Emoji"))
    (set-fontset-font t 'symbol (font-spec :family "Apple Symbols" :size 20)))
  (add-hook 'cnfonts-set-font-finish-hook 'my/set-fonts)
  (cnfonts-enable))
#+end_src

* face
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer :init (all-the-icons-ibuffer-mode 1))
(use-package all-the-icons-completion
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

;; 选择 buffer: b, 选择 project: p, 选择文件：f 。
(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :bind
  ("C-x p p" . consult-projectile))

(use-package consult-dir
  :bind
  (("C-x C-d" . consult-dir)
   :map minibuffer-local-completion-map
   ("C-x C-d" . consult-dir)
   ("C-x C-j" . consult-dir-jump-file)))


#+end_src

** kind-icon

#+begin_src emacs-lisp
(use-package kind-icon
  :straight '(kind-icon :host github :repo "jdtsmith/kind-icon")
  :after corfu
  :demand
  :custom
  (kind-icon-default-face 'corfu-default)
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** marginalia

#+begin_src  emacs-lisp
(use-package marginalia
  :init
  ;; 显示绝对时间。
  (setq marginalia-max-relative-age 0)
  (marginalia-mode)
  ;;:config
  ;; 不给 file 加注释，防止 TRAMP 变慢。
  ;; (setq marginalia-annotator-registry
  ;;       (assq-delete-all 'file marginalia-annotator-registry))
  ;; (setq marginalia-annotator-registry
  ;;       (assq-delete-all 'project-file marginalia-annotator-registry))
  )
#+end_src

** cape

Cape 为 Corfu 提供多种类型的 Completion At Point 扩展。
#+begin_src emacs-lisp
(use-package cape
  :demand
  :straight '(cape :host github :repo "minad/cape")
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;; Complete word from current buffers
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;; Complete Elisp symbol
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;; Complete abbreviation
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;; Complete word from dictionary file
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;; Complete entire line from file
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  :config
  (setq cape-dabbrev-min-length 3)
  ;; 前缀长度达到 3 时才调用 CAPF，避免频繁调用自动补全。
  (cape-wrap-prefix-length #'cape-dabbrev 3))
#+end_src

** easy-kill

#+begin_src emacs-lisp
(use-package easy-kill-extras
  :demand
  :bind
  (([remap kill-ring-save] . easy-kill) ;; M-w
   ([remap mark-sexp] . easy-mark-sexp) ;; C-M-SPC
   ([remap mark-word] . easy-mark-word) ;; M-@
   ;; 集成 zap-to-char.
   ([remap zap-to-char] . easy-mark-to-char)
   ([remap zap-up-to-char] . easy-mark-up-to-char))
  :init
  (setq kill-ring-max 200
        ;; 替换前先保存剪贴板内容。
        save-interprogram-paste-before-kill t
        easy-kill-alist '((?w word           " ")
                          (?s sexp           "\n")
                          (?l list           "\n")
                          (?d defun          "\n\n")
                          (?D defun-name     " ")
                          (?e line           "\n")
                          (?b buffer-file-name)

                          (?^ backward-line-edge "")
                          (?$ forward-line-edge "")
                          (?h buffer "")
                          (?< buffer-before-point "")
                          (?> buffer-after-point "")
                          (?f string-to-char-forward "")
                          (?F string-up-to-char-forward "")
                          (?t string-to-char-backward "")
                          (?T string-up-to-char-backward "")

                          (?W  WORD " ") ;; 非空白字符序列。
                          (?\' squoted-string "")
                          (?\" dquoted-string "")
                          (?\` bquoted-string "")
                          (?q  quoted-string "") ;; 任何字符串类型
                          (?Q  quoted-string-universal "")
                          (?\) parentheses-pair-content "\n")
                          (?\( parentheses-pair "\n")
                          (?\] brackets-pair-content "\n")
                          (?\[ brackets-pair "\n")
                          (?}  curlies-pair-content "\n")
                          (?{  curlies-pair "\n")
                          (?>  angles-pair-content "\n")
                          (?<  angles-pair "\n")))
:config
;; 加载 extra-things 后, 上面 WORD 开始的 alist 才生效。
(require 'extra-things))
#+end_src
M-w 是前缀，默认选择当前行，使用 easy-kill-alist 中的快捷键可以用其它选择方式，然后用下面的键来修改选择的内容：
+ @: 将选择区域添加到前一次的 kill, 如 M-w d @;
+ C-w: 剪切选择；
+ +, - and 1..9: 扩大或缩小选择；
+ 0: 将选择缩小到初始大小；
+ SPC: 根据 easy-kill-alist 中循环操作；
+ C-SPC: 将选择转为 active region;
+ C-g: 终止；
+ ?: 帮助；

** org
#+begin_src emacs-lisp
;; org-mode table 中英文像素对齐。
(use-package valign
  :config
  (add-hook 'org-mode-hook #'valign-mode))
#+end_src

* projectile

#+begin_src emacs-lisp
;; 选择 buffer: b, 选择 project: p, 选择文件：f 。
(use-package consult-projectile
  :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master")
  :after (projectile)
  :bind
  ("C-c p p" . consult-projectile))

  ;; 如果当前打开的有 tramp buffer, 则 list buffer 时 ibuffer-project 会重新打开该 buffer 导致卡顿，故关闭。
  (use-package ibuffer-project
    :disabled
    :hook
    ((ibuffer . (lambda ()
		  (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
		  (unless (eq ibuffer-sorting-mode 'project-file-relative)
		    (ibuffer-do-sort-by-project-file-relative)))))
    :config
    ;; 显示的文件名是相对于 project root 的相对路径。
    (setq ibuffer-formats
	  '((mark modified read-only " "
		  (name 18 18 :left :elide)
		  " "
		  (size 9 -1 :right)
		  " "
		  (mode 16 16 :left :elide)
		  " "
		  project-file-relative))))

;; 基于 project 来对 buffer 进行分组。
(use-package ibuffer-projectile
  :after (ibuffer projectile)
  :hook
  ((ibuffer . (lambda ()
                (ibuffer-projectile-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
  :config
  ;; 显示的文件名是相对于 project root 的相对路径。
  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 18 18 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                project-relative-file))))
#+end_src

#+begin_src emacs-lisp
(use-package projectile
  :demand
  :config
  (projectile-global-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  ;; selectrum/vertico 使用 'default 。
  (setq projectile-completion-system 'default)
  (add-to-list 'projectile-ignored-projects (concat (getenv "HOME") "/" "/root" "/tmp" "/etc" "/home"))
  (dolist (dir '("^\\.cache$"
                  "^elpa$"
                  "^bak$"
                  "^__pycache__$"
                  "^vendor$"
                  "^node_modules$"
                  "^logs$"
                  "^target$"
                  "^build$"
                  "^\\.devcontainer$"
                  "^\\.settings$"
                  "^\\.gradle$"))
    (add-to-list 'projectile-globally-ignored-directories dir))
  (dolist (item '("GPATH"
                  "GRTAGS"
                  "GTAGS"
                  "TAGS"
                  ".classpath"
                  ".project"
                  ".DS_Store"))
     (add-to-list 'projectile-globally-ignored-files item))
  (dolist (list '("\\.elc\\'"
                  "\\.o\\'"
                  "\\.class\\'"
                  "\\.out\\'"
                  "\\.pdf\\'"
                  "\\.pyc\\'"
                  "\\.rel\\'"
                  "\\.rip\\'"
                  "\\.swp\\'"
                  "\\.iml\\'"
                  "\\.bak\\'"
                  "\\.log\\'"
                  "~\\'"))
    (add-to-list 'projectile-globally-ignored-file-suffixes list))

  ;; Disable projectile on remote buffers
  ;; https://www.murilopereira.com/a-rabbit-hole-full-of-lisp/
  ;; https://github.com/syl20bnr/spacemacs/issues/11381#issuecomment-481239700
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory 'no-identification) ad-do-it))

  ;; 开启 cache 解决 TRAMP 慢的问题，https://github.com/bbatsov/projectile/pull/1129
  (setq projectile-enable-caching t)
  (setq projectile-file-exists-remote-cache-expire (* 10 60))
  (setq projectile-mode-line-prefix "")
  (setq projectile-dynamic-mode-line nil)
  (setq projectile-sort-order 'recentf)
  (setq projectile-require-project-root 'prompt)
  ;; 添加 :project-file "go.mod", 这样能正确探测 go module (非 git 仓库)根目录。
  (projectile-register-project-type 'go projectile-go-project-test-function
                                    :project-file "go.mod"
                                    :compile "go build"
                                    :test "go test ./..."
                                    :test-suffix "_test"))

(defun my/projectile-discover ()
  (interactive)
  (dolist (search-path '("~/go/src/github.com/*" "~/go/src/github.com/*/*" "~/go/src/k8s.io/*" "~/go/src/gitlab.*/*/*"))
    (dolist (file (file-expand-wildcards search-path))
      (when (file-directory-p (concat file "/.git"))
        (message "-> %s" file)
        (projectile-add-known-project file)
        (message "added project %s" file)))))
#+end_src

* got-chg

跳转到上次修改位置：
#+begin_src emacs-lisp
(use-package goto-chg
  :config
  (global-set-key (kbd "C->") 'goto-last-change)
  (global-set-key (kbd "C-<") 'goto-last-change-reverse))
#+end_src

* rime

Mac 系统安装 RIME 输入法：
1. 下载鼠鬚管 Squirrel [[https://rime.im/download/]]，它包含输入法方案。
2. 下载 Squirrel 使用的 [[https://github.com/rime/librime/releases][librime]] （从 Squirrel 的 [[https://github.com/rime/squirrel/blob/master/CHANGELOG.md][CHANGELOG]] 中获取版本）
3. 重新登录用户，然后就可以使用 =Control-+= 来触发 RIME 输入法了。
4. 在 Mac 的输入法配置程序中将 鼠须管 去掉，只保留 ABC 和搜狗输入法；
5. 部署生效,:
   + 如果修改了 =~/Library/Rime= 下的配置，必须点击鼠须管的 “重新部署” 才能生效。
   + 对于 emacs-rime，如果修改了 =~/Library/Rime= 下的配置，需要执行 =M-x rime-deploy= 生效；

下载 [[https://github.com/rime/librime/releases][librime]] 库, emacs-rime 使用它与系统的 RIME 交互：
#+Begin_src bash :tangle no
curl -L -O https://github.com/rime/librime/releases/download/1.7.2/rime-1.7.2-osx.zip
unzip rime-1.7.2-osx.zip -d ~/.emacs.d/librime
rm -rf rime-1.7.2-osx.zip
# 如果 MacOS Gatekeeper 阻止第三方软件运行，可以暂时关闭它：
sudo spctl --master-disable
# 后续再开启：sudo spctl --master-enable
#+end_src

从 [[https://github.com/ssnhd/rime][ssnhd/rime]] 下载最新的词库方案安装包, 将“配置文件” 目录下的内容复制到到 =~/Library/Rime= 目录。

RIME 输入法自定义缺省配置中文：
#+begin_src yaml :tangle ~/Library/Rime/default.custom.yaml
patch:
  schema_list:
    - schema: luna_pinyin_simp # 朙月拼音
    - schema: numbers # 大写数字
  menu/page_size: 9
  ascii_composer/good_old_caps_lock: true
  ascii_composer/switch_key:
    Caps_Lock: commit_code
    Shift_L: inline_ascii
    Shift_R: commit
    Control_L: commit_code
    Control_R: commit_code
  switcher/hotkeys:
  - F4
  - "Control+plus" # 使用 C-+ 调出输入法菜单
  key_binder/bindings:
  - { when: composing, accept: Shift+Tab, send: Page_Up }          # 上一页
  - { when: paging, accept: minus, send: Page_Up }                 # 上一页
  - { when: composing, accept: Tab, send: Page_Down }              # 下一页
  - { when: has_menu, accept: equal, send: Page_Down }             # 下一页
  - { when: always, accept: "Control+equal", toggle: ascii_mode}   # 中英文切换
  - { when: always, accept: "Control+period", toggle: ascii_punct} # 中英文标点切换
  - { when: always, accept: "Control+comma", toggle: full_shape}   # 全角/半角切换
# 更多快捷键参考: https://github.com/Iorest/rime-setting/blob/master/default.custom.yaml
#+end_src

全拼配置:
#+begin_src yaml :tangle ~/Library/Rime/luna_pinyin_simp.custom.yaml 
patch:
  switches:
    - name: ascii_mode # 0 中文，1 英文
      reset: 0
      states: ["中文", "西文"]
    - name: full_shape # 全角/半角符号开关
      reset: 0
      states: ["半角", "全角"]
    - name: show_emoji # Emoji 开关
      reset: 0
      states: ["🈚️️\uFE0E", "🈶️️\uFE0F"]
    - name: zh_simp # (※1) 繁简转换
      reset: 1
      states: ["漢字", "汉字"]
    - name: symbol_support
      reset: 0 # 安装包中默认为 1, 必须设置为 0, 否则激活输入法后 emacs 卡死。
      states: [ "无符", "符" ]
  simplifier:
    option_name: zh_simp

  # 启用罕见字過濾
  engine/filters:
    - simplifier
    - simplifier@emoji_conversion
    - uniquifier
    - charset_filter@gbk # (※3) GBK 过滤
    - single_char_filter

  emoji_conversion:
    opencc_config: emoji.json
    option_name: show_emoji
    tags: abc
    #tips: all    # Emoji 显示注释

  # 改写拼写运算，含英文的词汇（luna_pinyin.cn_en.dict.yaml）不影响简拼
  "speller/algebra/@before 0": xform/^([b-df-hj-np-tv-z])$/$1_/

  # 载入朙月拼音扩充词库
  "translator/dictionary": luna_pinyin.extended

  # 加载easy_en依赖
  "schema/dependencies/@1": easy_en
  # 载入翻译英文的码表翻译器，取名为 english
  "engine/translators/@4": table_translator@english
  # english翻译器的设定项
  english:
    dictionary: easy_en
    spelling_hints: 9
    enable_completion: false # 是否启用英文输入联想补全
    enable_sentence: false # 混输时不出现带有图案的英文
    initial_quality: -0.5 # 英文候选词的位置, 数值越大越靠前。

  # 快捷表情和符号
  punctuator:
    import_preset: symbols
    symbols:
      "/fs": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒]
      "/xh": [＊, ×, ✱, ★, ☆, ✩, ✧, ❋, ❊, ❉, ❈, ❅, ✿, ✲]
      "/dq": [🌍, 🌎, 🌏, 🌐, 🌑, 🌒, 🌓, 🌔, 🌕, 🌖, 🌗, 🌘]
      "/sg": [🍇, 🍉, 🍌, 🍍, 🍎, 🍏, 🍑, 🍒, 🍓, 🍗, 🍦, 🎂, 🍺, 🍻]
      "/dw": [🙈, 🐵, 🐈, 🐷, 🐨, 🐼, 🐾, 🐔, 🐬, 🐠, 🦋]
      "/bq": [😀, 😁, 😂, 😃, 😄, 😅, 😆, 😉, 😊, 😋, 😎, 😍, 😘, 😗]
      "/ss": [💪, 👈, 👉, 👆, 👇, ✋, 👌, 👍, 👎, ✊, 👊, 👋, 👏, 👐]
    half_shape:
      "#": "#"
      "*": "*"
      "`": "`"
      "~": "~"
      "@": "@"
      "=": "="
      '\': "、"
      "%": "%"
      "$": ["¥", "$"]
      "|": ["|", "｜", "·"]
      "/": ["/", "÷"]
      "'": { pair: ["「", "」"] }
      "[": "【"
      "]": "】"
      "<": "《"
      ">": "》"

  recognizer/patterns/punct: "^/([a-z]+|[0-9]0?)$"

  # 模糊拼音
  "speller/algebra":
    - erase/^xx$/ # 第一行保留

    # 模糊音定義
    # 需要哪組就刪去行首的 # 號，單雙向任選
    - derive/^([zcs])h/$1/             # zh, ch, sh => z, c, s
    - derive/^([zcs])([^h])/$1h$2/     # z, c, s => zh, ch, sh
    #- derive/^n/l/                     # n => l
    #- derive/^l/n/                     # l => n
    - derive/([ei])n$/$1ng/            # en => eng, in => ing
    - derive/([ei])ng$/$1n/            # eng => en, ing => in
    # 以下是一組容錯拼寫，《漢語拼音》方案以前者爲正
    #- derive/^([nl])ve$/$1ue/          # nve = nue, lve = lue
    #- derive/^([jqxy])u/$1v/           # ju = jv,
    #- derive/un$/uen/                  # gun = guen,
    #- derive/ui$/uei/                  # gui = guei,
    #- derive/iu$/iou/                  # jiu = jiou,
    # 自動糾正一些常見的按鍵錯誤
    - derive/([aeiou])ng$/$1gn/        # dagn => dang
    - derive/([dtngkhrzcs])o(u|ng)$/$1o/  # zho => zhong|zhou
    - derive/ong$/on/                  # zhonguo => zhong guo
    - derive/ao$/oa/                   # hoa => hao
    - derive/([iu])a(o|ng?)$/a$1$2/    # tain => tian

  # 分尖團後 v => ü 的改寫條件也要相應地擴充：
  #'translator/preedit_format':
  #  - "xform/([nljqxyzcs])v/$1ü/"

  # librime-lua 输入动态时间和日期
  "engine/translators/@6": lua_translator@date_translator
#+end_src

配置 Emacs:
#+begin_src emacs-lisp
(use-package rime
  :disabled
  :ensure-system-package
  ("/Applications/SwitchKey.app" . "brew install --cask switchkey")
  :custom
  (rime-user-data-dir "~/Library/Rime/")
  (rime-librime-root "~/.emacs.d/librime/dist")
  (rime-emacs-module-header-root "/usr/local/opt/emacs-plus@28/include")
  :hook
  (emacs-startup . (lambda () (setq default-input-method "rime")))
  :bind
  ( :map rime-active-mode-map
    ;; 强制切换到英文模式，直到按回车
    ("M-j" . 'rime-inline-ascii)
    :map rime-mode-map
    ;; 中英文切换
    ("C-=" . 'rime-send-keybinding)
    ;; 输入法菜单
    ("C-+" . 'rime-send-keybinding)
    ;; 中英文标点切换
    ("C-." . 'rime-send-keybinding)
    ;; 全半角切换
    ("C-," . 'rime-send-keybinding)
    ;; 强制切换到中文模式
    ("M-j" . 'rime-force-enable))
  :config
  ;; 在 modline 高亮输入法图标, 可用来快速分辨分中英文输入状态。
  (setq mode-line-mule-info '((:eval (rime-lighter))))
  ;; support shift-l, shift-r, control-l, control-r, 只有当使用系统 RIME 输入法时才有效。
  (setq rime-inline-ascii-trigger 'shift-l)
  ;; 临时英文模式。
  (setq rime-disable-predicates
        '(rime-predicate-ace-window-p
          rime-predicate-hydra-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-prog-in-code-p
          rime-predicate-after-ascii-char-p
          ))
  (setq rime-show-candidate 'posframe)

  ;; 部分 major-mode 关闭 RIME 输入法。
  (defadvice switch-to-buffer (after activate-input-method activate)
    (if (or (string-match "vterm-mode" (symbol-name major-mode))
            (string-match "dired-mode" (symbol-name major-mode))
            (string-match "image-mode" (symbol-name major-mode))
            (string-match "minibuffer-mode" (symbol-name major-mode)))
        (activate-input-method nil)
      (activate-input-method "rime"))))
#+end_src
+  使用 [[https://github.com/itsuhane/SwitchKey][SwitchKey]] 将 Emacs 的默认系统输入法设置为英文，防止搜狗输入法干扰 RIME。

然后执行命令 =M-x rime-deploy= 生效。输入 =weiyamu=, 如果内容是 =鳚亚目= 则证明导入成功。



跳转到特定字符或行：
#+begin_src emacs-lisp
(use-package avy
  :config
  ;; 值在当前 window 中跳转。
  (setq avy-all-windows nil)
  (setq avy-background t)
  :bind
  ("M-g c" . avy-goto-char-2)
  ("M-g l" . avy-goto-line))
#+end_src

* other

#+begin_src emacs-lisp
;; 在 dired buffer 中使用 treemacs icons。
(require 'treemacs-icons-dired)
(treemacs-icons-dired-mode t)
;; 单击打开或折叠目录.
(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)

  ;; 使用 treemacs 自带的 all-the-icons 主题。
  ;; 注: 当使用 doom-themes 主题时, 它会自动设置 treemacs theme, 就不需要再调用这个函数了.
  (require 'treemacs-all-the-icons)
  (treemacs-load-theme "all-the-icons")
  (require 'treemacs-projectile)


;; 在窗口左上角显示位置字符。
(setq aw-char-position 'top-left)
;; 调大窗口选择字符。
(custom-set-faces
 '(aw-leading-char-face
   ((t (:inherit ace-jump-face-foreground :foreground "red" :height 1.5)))))

  ;; 设置命令显示风格。
  (setq vertico-multiform-commands
        ;; 参数是 vertico-<name>-mode 中的 <name>, 可以多个联合使用。
        ;; 在单独 buffer 中显示结果 consult-imenu 结果。
        '((consult-imenu buffer)
          (consult-imenu-multi buffer)
          (consult-line buffer)
          (consult-mark buffer)
          (consult-global-mark buffer)
          (consult-find buffer)))

#+end_src

* centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :disabled
  :hook (after-init . centaur-tabs-mode)
  :init
  ;; 有时 icon 显示不对而且大小不一致，故关闭。
  (setq centaur-tabs-set-icons nil)
  (setq centaur-tabs-height 25)
  (setq centaur-tabs-gray-out-icons 'buffer)
  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-cycle-scope 'tabs)
  (setq centaur-tabs-enable-ido-completion nil)
  (setq centaur-tabs-set-bar 'under)
  (setq x-underline-at-descent-line t)
  (setq centaur-tabs-show-navigation-buttons t)
  (setq centaur-tabs-enable-key-bindings t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward)
  ("C-c t s" . centaur-tabs-counsel-switch-group)
  ("C-c t p" . centaur-tabs-group-by-projectile-project)
  ("C-c t g" . centaur-tabs-group-buffer-groups)
  :config
  ;;(centaur-tabs-mode t)
  (centaur-tabs-headline-match)
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-group-by-projectile-project)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules."
    (list
	 (cond
	  ((or (string-equal "*" (substring (buffer-name) 0 1))
	       (memq major-mode '(magit-process-mode
				              magit-status-mode
				              magit-diff-mode
				              magit-log-mode
				              magit-file-mode
				              magit-blob-mode
				              magit-blame-mode
				              )))
	   "Emacs")
	  ((or (derived-mode-p 'prog-mode)
           (memq major-mode '(go-mode
			                  python-mode)))
	   "Coding")
	  ((derived-mode-p 'dired-mode)
	   "Dired")
	  ((memq major-mode '(helpful-mode
			              help-mode))
	   "Help")
	  ((memq major-mode '(org-mode
			              org-agenda-clockreport-mode
			              org-src-mode
			              org-agenda-mode
			              org-beamer-mode
			              org-indent-mode
			              org-bullets-mode
			              org-cdlatex-mode
			              org-agenda-log-mode
			              diary-mode))
	   "OrgMode")
	  (t
	   (centaur-tabs-get-group-name (current-buffer))))))
  (defun centaur-tabs-hide-tab (x)
    (let ((name (format "%s" x)))
      (or
       (window-dedicated-p (selected-window))
       ;; 不显示以 * 开头的 buffer 。
       (string-prefix-p "*" name)
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name)))))))
#+end_src

* org
** capture

自动 Capture 浏览器发来的网址或选中的内容:
#+begin_src emacs-lisp
(require 'org-protocol)
(require 'org-capture)

(setq org-capture-templates
      '(("c" "Capture" entry (file+headline "~/docs/orgs/capture.org" "Capture")
         "* %^{Title}\nDate: %U\nSource: %:annotation\n\n%:initial" :empty-lines 1)
        ("t" "Todo" entry (file+headline "~/docs/orgs/gtd.org" "Tasks")
         "* TODO %?\n %U %a\n %i" :empty-lines 1)))
#+end_src

** agenda

#+begin_src emacs-lisp
(setq org-agenda-time-grid
      (quote ((daily today require-timed)
              (300 600 900 1200 1500 1800 2100 2400)
              "......"
              "-----------------------------------------------------"
              )))

;; org-agenda 展示的文件。
(setq org-agenda-files
      '("~/docs/orgs/gtd.org"
        "~/docs/orgs/capture.org"))
(setq org-agenda-start-day "-7d")
(setq org-agenda-span 21)
(setq org-agenda-include-diary t)
;; use org-journal
;;(setq diary-file "~/docs/orgs/diary")
;;(setq diary-mail-addr "geekard@qq.com")
;; 获取经纬度：https://www.latlong.net/
(setq calendar-latitude +39.904202)
(setq calendar-longitude +116.407394)
(setq calendar-location-name "北京")
(setq calendar-remove-frame-by-deleting t)
;; 每周第一天是周一。
(setq calendar-week-start-day 1)
;; 标记有记录的日期。
(setq mark-diary-entries-in-calendar t)
;; 标记节假日。
(setq mark-holidays-in-calendar nil)
;; 不显示节日列表。
(setq view-calendar-holidays-initially nil)
(setq org-agenda-include-diary t)

;; 除去基督徒、希伯来和伊斯兰教的节日。
(setq christian-holidays nil
      hebrew-holidays nil
      islamic-holidays nil
      solar-holidays nil
      bahai-holidays nil)

(setq mark-diary-entries-in-calendar t
      appt-issue-message nil
      mark-holidays-in-calendar t
      view-calendar-holidays-initially nil)

(setq diary-date-forms '((year "/" month "/" day "[^/0-9]"))
      calendar-date-display-form '(year "/" month "/" day)
      calendar-time-display-form '(24-hours ":" minutes (if time-zone " (") time-zone (if time-zone ")")))

(add-hook 'today-visible-calendar-hook 'calendar-mark-today)

(autoload 'chinese-year "cal-china" "Chinese year data" t)

(setq calendar-load-hook '(lambda ()
                            (set-face-foreground 'diary-face   "skyblue")
                            (set-face-background 'holiday-face "slate blue")
                            (set-face-foreground 'holiday-face "white")))

(use-package org-super-agenda)
#+end_src

** refile

使用 outline 路径来指定要 refile 的文件和位置, 如 =emacs.org/packages/org-mode=:
+ =packages/org-mode= 是要 refile 的内容的 paret nodes, 如果不存在会提示创建。
#+begin_src emacs-lisp
;; refile 的位置是 agenda 文件的前三层 headline 。
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
;; 使用文件路径的形式显示 filename 和 headline, 方便在文件的 top-head 添加内容。
(setq org-refile-use-outline-path 'file)
;; 必须设置为 nil 才能显示 headline, 否则只显示文件名 。
(setq org-outline-path-complete-in-steps nil)
;; 支持为 subtree 在 refile target 文件指定一个新的父节点 。
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src
+ 参考: [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organizing Notes With Refile]]

** notify

倒计时结束通知:
#+BEGIN_SRC  emacs-lisp
(use-package emacs
  :straight (:type built-in)
  :ensure-system-package terminal-notifier)

(defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")
(defun terminal-notifier-notify (title message)
  (start-process "terminal-notifier"
                 "terminal-notifier"
                 terminal-notifier-command
                 "-title" title
                 "-sound" "default"
                 "-message" message
                 "-activate" "org.gnu.Emacs"))

(defun timed-notification (time msg)
  (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
  (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))

;;(terminal-notifier-notify "Emacs notification" "Something amusing happened")
(setq org-show-notification-handler (lambda (msg) (timed-notification nil msg)))
#+end_src

* elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :demand
  :config
  (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory))
  (setq elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-curl-timeout 30)
  (setf url-queue-timeout 40)
  (push "-k" elfeed-curl-extra-arguments)
  (setq elfeed-search-filter "@1-months-ago +unread")
  ;; 在同一个 buffer 中显示条目。
  (setq elfeed-show-unique-buffers nil)
  (setq elfeed-search-title-max-width 150)
  (setq elfeed-search-date-format '("%Y-%m-%d %H:%M" 20 :left))
  (setq elfeed-log-level 'warn)

  ;; 支持收藏 feed, 参考：http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/
  (defalias 'elfeed-toggle-star (elfeed-expose #'elfeed-search-toggle-all 'star))
  (eval-after-load 'elfeed-search '(define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star))
  (defface elfeed-search-star-title-face '((t :foreground "#f77")) "Marks a starred Elfeed entry.")
  (push '(star elfeed-search-star-title-face) elfeed-search-face-alist))

(use-package elfeed-org
  :custom ((rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
  :hook
  ((elfeed-dashboard-mode . elfeed-org)
   (elfeed-show-mode . elfeed-org))
  :config
  (progn
    (defun my/reload-org-feeds ()
      (interactive)
      (rmh-elfeed-org-process rmh-elfeed-org-files rmh-elfeed-org-tree-id))
    (advice-add 'elfeed-dashboard-update :before #'my/reload-org-feeds)))

(use-package elfeed-dashboard
  :config
  (global-set-key (kbd "C-c f") 'elfeed-dashboard)
  (setq elfeed-dashboard-file "~/.emacs.d/elfeed-dashboard.org")
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

(use-package elfeed-score
  :config
  (progn
    (elfeed-score-enable)
    (define-key elfeed-search-mode-map "=" elfeed-score-map)))

(use-package elfeed-goodies
  :config
  (setq elfeed-goodies/entry-pane-position 'bottom)
  (setq elfeed-goodies/feed-source-column-width 30)
  (setq elfeed-goodies/tag-column-width 30)
  (setq elfeed-goodies/powerline-default-separator 'arrow)
  (elfeed-goodies/setup))

;; elfeed-goodies 显示日期栏
;;https://github.com/algernon/elfeed-goodies/issues/15#issuecomment-243358901
(defun elfeed-goodies/search-header-draw ()
  "Returns the string to be used as the Elfeed header."
  (if (zerop (elfeed-db-last-update))
      (elfeed-search--intro-header)
    (let* ((separator-left (intern (format "powerline-%s-%s"
                                           elfeed-goodies/powerline-default-separator
                                           (car powerline-default-separator-dir))))
           (separator-right (intern (format "powerline-%s-%s"
                                            elfeed-goodies/powerline-default-separator
                                            (cdr powerline-default-separator-dir))))
           (db-time (seconds-to-time (elfeed-db-last-update)))
           (stats (-elfeed/feed-stats))
           (search-filter (cond
                           (elfeed-search-filter-active
                            "")
                           (elfeed-search-filter
                            elfeed-search-filter)
                           (""))))
      (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
          (search-header/draw-wide separator-left separator-right search-filter stats db-time)
        (search-header/draw-tight separator-left separator-right search-filter stats db-time)))))

(defun elfeed-goodies/entry-line-draw (entry)
  "Print ENTRY to the buffer."
  (let* ((title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
         (date (elfeed-search-format-date (elfeed-entry-date entry)))
         (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
         (feed (elfeed-entry-feed entry))
         (feed-title
          (when feed
            (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
         (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
         (tags-str (concat "[" (mapconcat 'identity tags ",") "]"))
         (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                         elfeed-goodies/tag-column-width 4))
         (title-column (elfeed-format-column
                        title (elfeed-clamp
                               elfeed-search-title-min-width
                               title-width
                               title-width)
                        :left))
         (tag-column (elfeed-format-column
                      tags-str (elfeed-clamp (length tags-str)
                                             elfeed-goodies/tag-column-width
                                             elfeed-goodies/tag-column-width)
                      :left))
         (feed-column (elfeed-format-column
                       feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width
                                                elfeed-goodies/feed-source-column-width)
                       :left)))

    (if (>= (window-width) (* (frame-width) elfeed-goodies/wide-threshold))
        (progn
          (insert (propertize date 'face 'elfeed-search-date-face) " ")
          (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
          (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
          (insert (propertize title 'face title-faces 'kbd-help title)))
      (insert (propertize title 'face title-faces 'kbd-help title)))))
#+end_src

elfeed-score 规则文件([[https://www.unwoundstack.com/doc/elfeed-score/curr][语法参考]]):
#+begin_src emacs-lisp :tangle ~/.emacs.d/elfeed.score
;;; Elfeed score file                                     -*- lisp -*-
(
;; ("title"
;;   (:text "opsnull" :value 250 :type S))
;;  ("content"
;;   (:text "type erasure" :value 500 :type s))
 ("title-or-content"
;;  (:text "emacs" :title-value 150 :content-value 100 :type s)
  (:text "opsnull" :title-value 150 :content-value 100 :type w))
 ("feed"
  (:text "Irreal" :value 250 :type S :attr t)
  (:text "emacs-news – sacha chua" :value 350 :type S :attr t :comment "Essential!"))
;; ("authors"
;;  (:text "opsnull" :value 500 :type s))
;; ("tag"
;;  (:tags (t . reddit-question)
;;         :value 750
;;         :comment "Add 750 points to any entry with a tag of reddit-question"))
 (mark -2500))
#+end_src

* beacon

#+begin_src emacs-lisp
;; 显示光标位置。
(use-package beacon
  :config
  ;; 翻页时不高亮位置。
  (setq beacon-blink-when-window-scrolls nil)
  (setq beacon-blink-duration 0.3)
  (beacon-mode 1))
#+end_src

* flycheck

flycheck 是现代的在线语法检查工具, 它使用系统工具对 buffer 进行检查，可以取代 emacs 内置的 flymake。
+ C-c ! v (flycheck-verify-setup) :: 查看当前 buffer 使用的 checker。
+ C-c ! l (flycheck-list-errors) :: 列出当前 workspace 所有的 error。
+ M-g f 或 C-c !!: consult-flycheck。
#+begin_src emacs-lisp
(use-package flycheck
  :disabled
  :demand
  :config
  ;; 高亮出现错误的列位置。
  (setq flycheck-highlighting-mode (quote columns))
  ;; 从列表中取掉 idle-change, 避免不必要的错误提示。
  ;;(setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;; 只在 save buffer 时才检查。
  (setq flycheck-check-syntax-automatically '(save))
  (define-key flycheck-mode-map (kbd "M-g n") #'flycheck-next-error)
  (define-key flycheck-mode-map (kbd "M-g p") #'flycheck-previous-error)
  :hook
  (prog-mode . flycheck-mode))

;; 在线显示 flycheck 错误。
(use-package flycheck-pos-tip
  :after (flycheck)
  :config
  (flycheck-pos-tip-mode))

;; flycheck 实时预览。
(use-package consult-flycheck
  :after (consult flycheck)
  :bind
  (:map flycheck-command-map ("!" . consult-flycheck)))
#+end_src

* lsp

#+begin_src emacs-lisp
(setenv "LSP_USE_PLISTS" "true")

(use-package lsp-mode
  :disabled
  :custom
  ;; debug 时才开启 log, 否则影响性能。
  (lsp-log-io nil)
  ;; 日志记录行数。
  (lsp-log-max 1000)
  (lsp-keymap-prefix "C-c l")
  (lsp-diagnostics-provider :flycheck)
  (lsp-diagnostics-flycheck-default-level 'warning)
  (lsp-completion-provider :none) ;; corfu.el: :none, company: :capf
  (lsp-enable-symbol-highlighting nil)
  ;; 不显示面包屑。
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;; 启用 snippet 后才支持函数或方法的 placeholder 提示。
  (lsp-enable-snippet nil)
  ;; 后续使用 lsp-ui-doc 替代 eldoc, 前者还支持 mouse 和 cursor hover.
  (lsp-eldoc-enable-hover nil)
  (lsp-eldoc-render-all t)
  ;; 刷新高亮、lenses 和 links 的间隔。
  (lsp-idle-delay 0.2)
  ;; 退出最后一个 lsp buffer 时自动 kill lsp-server.
  (lsp-keep-workspace-alive nil)
  (lsp-file-watch-threshold 2000)
  (lsp-enable-file-watchers nil)
  ;; 关闭 folding。
  (lsp-enable-folding nil)
  ;; lsp 显示的 links 不准确且导致 treemacs 目录显示异常，故关闭。
  (lsp-enable-links nil)
  (lsp-enable-indentation nil)
  ;; flycheck 会在 modeline 展示检查结果, 故不需 lsp 再展示。
  (lsp-modeline-diagnostics-enable nil)
  ;; 不在 modeline 上显示 code-actions 信息。
  (lsp-modeline-code-actions-enable nil)
  (lsp-modeline-workspace-status-enable nil)
  (lsp-restart 'auto-restart)
  ;; 使用 projectile/project 来自动探测项目根目录。
  (lsp-auto-guess-root t)
  ;; 不对 imenu 结果进行排序.
  (lsp-imenu-sort-methods '(position))
  :init
  ;; 设置 lsp 使用 corfu 来进行补全。
  (defun my/lsp-mode-setup-completion ()
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(orderless)))
  :hook
  ((java-mode . lsp)
   (python-mode . lsp)
   (go-mode . lsp)
   ;;(yaml-mode . lsp)
   (js-mode . lsp)
   (web-mode . lsp)
   (tide-mode . lsp)
   (typescript-mode . lsp)
   (dockerfile-mode . lsp)
   (lsp-completion-mode . my/lsp-mode-setup-completion)
   (lsp-mode . lsp-enable-which-key-integration))
  :config
  (dolist (dir '("[/\\\\][^/\\\\]*\\.\\(json\\|html\\|pyc\\|class\\|log\\|jade\\|md\\)\\'"
                 "[/\\\\]resources/META-INF\\'"
                 "[/\\\\]vendor\\'"
                 "[/\\\\]node_modules\\'"
                 "[/\\\\]\\.settings\\'"
                 "[/\\\\]\\.project\\'"
                 "[/\\\\]\\.travis\\'"
                 "[/\\\\]bazel-*"
                 "[/\\\\]\\.cache"
                 "[/\\\\]\\.clwb$"))
    (push dir lsp-file-watch-ignored-directories))
  :bind
  (:map lsp-mode-map
        ("C-c f" . lsp-format-region)
        ("C-c e" . lsp-describe-thing-at-point)
        ("C-c a" . lsp-execute-code-action)
        ("C-c r" . lsp-rename)
        ([remap xref-find-definitions] . lsp-find-definition)
        ([remap xref-find-references] . lsp-find-references)))

(use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+end_src
+ 参考： [[https://github.com/minad/corfu/wiki][Configuring corfu for lsp-mode with orderless]]

consult-lsp 提供两个非常有用的命令：consult-lsp-symbols 和 consult-lsp-diagnostics：
+ consult-lsp-symbols: C-M-.
#+begin_src emacs-lisp
(use-package consult-lsp
  :demand
  :after (lsp-mode consult)
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src

lsp-ui 显示函数签名和帮助文档：
+ lsp-mode 和 lsp-ui 的特性可以[[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][参考这个页面]]来进行选择性的打开和关闭；
#+begin_src emacs-lisp
(use-package lsp-ui
  :after (lsp-mode flycheck)
  :demand
  :custom
  ;; 显示目录。
  (lsp-ui-peek-show-directory t)
  ;; 文件列表宽度。
  (lsp-ui-peek-list-width 80)
  ;; 光标移动到关键字时自动显示文档。
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-delay 0.1)
  ;;(lsp-ui-doc-position 'at-point)
  ;; 启用 flycheck 集成。
  (lsp-ui-flycheck-enable t)
  (lsp-ui-sideline-enable nil)
  (lsp-ui-peek-fontify 'never) ;; always, on-demand
  ;; 不使用 childframe, 否则 frame 带 awesome-tab 的 header.
  (lsp-ui-doc-use-childframe nil)
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))
#+end_src

lsp-treemacs:
#+begin_src emacs-lisp
;; lsp-treemacs 显示 lsp workspace 文件夹和 treemacs projects 。
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :config
  (setq lsp-treemacs-error-list-current-project-only t)
  (lsp-treemacs-sync-mode 1))
#+end_src

lsp-pyright:
#+begin_src emacs-lisp
(use-package lsp-pyright
  :after (python lsp-mode)
  :ensure-system-package
  (pyright . "npm update -g pyright")
  :init
  (defvar pyright-directory "~/.emacs.d/.cache/lsp/npm/pyright/lib")
  (if (not (file-exists-p pyright-directory))
      (make-directory pyright-directory t))
  (when (executable-find "python3")
    (setq lsp-pyright-python-executable-cmd "python3"))
  :hook
  (python-mode . (lambda () (require 'lsp-pyright) )))
#+end_src

* dockerfile

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure-system-package
  (docker-langserver . "npm install -g dockerfile-language-server-nodejs")
  :config
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

* vertico

与使用 awesome-tray  时，不能使用 buffer 风格，否则显示的效果不对。
#+begin_src emacs-lisp
  ;; 开启 vertico-multiform, 为 commands 或 categories 设置不同的显示风格。
  (vertico-multiform-mode)

  ;; 按照 completion category 设置显示风格, 优先级比 vertico-multiform-commands 低。
  ;; 为 file 设置 grid 模式, 为 grep 设置 buffer 模式。
  (setq vertico-multiform-categories
        '((file grid)
          (consult-grep buffer)))
#+end_src

* awesome-tab

#+begin_src emacs-lispe
(use-package awesome-tab
  :config
  (setq awesome-tab-label-fixed-length 18)
  (setq awesome-tab-height 130)
  ;; 不显示 tab 序号。
  (setq awesome-tab-show-tab-index nil)
  ;; HideRules, 需要先定义才生效。
  (defun awesome-tab-hide-tab (x)
    (let ((name (format "%s" x)))
      (or
       (string-prefix-p "*epc" name)
       (string-prefix-p "*helm" name)
       (string-prefix-p "*Compile-Log*" name)
       (string-prefix-p "*lsp" name)
       (string-prefix-p "*gopls" name)
       (string-prefix-p "*dashboard" name)
       (string-prefix-p "*Warnings" name)
       (string-prefix-p "*Messages" name)
       (string-prefix-p "*scratch" name)
       (string-prefix-p "*Help" name)
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name))))))
  (awesome-tab-mode t)
  (global-set-key (kbd "s-1") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-2") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-3") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-4") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-5") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-6") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-7") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-8") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-9") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-0") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "C-c j") 'awesome-tab-ace-jump))
#+end_src

* color-rg

#+begin_src emacs-lisp
(use-package color-rg
  :straight (:host github :repo "manateelazycat/color-rg"))
#+end_src

* corfu

Corfu 是文本补全框架，类似于 completion-at-point 和 company-mode 包, 相比 company 的主要优势是与 Emacs 集成的
更好, 更轻量:
1. Corfu 基于 Emacs 内置的 completion-at-point 实现, 任何使用 completion-at-point, completion-in-region 的地方
   都可以使用 Corfu 来提供候选列表;
2. 任何 completion-style 实现 (如 orderless) 都可以用来过滤候选者;

#+begin_src  emacs-lisp
(use-package corfu
  :disabled
  :demand
  :straight (corfu :host github :repo "minad/corfu" :files ("*.el" "extensions/*.el"))
  :init
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)) 
  :custom
  (corfu-min-width 80)
  (corfu-max-width corfu-min-width)
  (corfu-count 14)
  (corfu-scroll-margin 4)
  ;; 后续使用 corfu-doc 来显示文档，故关闭。
  (corfu-echo-documentation nil)
  ;; 使用候选者的历史位置来排序。
  :config
  (savehist-mode 1)
  (corfu-history-mode t)
  (add-to-list 'savehist-additional-variables 'corfu-history)
  (global-corfu-mode))

;; 总是在弹出菜单中显示候选者。
(setq completion-cycle-threshold nil)

;; 使用 TAB 来 indentation+completion(completion-at-point 默认是 M-TAB) 。
(setq tab-always-indent 'complete)

;; 在候选者右方显示文档。
(use-package corfu-doc
  :disabled
  :straight (corfu-doc :host github :repo "galeo/corfu-doc")
  :after (corfu)
  :hook (corfu-mode . corfu-doc-mode)
  :bind
  (:map corfu-map
        ("M-n" . corfu-doc-sroll-up)
        ("M-p" . corfu-doc-scroll-down))
  :custom
  (corfu-doc-delay 0.2)
  (corfu-doc-max-width 80)
  (corfu-doc-max-height 30))
#+end_src
+ Corfu: 支持 ~orderless~ 过滤候选列表, 使用 ~M-SPC~ 来插入多个过滤模式;
* capf

capf 给补全系统添加额外的候选者类型：
 #+begin_src emacs-lisp
(use-package cape
  :disabled
  :demand
  :straight (cape :host github :repo "minad/cape")
  :init
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  :config
  (setq cape-dabbrev-min-length 3)
  ;; 前缀长度达到 3 时才调用 CAPF，避免频繁调用自动补全。
  (cape-wrap-prefix-length #'cape-dabbrev 3))
 #+end_src

* treemacs

doom-themes:
#+begin_src emacs-lisp
;;:config
;; 为 treemacs 关闭 variable-pitch 模式，否则显示的较丑！
;; 必须在执行 doom-themes-treemacs-config 前设置该变量为 nil, 否则不生效。
(setq doom-themes-treemacs-enable-variable-pitch nil)
(doom-themes-treemacs-config)
(doom-themes-treemacs-theme "doom-colors")
#+end_src


#+begin_src emacs-lisp
(use-package treemacs
  :disabled
  :init
  (with-eval-after-load 'winum (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq
     treemacs-collapse-dirs                 3
     treemacs-deferred-git-apply-delay      0.1
     treemacs-display-in-side-window        t
     treemacs-eldoc-display                 t
     treemacs-file-event-delay              300
     treemacs-file-follow-delay             0.01
     treemacs-follow-after-init             t
     treemacs-git-command-pipe              ""
     treemacs-goto-tag-strategy             'refetch-index
     treemacs-indentation                   1
     treemacs-indentation-string            " "
     treemacs-is-never-other-window         t
     treemacs-max-git-entries               500
     treemacs-missing-project-action        'ask
     treemacs-no-png-images                 nil
     treemacs-no-delete-other-windows       t
     treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
     treemacs-position                      'left
     treemacs-recenter-distance             0.01
     treemacs-recenter-after-file-follow    t
     treemacs-recenter-after-tag-follow     t
     treemacs-recenter-after-project-jump   'always
     treemacs-recenter-after-project-expand 'on-distance
     treemacs-shownn-cursor                 t
     treemacs-show-hidden-files             t
     treemacs-silent-filewatch              nil
     treemacs-silent-refresh                nil
     treemacs-sorting                       'alphabetic-asc
     treemacs-select-when-already-in-treemacs 'stay
     treemacs-space-between-root-nodes      nil
     treemacs-tag-follow-cleanup            t
     treemacs-tag-follow-delay              1
     treemacs-width                         35
     treemacs-width-increment               5
     treemacs-width-is-initially-locked     nil
     treemacs-project-follow-cleanup        t
     imenu-auto-rescan                      t)
    (treemacs-resize-icons 11)
    (treemacs-follow-mode t)
    ;;(treemacs-tag-follow-mode t)
    ;;(treemacs-project-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (treemacs-indent-guide-mode t)
    (treemacs-git-mode 'deferred)
    (treemacs-hide-gitignored-files-mode nil))
  ;; 为远程 buffer 关闭 treemacs, 避免建立新连接耗时。
  (add-hook 'buffer-list-update-hook
            (lambda ()
              (when (file-remote-p default-directory)
                (require 'treemacs)
                (if (string-match "visible" (symbol-name (treemacs-current-visibility)))
                    (delete-window (treemacs-get-local-window))))))
  ;; 启动 ediff 前关闭 treemacs frame, 否则 Control-Panel 显示异常。
  (add-hook 'ediff-before-setup-hook
            (lambda ()
              (require 'treemacs)
              (if (string-match "visible" (symbol-name (treemacs-current-visibility)))
                  (delete-window (treemacs-get-local-window)) ) ))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-magit  
  :after (treemacs magit)
  :ensure t)

(use-package deadgrep
  :ensure-system-package (rg . ripgrep)
  :bind ("<f5>" . deadgrep))
#+end_src
+ 不启用 ~(treemacs-project-follow-mode t)~, 否则每次 treemacs 只会显示一个 project, 对于 Go 等有多个 module
  project 的情况不友好。不启用后，可以按需手动将 Go 依赖的 module project 加到当前 workspace 中。

* sis
#+begin_src emacs-lisp
(use-package sis
  :demand
  :disabled
  :ensure-system-package (macism . "brew tap laishulu/macism; brew install macism")
  :bind ("<f9>" . sis-switch)
  :config
  (add-to-list 'sis-prefix-override-keys "M-s")
  (add-to-list 'sis-prefix-override-keys "M-g")
  (add-to-list 'sis-prefix-override-keys "M-o")
  (sis-ism-lazyman-config "com.apple.keylayout.ABC" "com.sogou.inputmethod.sogou.pinyin")
  (setq sis-other-cursor-color "orange")
  (sis-global-cursor-color-mode t)
  ;; 开启  respect mode  模式。
  ;;(add-to-list 'sis-prefix-override-recap-triggers 'lsp-bridge-ref-mode)
  ;; (setq sis-prefix-override-buffer-disable-predicates
  ;;       (list 'minibufferp
  ;;             (;; lsp-bridge
  ;;              lambda (buffer)
  ;;              (sis--string-match-p "^\*lsp-bridge.*" (buffer-name buffer)))
  ;;             (;; magit
  ;;              lambda (buffer)
  ;;              (sis--string-match-p "^magit.*:" (buffer-name buffer)))
  ;;             (;; special buffer
  ;;              lambda (buffer)
  ;;              (and (sis--string-match-p "^\*" (buffer-name buffer))
  ;;                   (not (sis--string-match-p "^\*new\*"
  ;;                                             (downcase (buffer-name buffer))))
  ;;                   (not (sis--string-match-p "^\*scratch\*"
  ;;                                             (downcase (buffer-name buffer))))))))
  (sis-global-respect-mode t)
  ;; 开启  inline english  模式。
  (setq sis-inline-tighten-head-rule 0)
  (setq sis-inline-tighten-tail-rule 0)
  (sis-global-inline-mode t)
  ;; 开启  follow-context  模式。
  (sis-global-context-mode t)
  ;; 上下文探测。
  ;; (add-to-list 'sis-context-detectors (lambda (&rest _)
  ;;                                       (when (eq major-mode 'lsp-bridge-ref-mode)
  ;;                                         'english)))
  )
#+end_src
+ macism 为 mac 输入法切换工具。

* osx-dictionary
使用 sdcv 替代了 osx-dictionary.
  #+begin_src emacs-lisp

;; OSX 词典。
(use-package osx-dictionary
  :bind
  (("C-c d i" . osx-dictionary-search-input)
   ("C-c d w" . osx-dictionary-search-pointer))
  :config
  (use-package chinese-word-at-point :demand t)
  (setq osx-dictionary-use-chinese-text-segmentation t))
  #+end_src

* awesome-tray
#+begin_src emacs-lisp
;; 隐藏 Emacs 自带的 modeline, 使用 awesome-tray。
(use-package hide-mode-line
  :disabled
  :config
  (global-hide-mode-line-mode))

(use-package awesome-tray
  :demand
  :disabled
  :straight (:repo "manateelazycat/awesome-tray" :host github)
  :hook
  ;; emacs 启动完毕后再启动，这样可以替换掉 doom-theme 的 modeline, 避免显示两个。
  (after-init .  (lambda () (awesome-tray-mode)))
  :config
  ;; 显示更多的目录结构（默认为 2)。
  (setq awesome-tray-file-path-full-dirname-levels 4)
  ;; modeline 中添加 input-method 显示。
  (setq awesome-tray-active-modules '("location" "buffer-read-only" "file-path" "mode-name" "input-method" "date")))
#+end_src

* sort-tab
#+begin_src emacs-lisp
(use-package sort-tab
  :demand
  :straight (:repo "manateelazycat/sort-tab" :host github)
  :config
  (sort-tab-mode 1)
  (global-set-key (kbd "s-n") 'sort-tab-select-next-tab)
  (global-set-key (kbd "s-p") 'sort-tab-select-prev-tab)
  (global-set-key (kbd "s-0") 'sort-tab-select-visible-tab)
  (global-set-key (kbd "s-Q") 'sort-tab-close-all-tabs)
  (global-set-key (kbd "s-q") 'sort-tab-close-mode-tabs)
  (global-set-key (kbd "s-;") 'sort-tab-close-current-tab)
  ;; 设置 tab 颜色，M-x list-colors-display。
  (set-face-foreground 'sort-tab-current-tab-face "peru")
  ;; 不显示背景颜色。
  (set-face-background 'sort-tab-current-tab-face nil))
#+end_src

* theme
#+begin_src emacs-lisp
(use-package ef-themes
  :disabled
  :straight (ef-themes :host github :repo "protesilaos/ef-themes")
  :config
  ;; Disable all other themes to avoid awkward blending:
  (mapc #'disable-theme custom-enabled-themes))

;; 高亮光标移动到的行。
(use-package pulsar
  :disabled
  :straight (pulsar :host github :repo "protesilaos/pulsar")
  :config
  (setq pulsar-pulse t)
  (setq pulsar-delay 2)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow)
  (pulsar-global-mode 1))

(use-package modus-themes
  :disabled
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-region '(accented no-extend)
        modus-themes-hl-line '(underline accented)
        modus-themes-paren-match '(intense)
        modus-themes-links '(neutral-underline background)
        modus-themes-box-buttons '(variable-pitch flat faint 0.9)
        modus-themes-prompts '(intense bold)
        modus-themes-syntax '(alt-syntax)
        modus-themes-mixed-fonts t
        modus-themes-org-blocks 'gray-background ;; 'tinted-background
        modus-themes-headings '((t . (variable-pitch background overline rainbow semibold)))
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-title 1.33)
  ;; 关闭 variable-pitch-ui 和添加 padding, 否则 mode-line 右侧可能溢出。
  (setq modus-themes-variable-pitch-ui nil)
  (setq modus-themes-mode-line (quote (borderless (padding 4) (height 0.9))))
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  ;;:config
  ;;(modus-themes-load-vivendi) ;; 深色主题
  ;;(modus-themes-load-operandi) ;; 浅色主题
  )
#+end_src

* tree-sitter


#+begin_src emacs-lisp
(use-package tree-sitter
  :disabled
  :config
  (global-tree-sitter-mode)
  ;; 对于支持的语言（tree-sitter-major-mode-language-alist）使用
  ;; tree-sitter 提供的高亮来取代内置的、基于 font-lock 正则的低效高亮模式。
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs :after (tree-sitter))
#+end_src
+ 下载和安装各语言的语法 bundle 文件： =M-x tree-sitter-langs-install-grammars=
* sudo-edit
#+begin_src emacs-lisp
;; 当打开文件权限不足时，自动使用 sudo 打开该文件。
;; 关闭：会造成 tramp 远程编辑文件错误。
(use-package auto-sudoedit)
(add-hook 'find-file-hook #'(lambda () (require 'auto-sudoedit) (auto-sudoedit)))
#+end_src

* hideshow

打开 8MiB 左右 JSON 文件有严重性能问题：
#+begin_src emacs-lisp
(use-package hideshow
  :disabled
  :hook
  (prog-mode . hs-minor-mode)
  :bind
  ("C-<tab>" . hs-cycle)
  ("C-<iso-lefttab>" . hs-global-cycle)
  ("C-S-<tab>" . hs-global-cycle))

;; ref: https://karthinks.com/software/simple-folding-with-hideshow/
(defun hs-cycle (&optional level)
  (interactive "p")
  (let (message-log-max
        (inhibit-message t))
    (if (= level 1)
        (pcase last-command
          ('hs-cycle
           (hs-hide-level 1)
           (setq this-command 'hs-cycle-children))
          ('hs-cycle-children
           ;; TODO: Fix this case. `hs-show-block' needs to be
           ;; called twice to open all folds of the parent
           ;; block.
           (save-excursion (hs-show-block))
           (hs-show-block)
           (setq this-command 'hs-cycle-subtree))
          ('hs-cycle-subtree
           (hs-hide-block))
          (_
           (if (not (hs-already-hidden-p))
               (hs-hide-block)
             (hs-hide-level 1)
             (setq this-command 'hs-cycle-children))))
      (hs-hide-level level)
      (setq this-command 'hs-hide-level))))

(defun hs-global-cycle ()
    (interactive)
    (pcase last-command
      ('hs-global-cycle
       (save-excursion (hs-show-all))
       (setq this-command 'hs-global-show))
      (_ (hs-hide-all))))
#+end_src


* proxy

全局 socks5 代理：
+ Mac 自带的 curl 不支持 socks 代理, 需要安装 =brew install curl= 并设置 ~export
  PATH="/usr/local/opt/curl/bin:$PATH"~
+ [[https://emacstalk.github.io/post/007/][url-retrieve 使用 curl 作为后端实现]], 这样全局可使用 socks5 代理。
+ 需要添加 =--user-agent= 配置, 否则会被 Google 403 Forbidden;

  #+begin_src emacs-lisp
(setq my/socks-proxy "127.0.0.1:13659")
;;(setq my/socks-proxy "127.0.0.1:10000")

(defun proxy-socks-show ()
  "Show SOCKS proxy."
  (interactive)
  (if (bound-and-true-p socks-noproxy)
      (message "Current SOCKS%d proxy is %s:%s"
               (cadddr socks-server) (cadr socks-server) (caddr socks-server))
    (message "No SOCKS proxy")))

(defun proxy-socks-enable ()
  "Enable SOCKS proxy."
  (interactive)
  (require 'socks)
  (setq url-gateway-method 'socks
        socks-noproxy '("localhost"))
  (let* ((proxy (split-string my/socks-proxy ":"))
         (host (car proxy))
         (port (string-to-number (cadr proxy))))
    (setq socks-server `("Default server" ,host ,port 5)))
  (setenv "all_proxy" (concat "socks5h://" my/socks-proxy))
  (setenv "ALL_PROXY" (concat "socks5h://" my/socks-proxy))
  (proxy-socks-show))

(defun proxy-socks-disable ()
  "Disable SOCKS proxy."
  (interactive)
  (setq url-gateway-method 'native
        socks-noproxy nil
        socks-server nil)
  (setenv "all_proxy" "")
  (setenv "ALL_PROXY" "")
  (proxy-socks-show))

(defun proxy-socks-toggle ()
  "Toggle SOCKS proxy."
  (interactive)
  (if (bound-and-true-p socks-noproxy)
      (proxy-socks-disable)
    (proxy-socks-enable)))
  #+end_src


* proxy

#+begin_src emacs-lisp
;; 添加环境变量 export PATH="/usr/local/opt/curl/bin:$PATH"
(use-package emacs
  :straight (:type built-in)
  :ensure-system-package ("/usr/local/opt/curl/bin/curl" . "brew install curl"))

(setq my/socks-host "127.0.0.1")
(setq my/socks-port 13659)
(setq my/socks-proxy (format "socks5h://%s:%d" my/socks-host my/socks-port))

(use-package mb-url-http
  :demand
  :straight (mb-url :repo "dochang/mb-url")
  :commands (mb-url-http-around-advice)
  :init
  (require 'auth-source)
  (let ((credential (auth-source-user-and-password "api.github.com")))
    (setq github-user (car credential)
          github-password (cadr credential))
    (setq github-auth (concat github-user ":" github-password))
    (setq mb-url-http-backend 'mb-url-http-curl
          mb-url-http-curl-program "/usr/local/opt/curl/bin/curl"
          mb-url-http-curl-switches `("-k" "-x" ,my/socks-proxy
                                      ;;"--max-time" "300"
                                      ;;"-u" ,github-auth
                                      ;;"--user-agent" "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36"
                                      ))))

(defun proxy-socks-show ()
  "Show SOCKS proxy."
  (interactive)
  (when (fboundp 'cadddr)
    (if (bound-and-true-p socks-noproxy)
        (message "Current SOCKS%d proxy is %s:%d" 5 my/socks-host my/socks-port)
      (message "No SOCKS proxy"))))

(defun proxy-socks-enable ()
  "使用 socks 代理 url 访问请求。"
  (interactive)
  (require 'socks)
  (setq url-gateway-method 'socks
        socks-noproxy '("0.0.0.0" "localhost" "10.0.0.0/8" "172.0.0.0/8" "*cn" "*alibaba-inc.com" "*taobao.com" "*antfin-inc.com")
        socks-server `("Default server" ,my/socks-host ,my/socks-port 5))
  (setenv "all_proxy" my/socks-proxy)
  (proxy-socks-show)
  ;;url-retrieve 使用 curl 作为后端实现, 支持全局 socks5 代理。
  (advice-add 'url-http :around 'mb-url-http-around-advice))

(defun proxy-socks-disable ()
  "Disable SOCKS proxy."
  (interactive)
  (require 'socks)
  (setq url-gateway-method 'native
        socks-noproxy nil)
  (setenv "all_proxy" "")
  (proxy-socks-show))

(defun proxy-socks-toggle ()
  "Toggle SOCKS proxy."
  (interactive)
  (require 'socks)
  (if (bound-and-true-p socks-noproxy)
      (proxy-socks-disable)
    (proxy-socks-enable)))
#+end_src



* symbol-overlay

#+begin_src emacs-lisp
(use-package symbol-overlay
  :diminish
  :demand
  :functions
  (turn-off-symbol-overlay turn-on-symbol-overlay)
  :custom-face
  (symbol-overlay-default-face ((t (:inherit (region bold)))))
  :hook
  (((prog-mode yaml-mode) . symbol-overlay-mode)
   ;; (iedit-mode . turn-off-symbol-overlay)
   ;; (iedit-mode-end . turn-on-symbol-overlay)
   )
  :init
  (setq symbol-overlay-idle-time 0.1)
  ;;:config
  ;; ;; Disable symbol highlighting while selecting
  ;; (defun turn-off-symbol-overlay (&rest _)
  ;;   "Turn off symbol highlighting."
  ;;   (interactive)
  ;;   (symbol-overlay-mode -1))
  ;; (advice-add #'set-mark :after #'turn-off-symbol-overlay)

  ;; (defun turn-on-symbol-overlay (&rest _)
  ;;   "Turn on symbol highlighting."
  ;;   (interactive)
  ;;   (when (derived-mode-p 'prog-mode 'yaml-mode)
  ;;     (symbol-overlay-mode 1)))
  ;; (advice-add #'deactivate-mark :after #'turn-on-symbol-overlay)
  )

;; Symbol Overlay
(global-set-key (kbd "M-i") 'symbol-overlay-put)
(global-set-key (kbd "M-n") 'symbol-overlay-jump-next)
(global-set-key (kbd "M-p") 'symbol-overlay-jump-prev)
(global-set-key (kbd "M-N") 'symbol-overlay-switch-forward)
(global-set-key (kbd "M-P") 'symbol-overlay-switch-backward)
(global-set-key (kbd "M-c") 'symbol-overlay-remove-all)
;; (define-key symbol-overlay-map  (kbd "M-n") 'symbol-overlay-jump-next)
;; (define-key symbol-overlay-map  (kbd "M-p") 'symbol-overlay-jump-prev)
;; (define-key symbol-overlay-map  (kbd "M-N") 'symbol-overlay-switch-forward)
;; (define-key symbol-overlay-map  (kbd "M-P") 'symbol-overlay-switch-backward)
;; (define-key symbol-overlay-map  (kbd "M-c") 'symbol-overlay-remove-all)
#+end_src

* parens

#+begin_src emacs-lisp
(use-package awesome-pair
  :straight(awesome-pair :host github :repo "manateelazycat/awesome-pair")
  :config
  (dolist (hook (list
               'c-mode-common-hook
               'c-mode-hook
               'emacs-lisp-mode-hook
               'lisp-interaction-mode-hook
               'lisp-mode-hook
               'sh-mode-hook
               'makefile-gmake-mode-hook
               'python-mode-hook
               'js-mode-hook
               'go-mode-hook
               'css-mode-hook
               'minibuffer-inactive-mode-hook
               ))
  (add-hook hook '(lambda () (awesome-pair-mode 1)))))

;; 智能括号。
(use-package smartparens
  :disabled
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t))

#+end_src

* winner
使用内置的 tab-bar history 来代替：
#+begin_src emacs-lisp
(use-package winner
  :straight (:type built-in)
  :commands (winner-undo winner-redo)
  :hook (after-init . winner-mode)
  :init
  (setq winner-boring-buffers
        '("*Completions*"
          "*Compile-Log*"
          "*inferior-lisp*"
          "*helpful"
          "*lsp-help*"
          "*Fuzzy Completions*"
          "*Apropos*"
          "*Help*"
          "*cvs*"
          "*Buffer List*"
          "*Ibuffer*"
          "*esh command on file*")))
#+end_src

* tabspaces

#+begin_src emacs-lisp
(use-package tabspaces
  ;; use this next line only if you also use straight, otherwise ignore it. 
  :straight (:type git :host github :repo "mclear-tools/tabspaces")
  :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
  :commands (tabspaces-switch-or-create-workspace
             tabspaces-open-or-create-project-and-workspace)
  :custom
  (tabspaces-use-filtered-buffers-as-default t)
  (tabspaces-default-tab "Default")
  (tabspaces-remove-to-default t)
  (tabspaces-include-buffers '("*scratch*"))
  ;; sessions
  (tabspaces-session t)
  (tabspaces-session-auto-restore t))
  
#+end_src

* sort-tab


#+begin_src emacs-lisp
(use-package sort-tab
  :demand
  :disabled
  :straight (:repo "manateelazycat/sort-tab" :host github)
  :config
  (sort-tab-mode 1)
  (setq sort-tab-height 40)
  (global-set-key (kbd "s-n") 'sort-tab-select-next-tab)
  (global-set-key (kbd "s-p") 'sort-tab-select-prev-tab)
  (global-set-key (kbd "s-0") 'sort-tab-select-visible-tab)
  (global-set-key (kbd "s-Q") 'sort-tab-close-all-tabs)
  (global-set-key (kbd "s-q") 'sort-tab-close-mode-tabs)
  (global-set-key (kbd "s-;") 'sort-tab-close-current-tab)
  ;; 设置 tab 颜色，M-x list-colors-display。
  (set-face-foreground 'sort-tab-current-tab-face "peru")
  ;; 不显示背景颜色。
  (set-face-background 'sort-tab-current-tab-face nil))
#+end_src

* awesome-tab

#+begin_src emacs-lisp
(use-package awesome-tab
  :disabled
  :config
  (setq awesome-tab-label-fixed-length 20)
  (setq awesome-tab-height 100)
  ;; 不显示 tab 序号。
  (setq awesome-tab-show-tab-index nil)
  ;; 不显示 tab 的 buffer 名称, 需要先定义才生效。注意：有的 buffer 名称的 * 前有空格（如 Treemacs)。
  (defun awesome-tab-hide-tab (x)
    (let ((name (format "%s" x)))
      (or
       (string-prefix-p "*epc" name)
       (string-prefix-p "*helm" name)
       (string-prefix-p "*help" name)
       (string-prefix-p "*Compile-Log*" name)
       (string-prefix-p "*lsp" name)
       (string-prefix-p "*gopls" name)
       (string-prefix-p "*dashboard" name)
       (string-prefix-p "*Warnings" name)
       (string-prefix-p "*Messages" name)
       (string-prefix-p "*scratch" name)
       (string-prefix-p "*Help" name)
       (string-prefix-p "*vterm" name)
       (string-prefix-p " *lsp-bridge" name) ;; lsp-bridge
       (string-prefix-p " *acm-doc" name) ;; lsp-bridge
       (string-prefix-p " *Treemacs" name) ;; treemacs
       (and (string-prefix-p "magit" name)
            (not (file-name-extension name))))))
  (awesome-tab-mode t)
  (global-set-key (kbd "s-1") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-2") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-3") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-4") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-5") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-6") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-7") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-8") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-9") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-0") 'awesome-tab-select-visible-tab)
  (global-set-key (kbd "s-j") 'awesome-tab-ace-jump))
#+end_src



