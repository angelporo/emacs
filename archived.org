#+begin_src emacs-lisp :tangle no
;; 管理 minior mode
(use-package manage-minor-mode)
(defvar hidden-minor-modes '(whitespace-mode))

(use-package treemacs-projectile :after (treemacs projectile))
(use-package treemacs-magit :after (treemacs magit))

(use-package posframe-project-term
  :straight (posframe-project-term :host github :repo "zwpaper/posframe-project-term")
  :bind
  (("C-c t" . posframe-project-term-toggle)))

;; 还是 go-translate 提供的 bing 翻译较为准确
(use-package youdao-dictionary
  :bind
  (("C-c y" . youdao-dictionary-search-at-point))
  :init
  (setq url-automatic-caching t)
  (setq youdao-dictionary-use-chinese-word-segmentation t)
  :config
  ;; 使用 jieba 进行中文分词: pip install jieba
  (use-package chinese-word-at-point :demand t))

(use-package consult-dir
  :bind
  (("C-x C-d" . consult-dir)
   :map minibuffer-local-completion-map
   ("C-x C-d" . consult-dir)
   ("C-x C-j" . consult-dir-jump-file)))

(use-package posframe :demand)
(use-package vertico-posframe
  :straight (vertico-posframe :host github :repo "tumashu/vertico-posframe")
  :disabled
  :config
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8)
          ;;(alpha . 80)
          ))
  ;; 在光标位置的上方显示 posframe, 避免遮住光标下方的内容
  (defun my/posframe-poshandler-p0.5p0-to-f0.5p1 (info)
    (let ((x (car (posframe-poshandler-p0.5p0-to-f0.5f0 info)))
          ;; 第三个参数 t 表示 upward
          (y (cdr (posframe-poshandler-point-1 info nil t))))
      (cons x y)))
  (setq vertico-posframe-poshandler 'my/posframe-poshandler-p0.5p0-to-f0.5p1)
  (vertico-posframe-mode 1))

;; no-littering 会导致 recentf 等不工作, 故关闭.
(use-package no-littering
  :demand
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

(use-package tree-sitter
  :demand t
  :config
  (global-tree-sitter-mode)
  ;; 对于支持的语言（查看变量 tree-sitter-major-mode-language-alist）使用
  ;; tree-sitter 提供的高亮来取代内置的、基于 font-lock 正则的低效高亮模式。
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :demand)

(use-package grammatical-edit
  :demand
  :straight (grammatical-edit :host github :repo "manateelazycat/grammatical-edit")
  :config
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'minibuffer-inactive-mode-hook
                 ))
    (add-hook hook '(lambda () (grammatical-edit-mode 1))))
  (define-key grammatical-edit-mode-map (kbd "(") 'grammatical-edit-open-round)
  (define-key grammatical-edit-mode-map (kbd "[") 'grammatical-edit-open-bracket)
  (define-key grammatical-edit-mode-map (kbd "{") 'grammatical-edit-open-curly)
  (define-key grammatical-edit-mode-map (kbd ")") 'grammatical-edit-close-round)
  (define-key grammatical-edit-mode-map (kbd "]") 'grammatical-edit-close-bracket)
  (define-key grammatical-edit-mode-map (kbd "}") 'grammatical-edit-close-curly)
  (define-key grammatical-edit-mode-map (kbd "=") 'grammatical-edit-equal)

  (define-key grammatical-edit-mode-map (kbd "%") 'grammatical-edit-match-paren)
  (define-key grammatical-edit-mode-map (kbd "\"") 'grammatical-edit-double-quote)

  (define-key grammatical-edit-mode-map (kbd "SPC") 'grammatical-edit-space)
  (define-key grammatical-edit-mode-map (kbd "RET") 'grammatical-edit-newline)

  (define-key grammatical-edit-mode-map (kbd "M-o") 'grammatical-edit-backward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-d") 'grammatical-edit-forward-delete)
  (define-key grammatical-edit-mode-map (kbd "C-k") 'grammatical-edit-kill)

  (define-key grammatical-edit-mode-map (kbd "M-\"") 'grammatical-edit-wrap-double-quote)
  (define-key grammatical-edit-mode-map (kbd "M-[") 'grammatical-edit-wrap-bracket)
  (define-key grammatical-edit-mode-map (kbd "M-{") 'grammatical-edit-wrap-curly)
  (define-key grammatical-edit-mode-map (kbd "M-(") 'grammatical-edit-wrap-round)
  (define-key grammatical-edit-mode-map (kbd "M-)") 'grammatical-edit-unwrap)

  (define-key grammatical-edit-mode-map (kbd "M-p") 'grammatical-edit-jump-right)
  (define-key grammatical-edit-mode-map (kbd "M-n") 'grammatical-edit-jump-left)
  (define-key grammatical-edit-mode-map (kbd "M-:") 'grammatical-edit-jump-out-pair-and-newline)
  )

#+end_src

书签管理器:
#+begin_src emacs-lisp
(use-package ebuku
  :ensure-system-package (buku . "pip3 install buku")
  :config
  ;; 不限制结果
  (setq ebuku-results-limit 0))
#+end_src
+ =buku --ai= 导入 Firefox/Chrome 书签;
+ =M-x ebuku= : 浏览和编辑导入的书签, 点击 URL 使用 Mac 浏览器打开。

#+begin_src emacs-lisp :tangle no
(use-package company
  :bind
  (:map company-mode-map
        ([remap completion-at-point] . company-complete)
        :map company-active-map
        ([escape] . company-abort)
        ("C-p"     . company-select-previous)
        ("C-n"     . company-select-next)
        ("C-s"     . company-filter-candidates)
        ([tab]     . company-complete-common-or-cycle)
        ([backtab] . company-select-previous-or-abort)
        :map company-search-map
        ([escape] . company-search-abort)
        ("C-p"    . company-select-previous)
        ("C-n"    . company-select-next))
  :custom
  ;; trigger completion immediately.
  (company-idle-delay 0)
  (company-echo-delay 0)
  ;; allow input string that do not match candidate words
  ;; 开启后有大量不匹配的候选情况，故关闭
  ;;(company-require-match nil)
  ;; number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  ;; pop up a completion menu by tapping a character
  (company-minimum-prefix-length 1)
  (company-tooltip-limit 14)
  (company-tooltip-align-annotations t)
  ;; Only search the current buffer for `company-dabbrev' (a backend that
  ;; suggests text your open buffers). This prevents Company from causing
  ;; lag once you have a lot of buffers open.
  (company-dabbrev-other-buffers nil)
  ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
  ;; domain-specific words with particular casing.
  (company-dabbrev-ignore-case nil)
  ;; Don't downcase the returned candidates.
  (company-dabbrev-downcase nil)
  ;; 候选框宽度
  (company-tooltip-minimum-width 70)
  (company-tooltip-maximum-width 100)
  (company-global-modes '(not message-mode help-mode eshell-mode))
  ;; 补全后端
  (company-backends '(company-capf
                      (company-dabbrev-code company-keywords company-files)
                      company-dabbrev))
  :config
  ;; 高亮候选者（orderless 排序）
  (defun just-one-face (fn &rest args)
    (let ((orderless-match-faces [completions-common-part]))
      (apply fn args)))
  (advice-add 'company-capf--candidates :around #'just-one-face)
  (global-company-mode t))

(use-package company-emoji
  :demand t
  :after (company)
  :config
  (company-emoji-init)
  (add-to-list 'company-backends 'company-emoji))

(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :config
  (use-package restclient-test :diminish :hook (restclient-mode . restclient-test-mode))

  (with-eval-after-load 'company
    (use-package company-restclient
      :defines company-backends
      :init (add-to-list 'company-backends 'company-restclient))))

(use-package company-ansible
  :after (ansible)
  :config
  (add-hook 'ansible-hook (lambda() (add-to-list 'company-backends 'company-ansible))))
#+end_src

project 配置参考：
1. [[https://github.com/jiacai2050/dotfiles/blob/master/.config/emacs/i-basic.el][jiacai2050/dotfiles]]
2. [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-lisp/prot-project.el][protesilaos/dotfiles]]

#+begin_src emacs-lisp :tangle no
(use-package find-file-in-project
  :config
  ;; ffip adds `ffap-guess-file-name-at-point' automatically and it is crazy slow on TRAMP buffers.
  ;; https://github.com/mpereira/.emacs.d/#find-file-in-project
  (remove-hook 'file-name-at-point-functions 'ffap-guess-file-name-at-point))

;;类似于 consult-grep 和 consult-find, 但前后端都异步且支持 fuzzy 搜索。
(use-package affe
  :after (orderless)
  :ensure-system-package
  ((gfind . findutils)
   (fd . fd)
   (fzf . fzf)
   (rg . ripgrep))
  :bind
  (;; bind-c bindings (mode-specific-map)
   ("M-s g" . affe-grep)
   ("M-s f" . affe-find))
  :config
  (setq affe-count 200)
  ;; Configure Orderless
  (setq affe-regexp-function #'orderless-pattern-compiler
        affe-highlight-function #'orderless--highlight)
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key (kbd "M-.")))

(use-package project
  :after (vterm)
  :config
  (setq project-switch-commands
    '((?f "File" project-find-file)
          (?g "Grep" project-find-regexp)
          (?d "Dired" project-dired)
          (?b "Buffer" project-switch-to-buffer)
          (?q "Query replace" project-query-replace-regexp)
          (?v "VC dir" project-vc-dir)
          (?t "Vterm" vterm)))

  (defun my/project-try-local (dir)
    "Determine if DIR is a non-Git project.
DIR must include a .project file to be considered a project."
    (catch 'ret
      ;;(dolist (flag-file '(".project" "README.org" "README.md" "Makefile" "pom.xml" "go.mod" "project.clj"))
      (dolist (flag-file '(".project" ".project."))
    (when-let ((root (locate-dominating-file dir flag-file)))
          (throw 'ret (cons 'local root))))))

  (setq project-find-functions '(my/project-try-local project-try-vc))

  (cl-defmethod project-root ((project (head local)))
    (cdr project))

  (defun my/project-info ()
    (interactive)
    (message "%s" (project-current t)))

  (defun my/project-discover ()
    (interactive)
    (dolist (search-path '("~/codes/" "~/go/src/github.com/*" "~/go/src/k8s.io/*" "~/go/src/gitlab.*/*/*"))
      (dolist (file (file-expand-wildcards search-path))
    (message "-> %s" file)
    (when (file-directory-p file)
          (when-let ((pr (project-current nil file)))
            (project-remember-project pr)
            (message "add project %s..." pr))))))

  (defun my/project-add (dir)
    (interactive "DWhich dir:")
    (let* ((project-flag-file (expand-file-name ".project." dir)))
      (if-let ((pr (project-current nil dir)))
          (if (string-equal (project-root pr) dir)
              (project-remember-project pr)
            (progn
              (make-empty-file project-flag-file)
              (project-remember-project (cons 'local dir))))
    (progn
          (make-empty-file project-flag-file)
          (project-remember-project (cons 'local dir)))))
    (message "Add project %s..." dir))

  (defun my/project-remove ()
    "Remove project from `project--list' using completion."
    (interactive)
    (project--ensure-read-project-list)
    (let* ((projects project--list)
           (dir (completing-read "REMOVE project: " projects nil t)))
      (setq project--list (delete (assoc dir projects) projects))
      (project--write-project-list)))
  )

(require 'package)
(setq package-archives '(("celpa" . "https://celpa.conao3.com/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
;; activate all the packages (in particular autoloads)
(package-initialize)
;; fetch the list of packages available
(unless package-archive-contents (package-refresh-contents))
(setq package-native-compile t)

(setq use-package-always-ensure t
      use-package-always-demand t)
(setq use-package-verbose t)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-compute-statistics t)

;; 由于编译 emacs 29 时指定了 no title-bar, 所以不再需要这个配置了
(use-package ns-auto-titlebar
  :demand t
  :config
  (when (eq system-type 'darwin)
    (ns-auto-titlebar-mode)))

;; Mac native fullscreen 会导致白屏和左右滑动问题，故使用传统全屏模式。
;; Emacs 28 开启后不能正常 max-frame 或 fullscreen
(when (eq system-type 'darwin)
  (setq ns-use-native-fullscreen nil
        ns-use-fullscreen-animation nil))

;; Make cursor movement an order of magnitude faster
;; https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746
;; 会导致 buffer 部分 fontify 不准确
(setq fast-but-imprecise-scrolling 't)

(use-package origami
  :straight (origami :host github :repo "elp-revive/origami.el")
  :demand t
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

(use-package lsp-origami
  :after (lsp origami)
  :demand t
  :config
  (add-hook 'lsp-after-open-hook #'lsp-origami-try-enable))

(use-package emmet-mode
  :after(web-mode js2-mode)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
  (setq emmet-expand-jsx-className? t)
  ;; Make `emmet-expand-yas' not conflict with yas/mode
  (setq emmet-preview-default nil))

;; flycheck
;; 在当前窗口底部显示错误列表
(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (side            . bottom)
               (reusable-frames . visible)
               (window-height   . 0.33)))

(use-package modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend)
        modus-themes-variable-pitch-ui t
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-title 1.33)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; modus 要求切换主题时设置字体，否则 org code 字体不对。
  ;;(add-hook 'modus-themes-after-load-theme-hook #'my/faces)
  (modus-themes-load-operandi) ;; 浅色主题
  ;;(modus-themes-load-vivendi)  ;; 深色主题
  )

(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

(use-package mini-frame
  :disabled
  :config
  (setq x-gtk-resize-child-frames 'resize-mode)
  ;; 光标位置显示 minibuffer
  (setq mini-frame-show-parameters
        (lambda ()
          (let* ((info (posframe-poshandler-argbuilder))
                 (posn (posframe-poshandler-point-bottom-left-corner info))
                 (left (car posn))
                 (top (cdr posn)))
            `((left . ,left)
              (top . ,top)))))
  ;; 固定在 frame 顶部显式。
  ;;(custom-set-variables '(mini-frame-show-parameters '((top . 10) (width . 0.7) (left . 0.5)  (height . 10))))
  (mini-frame-mode))


(transient-mark-mode t)

(add-to-list 'default-frame-alist '(height . 600))
(add-to-list 'default-frame-alist '(width . 600))

;; That tells auth-source (the package responsible for retrieving and storing
;; passwords from the environment) to consult the keychain for your credentials
;; - instead of putting them into ~/.authinfo in plaintext
;; https://www.reddit.com/r/emacs/comments/ew75ib/comment/fg23tcj/?utm_source=share&utm_medium=web2x&context=3
(eval-after-load 'auth-source
  '(when (member window-system '(mac ns))
     (add-to-list 'auth-sources 'macos-keychain-internet)
     (add-to-list 'auth-sources 'macos-keychain-generic)))

;; buffer 智能分组（取代 ibuffer）
;; 显示 buffer 列表时会自动连接 TRAMP buffer, 可能会卡住。
(use-package bufler :config (global-set-key (kbd "C-x C-b") 'bufler))

;; 多光标编辑
(use-package iedit)

(defconst sys/macp (eq system-type 'darwin) "Are we running on a Mac system?")
(defconst sys/mac-x-p (and (display-graphic-p) sys/macp) "Are we running under X on a Mac system?")
(defconst sys/mac-ns-p (eq window-system 'ns) "Are we running on a GNUstep or Macintosh Cocoa display?")
(defconst sys/mac-cocoa-p (featurep 'cocoa) "Are we running with Cocoa on a Mac system?")
(defconst sys/mac-port-p (eq window-system 'mac) "Are we running a macport build on a Mac system?")

;; cnfont 会自动设置 hook，开启 cnfont 的情况下，不需要配置这个 hook
(add-hook 'emacs-startup-hook #'my/faces)

;; 不能在 load-theme 时执行这个函数，否则字体缩放有问题。
;; 这个函数只被 modus-theme 在切换主题时调用。
;;(advice-add #'load-theme :after #'my/faces)

;; (add-hook 'emacs-startup-hook
;;           (lambda () (load-theme 'doom-dracula t))
;;           'append)

;; Get rid of "For information about GNU Emacs..." message at startup, unless
;; we're in a daemon session where it'll say "Starting Emacs daemon." instead,
;; which isn't so bad.
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))

;; 中英文之间自动加空格
(use-package pangu-spacing
  :config
  ;; 只是在中英文之间显示空格
  (global-pangu-spacing-mode 1)
  ;; 保存时真正插入空格
  (setq pangu-spacing-real-insert-separtor t))

(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  ;;(eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :bind
  ("s-`" . eshell-toggle))

(use-package native-complete
  :custom
  (with-eval-after-load 'shell
    (native-complete-setup-bash)))

(use-package company-native-complete
  :after (company)
  :custom
  (add-to-list 'company-backends 'company-native-complete))

(use-package persp-mode
  :custom
  (persp-keymap-prefix (kbd "C-x p"))
  :config
  (persp-mode))

(use-package treemacs-persp
  :after (treemacs persp-mode)
  :config
  (treemacs-set-scope-type 'Perspectives))

;;lsp-treemacs 在 treemacs 显示文件的 symbol、errors 和 hierarchy：
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :config
  ;; bidirectional synchronization of lsp workspace folders and treemacs projects
  (lsp-treemacs-sync-mode 1))

;; minibuffer 自动补全时显示图标会导致 TRAMP 变慢，故关闭。
(use-package all-the-icons-completion
  :after (marginalia)
  :config
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

;; pyenv-mode 通过给项目设置环境变量 ~PYENV_VERSION~ 来达到指定 pyenv 环境的目的：
(use-package pyenv-mode
  ;;:after (projectile)
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  ;; (defun projectile-pyenv-mode-set ()
  ;;   (let ((project (projectile-project-name)))
  ;;     (if (member project (pyenv-mode-versions))
  ;;         (pyenv-mode-set project)
  ;;       (pyenv-mode-unset))))
  ;;(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  :bind
  ;; 防止和 org-mode 快捷键冲突
  (:map pyenv-mode-map ("C-c C-u") . nil)
  (:map pyenv-mode-map ("C-c C-s") . nil))

(use-package selectrum :init (selectrum-mode +1))
(use-package prescient  :config (prescient-persist-mode +1))
(use-package selectrum-prescient :init (selectrum-prescient-mode +1))

;;company-prescient 精准排序：
(use-package company-prescient
  :after (company prescient)
  :init (company-prescient-mode +1))

(use-package modus-themes
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend)
        modus-themes-variable-pitch-ui t
        modus-themes-variable-pitch-headings t
        modus-themes-scale-headings t
        modus-themes-scale-1 1.1
        modus-themes-scale-2 1.15
        modus-themes-scale-3 1.21
        modus-themes-scale-4 1.27
        modus-themes-scale-title 1.33)
  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; modus 要求切换主题时设置字体，否则 org code 字体不对。
  (add-hook 'modus-themes-after-load-theme-hook #'my/faces)
  ;;(modus-themes-load-operandi) ;; 浅色主题
  ;;(modus-themes-load-vivendi)  ;; 深色主题
  )

(defun my/faces  (&optional theme &rest _)
  (interactive)
  ;; Main typeface （英文字体）
  (set-face-attribute 'default nil :font "Iosevka SS14-14")
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "Iosevka SS14")
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "Iosevka SS14")

  (when (display-graphic-p)
    ;; 中文字体
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font
       (frame-parameter nil 'font)
       charset
       (font-spec :name "Sarasa Mono SC" :weight 'normal :slant 'normal :size 15.0)))
    ;; 设置字体缩放比例, 使字体对齐。
    (setq face-font-rescale-alist '(("Iosevka SS14" . 1.0)
                                    ("Sarasa Mono SC" . 1.0714285714285714)
                                    ("HanaMinB" . 1.1428571428571428)))))

;; cnfont 会自动设置字体和缩放，开启 cnfont 时不需要配置这个 hook 。而且这个只是
;; 很对特定字号的scale, 如果缩放屏幕就会出现中英文混乱的情况，所以最好使用
;; cnfonts
(add-hook 'emacs-startup-hook (lambda ()
                                ;; 只会对初始 frame 生效
                                (my/faces)
                                ;; 创建新 frame 时也生效
                                (add-to-list 'after-make-frame-functions
                                             (lambda (new-frame)
                                               (select-frame new-frame)
                                               (if window-system
                                                   (my/faces))))))

;; https://github.com/minad/mini-popup
;; https://raw.githubusercontent.com/minad/mini-popup/main/mini-popup.el
(use-package mini-popup
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp"
  :config
  ;; Configure a height function (Example for Vertico)
  (defun mini-popup-height-resize ()
    (* (1+ (min vertico--total vertico-count)) (default-line-height)))
  (defun mini-popup-height-fixed ()
    (* (1+ (if vertico--input vertico-count 0)) (default-line-height)))
  (setq mini-popup--height-function #'mini-popup-height-resize)

  ;; Disable the minibuffer resizing of Vertico (HACK)
  (advice-add #'vertico--resize-window :around
              (lambda (&rest args)
                (unless mini-popup-mode
                  (apply args))))

  ;; Ensure that the popup is updated after refresh (Consult-specific)
  (add-hook 'consult--completion-refresh-hook
            (lambda (&rest _) (mini-popup--setup)) 99)
  (mini-popup-mode t))

;; 键盘黏滞键
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global ".." 'ebuku)
  (key-chord-define-global ",," '(lamba ()(find-file "~/Downloads/history.json"))))

;; 画图
(use-package svg
  :ensure nil
  :load-path "/Users/zhangjun/.emacs.d/site-lisp")

;; 自动调整窗口大小
(use-package zoom
  :disabled
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(dired-mode markdown-mode ediff-mode))
  (zoom-ignored-buffer-names '("zoom.el" "init.el" "*Ediff Control Panel*"))
  (zoom-ignored-buffer-name-regexps '("^\\*calc" "^\\*[eE]diff.*"))
  (zoom-ignore-predicates (list (lambda () (< (count-lines (point-min) (point-max)) 20))))
  :config
  (zoom-mode t))

;; 使用 embark C-h 替换 which-key
;; which-key 会导致 ediff 的 gX 命令卡住，解决办法是向 Emacs 发送 USR2 信号
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.8))

;; org-msg 在回复消息时，只能看到回复引用的内容，而看不到消息本身，故不再使用。
(use-package org-msg
  :ensure t
  :disabled
  :config
  (setq mail-user-agent 'mu4e-user-agent)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt "\nHi%s,\n\n"
        org-msg-recipient-names '(("geekard@qq.com" . "zhangjun"))
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '((new		. (text html))
                                       (reply-to-html	. (text html))
                                       (reply-to-text	. (text)))
        org-msg-convert-citation t)
  (org-msg-mode)
  )

;;company-box 为候选者显示图标和帮助文档, 会导致 RIME 输入法提示时卡住, 故关闭。
(use-package company-box
  :after (company all-the-icons)
  :init
  ;;(setq company-box-doc-enable nil)
  (setq company-box-doc-delay 0.1)
  :hook (company-mode . company-box-mode))

;;origami 提供代码折叠功能，最新版本[[https://github.com/elp-revive/origami.el/issues/1][从 celpa 源安装]]：
;; 由于可以使用 consult-line 和 occur 来替代，所以不再使用。
(use-package origami
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
        ("o" . origami-open-node)
        ("O" . origami-open-node-recursively)
        ("c" . origami-close-node)
        ("C" . origami-close-node-recursively)
        ("a" . origami-toggle-node)
        ("A" . origami-recursively-toggle-node)
        ("R" . origami-open-all-nodes)
        ("M" . origami-close-all-nodes)
        ("v" . origami-show-only-node)
        ("k" . origami-previous-fold)
        ("j" . origami-forward-fold)
        ("x" . origami-reset)))

;; youdao
(defun my-youdao-dictionary-search-at-point ()
  "Search word at point and display result with `posframe', `pos-tip', or buffer."
  (interactive)
  (if (display-graphic-p)
      (youdao-dictionary-search-at-point-posframe)
    (youdao-dictionary-search-at-point)))

(with-no-warnings
  (defun my-youdao-dictionary--posframe-tip (string)
    "Show STRING using posframe-show."
    (unless (and (require 'posframe nil t) (posframe-workable-p))
      (error "Posframe not workable"))

    (let ((word (youdao-dictionary--region-or-word)))
      (if word
          (progn
            (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
              (let ((inhibit-read-only t))
                (erase-buffer)
                (youdao-dictionary-mode)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (insert string)
                (insert (propertize "\n" 'face '(:height 0.5)))
                (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
            (posframe-show youdao-dictionary-buffer-name
                           :position (point)
                           :left-fringe 16
                           :right-fringe 16
                           :posframe-width 100
                           :background-color (face-background 'tooltip nil t)
                           :internal-border-color (face-foreground 'font-lock-comment-face nil t)
                           :internal-border-width 1)
            (unwind-protect
                (push (read-event) unread-command-events)
              (progn
                (posframe-hide youdao-dictionary-buffer-name)
                (other-frame 0))))
        (message "Nothing to look up"))))

  (advice-add #'youdao-dictionary--posframe-tip
              :override #'my-youdao-dictionary--posframe-tip))

;;安装外置输入法切换工具 [[https://github.com/laishulu/macism#install][macism]]，
;;解决 Mac 切换输入法后必须输入一个字符才能生效的问题。同时系统的 “快捷键”->“选
;;择上一个输入法” 快捷键必须要开启，否则 macism
;;[[https://github.com/laishulu/macism/issues/2][会切换失败]]。必须在启用
;;=respect-mode= 之前设置 =sis-prefix-override-keys= 变量，否则变量不生效。
(use-package sis
  ;; mac 输入法选择
  :ensure-system-package (macism . "brew tap laishulu/macism; brew install macism")
  :config
  (sis-ism-lazyman-config "com.apple.keylayout.ABC" "com.sogou.inputmethod.sogou.pinyin")
  ;; 自动切换到英文的前缀快捷键
  (push "C-;" sis-prefix-override-keys)
  (push "M-o" sis-prefix-override-keys)
  (push "M-g" sis-prefix-override-keys)
  (push "M-s" sis-prefix-override-keys)
  (sis-global-context-mode nil)
  (sis-global-respect-mode t)
  (global-set-key (kbd "C-\\") 'sis-switch))

;; 快速跳转当前标记符
(use-package symbol-overlay
  :config
  (global-set-key (kbd "M-i") 'symbol-overlay-put)
  (global-set-key (kbd "M-n") 'symbol-overlay-jump-next)
  (global-set-key (kbd "M-p") 'symbol-overlay-jump-prev)
  (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
  (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
  :hook (prog-mode . symbol-overlay-mode))

;;isearch 与 rime [[https://github.com/DogLooksGood/emacs-rime/issues/21][不兼
;;容]]，会导致输入的中文不能候选，可以使用 phi-search 解决：
;; 注: occur 比 isearch 更好用，与 rime 兼容。
(use-package phi-search
  :after (rime)
  :config
  (global-set-key (kbd "C-s") 'phi-search)
  (global-set-key (kbd "C-r") 'phi-search-backward))

(defun my/disable-vertico (orig-fun &rest args)
  (print args)
  (apply orig-fun args)
  ;; (if (string-match ".*(ssh|scp):.*" args)
  ;;     (progn (vertico-mode -1)
  ;;            (apply orig-fun args))
  ;;   (progn (vertico-mode t)
  ;;          (apply orig-fun args))
  )
(advice-add 'find-file-noselect :around #'my/disable-vertico)

(defun my/time-advice (func-orig &rest r)
  ;;(print r)
  (apply func-orig r))
(setq my/completion-func-to-advise #'completion-all-completions)
(advice-add my/completion-func-to-advise :around #'my/time-advice)

(use-package mu4e-dashboard
  :straight (mu4e-dashboard :host github :repo "rougier/mu4e-dashboard"))

;;Make invisible parts of Org elements appear visible.
(use-package org-appear
  :custom
  (org-appear-autolinks t)
  :hook (org-mode . org-appear-mode))

;; 在 side-window 显示窗口，side-window 会一直显示，为 vterm mode 专用（不能最大化），
;; vterm-toggle-forward 和  'vterm-toggle-backward 也都显示在这个 side-window 中。
(setq vterm-toggle-fullscreen-p nil)
(add-to-list 'display-buffer-alist
             '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . bottom)
               (dedicated . t)
               (reusable-frames . visible)
               (window-height . 0.4)))

;; 增强窗口背景对比度
(use-package solaire-mode
  :demand
  :config (solaire-global-mode +1))

;; :config
;; (doom-modeline-def-modeline 'main
;;   ;; left-hand segment list, 去掉 remote-host，避免编辑远程文件时卡住。
;;   '(bar workspace-name window-number modals matches buffer-info buffer-position word-count parrot selection-info)
;;   ;; right-hand segment list，尾部增加空格，避免溢出。
;;   '(objed-state misc-info battery grip debug repl lsp minor-modes input-method major-mode process vcs checker " "))
#+end_src

#+begin_src emacs-lisp
(use-package ansible
  :after (yaml-mode)
  :config
  (add-hook 'yaml-mode-hook (lambda () (ansible 1))))

;; ansible-doc 使用系统的 ansible-doc 命令搜索文档
(use-package ansible-doc
  :ensure-system-package (ansible-doc . "pip install ansible")
  :after (ansible yasnippet)
  :config
  (add-hook 'ansible-hook (lambda() (ansible-doc-mode) (yas-minor-mode-on)))
  (define-key ansible-doc-mode-map (kbd "M-?") #'ansible-doc))
#+end_src
