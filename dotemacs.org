Emacs 配置
#+OPTIONS: toc:nil h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent :exports code
#+TOC: headlines 4

Last exported:  {{{modification-time(%Y-%m-%d %H:%M)}}}

* 软件源

使用清华大学的软件源镜像：
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://mirrors.ustc.edu.cn/elpa/melpa-stable/")
                         ("org" . "https://mirrors.ustc.edu.cn/elpa/org/")))
;; 加载已经安装的包。
(package-initialize)
;; 如果 package-archives cache 为空, 则从软件包源更新 cache.
(unless package-archive-contents (package-refresh-contents))
#+end_src

* =use-package=

我使用 =use-package= 来管理所有三方 Emacs 软件包, 需要先安装这个前置依赖包:
#+begin_src emacs-lisp
;; 如果没有安装 use-package 包, 则安装它。
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

* 环境变量

GUI 或 systemd 模式启动 Emaca 时，Emacs 有可能没有继承用户的 shell 环境变量，如
=PATH= ，导致有些软件包依赖的命令可能找不到。 =exec-path-from-shell= 包提供的
=exec-path-from-shell-variables= 变量可以配置要拷贝到 Emacs 环境的用户 shell 环境
变量列表：
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure
  :custom
  (exec-path-from-shell-check-startup-files nil)
  (exec-path-from-shell-variables '("PATH" "MANPATH" "GOPATH" "GOPROXY" "GOPRIVATE"))
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* 自动补全 company

company 为 Emacs 提供了自动补全框架, 它使用可插拔的前端和后端来显示候选信息。内
置的后端包括：Elisp, Clang, Semantic, Eclim, Ropemacs, Ispell, CMake, BBDB,
Yasnippet, dabbrev, etags, gtags, files, keywords 等。

通用的 CAPF 后端使用 Emacs 标准的 =completion-at-point-functions= 特性，可以和提供
补全函数的 major mode(如 emacs-lisp-mode, css-mode, nxml-mode 和 lsp-mode) 很好
协作。

#+begin_src emacs-lisp
  (use-package company
    :ensure :demand
    :bind
    (:map company-mode-map
          ([remap completion-at-point] . company-complete)
          :map company-active-map
          ([escape] . company-abort)
          ("C-p"     . company-select-previous)
          ("C-n"     . company-select-next)
          ("C-s"     . company-filter-candidates)
          ([tab]     . company-complete-common-or-cycle)
          ([backtab] . company-select-previous-or-abort)
          :map company-search-map
          ([escape] . company-search-abort)
          ("C-p"    . company-select-previous)
          ("C-n"    . company-select-next))
    :custom
    (company-idle-delay 0.3)
    (company-echo-delay 0.03)
    (company-show-numbers t)
    (company-minimum-prefix-length 1)
    (company-tooltip-limit 14)
    (company-tooltip-align-annotations t)
    ;; 为 code 启用 dabbrev
    (company-dabbrev-code-everywhere t)
    ;; 不启用其它 buffer 作为来源
    (company-dabbrev-other-buffers nil)
    ;; dabbrev 大小写敏感
    (company-dabbrev-ignore-case nil)
    (company-dabbrev-downcase nil)
    (company-dabbrev-code-ignore-case nil)
    (company-frontends '(company-pseudo-tooltip-frontend
                         company-echo-metadata-frontend))
    (company-backends '(company-capf
                        company-files
                        (company-dabbrev-code company-keywords)
                        company-dabbrev
                        company-yasnippet))
    (company-global-modes '(not erc-mode
                                message-mode
                                help-mode
                                gud-mode
                                shell-mode
                                eshell-mode))
    :config
    (global-company-mode t))
#+end_src  
+ =dabbrev-expand= is essentially a form of completion where you first type a
  couple of letters of a word and press M-/ . Emacs tries to complete the word
  by first looking at all the words in the current buffer, then in all other
  open buffers.

company-quickhelp 为 company 的候选者显示文档：
#+begin_src emacs-lisp
(use-package company-quickhelp
  :ensure :demand :after (company)
  :config
  (company-quickhelp-mode 1))
#+end_src
  
* 配置
#+begin_src emacs-lisp
(use-package iedit :ensure :demand)

(use-package goto-chg
  :ensure
  :config
  (global-set-key (kbd "C->") 'goto-last-change)
  (global-set-key (kbd "C-<") 'goto-last-change-reverse))

(use-package smartparens
  :ensure
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t))

(use-package expand-region :ensure :bind ("M-@" . er/expand-region))

(use-package avy
  :ensure
  :config
  (setq avy-all-windows nil
        avy-background t)
  :bind
  ("M-g c" . avy-goto-char-2)
  ("M-g l" . avy-goto-line))

;;(shell-command "rg --version || brew install ripgrep")
(use-package deadgrep :ensure :bind  ("<f5>" . deadgrep))

;;(shell-command "rg --version || brew install ripgrep")
(use-package xref
  :ensure
  :config
  ;; C-x p g (project-find-=regexp)
  (setq xref-search-program 'ripgrep))

(use-package ace-window
  :ensure
  :init
  ;; 使用字母来切换 window(默认是数字)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :config
  ;; 设置为 frame 后，会忽略 treemacs frame，否则打开两个 window 的情况下，会提
  ;; 示输入 window 编号。
  (setq aw-scope 'frame)
  ;; modeline 显示 window 编号
  (ace-window-display-mode +1)
  (global-set-key (kbd "M-o") 'ace-window))

;;(shell-command "mkdir -p ~/.emacs.d/snippets")
(use-package yasnippet
  :ensure :demand :after (lsp-mode company)
  :commands yas-minor-mode
  :config
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-global-mode 1))
  
(use-package flycheck
  :ensure
  :config
  (setq flycheck-highlighting-mode (quote columns))
  (setq flycheck-check-syntax-automatically '(save idle-change mode-enabled))
  (define-key flycheck-mode-map (kbd "M-g n") #'flycheck-next-error)
  (define-key flycheck-mode-map (kbd "M-g p") #'flycheck-previous-error)
  :hook
  (prog-mode . flycheck-mode))

(use-package highlight-indent-guides
  :ensure :demand :after (python yaml-mode web-mode)
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'stack)
  (highlight-indent-guides-delay 0.1)
  :config
  (add-hook 'python-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'web-mode-hook 'highlight-indent-guides-mode))
#+end_src

* rime

#+begin_src emacs-lisp
(use-package rime
  :ensure :demand :after (which-key)
  :custom
  (rime-user-data-dir "~/Library/Rime/")
  (rime-librime-root "~/.emacs.d/librime/dist")
  (rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include")
  :bind
  ( :map rime-active-mode-map
         ;; 强制切换到英文模式，直到按回车
         ("M-j" . 'rime-inline-ascii)
         :map rime-mode-map
         ;; 中英文切换
         ("C-$" . 'rime-send-keybinding)
         ;; 中英文标点切换
         ("C-." . 'rime-send-keybinding)
         ;; 全半角切换
         ("C-," . 'rime-send-keybinding)
         ;; 输入法菜单
         ("C-!" . 'rime-send-keybinding)
         ;; 强制使用中文模式
         ("M-j" . 'rime-force-enable))
  :config
  ;; Emacs will automatically set default-input-method to rfc1345 if locale is
  ;; UTF-8. https://github.com/purcell/emacs.d/issues/320
  (add-hook 'after-init-hook (lambda () (setq default-input-method "rime")))
  ;; 在开启输入法的情况下，modline 输入法图标是否高亮来区分中文或英文状态中文
  (setq mode-line-mule-info '((:eval (rime-lighter))))
  ;; Emacs 不支持 Shift 键切换输入法：
  ;; https://github.com/DogLooksGood/emacs-rime/issues/130所以下面的配置不生效：
  ;; (setq rime-inline-ascii-trigger 'shift-l)
  (setq rime-disable-predicates
        '(rime-predicate-ace-window-p
          rime-predicate-evil-mode-p
          rime-predicate-hydra-p
          rime-predicate-which-key-activate-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-space-after-cc-p
          rime-predicate-punctuation-after-space-cc-p
          rime-predicate-prog-in-code-p
          rime-predicate-after-ascii-char-p
          ))
   (defun rime-predicate-which-key-activate-p ()
     which-key--automatic-display)
  (setq rime-posframe-properties
        (list :font "Sarasa Gothic SC"
              :internal-border-width 10))
  (setq rime-show-candidate 'posframe))
#+end_src

isearch 与 rime 不兼容，通过 phi-search 解决，https://github.com/DogLooksGood/emacs-rime/issues/21
#+begin_src  emacs-lisp
(use-package phi-search
  :ensure :after (rime)
  :config
  (global-set-key (kbd "C-s") 'phi-search)
  (global-set-key (kbd "C-r") 'phi-search-backward))
#+end_src

RIME 输入法自定义缺省配置(拷贝到 ~/Library/Rime 目录下)
#+begin_src yaml :tangle default.custom.yaml.new
patch:
  schema_list:
    - schema: clover  # 使用 clover 输入法方案
  menu/page_size: 9
  ascii_composer/good_old_caps_lock: true
  ascii_composer/switch_key:
    Caps_Lock: commit_code                    
    Shift_L: inline_ascii
    Shift_R: commit
    Control_L: commit_code
    Control_R: commit_code
  switcher/hotkeys:
    - "Control+grave"
    - "Control+Shift+grave"
    - F4
    - "Control+exclam"  # 增加使用 C-! 快捷键来调出输入法菜单
  key_binder/bindings:
    - { when: composing, accept: ISO_Left_Tab, send: Page_Up }
    - { when: composing, accept: Shift+Tab, send: Page_Up }
    - { when: composing, accept: Tab, send: Page_Down }     
    - { when: paging, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }
    - { when: paging, accept: bracketleft, send: Page_Up }
    - { when: has_menu, accept: bracketright, send: Page_Down }
    - { when: always, accept: "Control+dollar", toggle: ascii_mode}  # 中英文切换
    - { when: always, accept: "Control+period", toggle: ascii_punct} # 中英文标点切换
    - { when: always, accept: "Control+comma", toggle: full_shape}   # 全角/半角切换
    # 更多快捷键参考: https://github.com/Iorest/rime-setting/blob/master/default.custom.yaml
#+end_src

三叶草输入方案(clover) 配置(拷贝到 ~/Library/Rime 目录下):
#+begin_src yaml :tangle clover.custom.yaml.new
patch:
  switches:
  - name: zh_simp_s2t
    reset: 0
    states: [ 简, 繁 ]
  - name: emoji_suggestion
    reset: 0   # 不提示输出 emoji 符号
    states: [ "🈚️️\uFE0E", "🈶️️\uFE0F" ]
  - name: symbol_support
    reset: 0 # 安装包中默认为 1, 必须设置为 0, 否则激活输入法后，emacs 卡死
    states: [ "无符", "符" ]
  - name: ascii_punct
    reset: 0
    states: [ 。，, ．， ]
  - name: full_shape
    reset: 0
    states: [ 半, 全 ]
  - name: ascii_mode
    reset: 0
    states: [ 中, 英 ]
  speller:
    algebra:
    - erase/^xx$/                      # 第一行保留
    - derive/^([zcs])h/$1/             # zh, ch, sh => z, c, s
    - derive/^([zcs])([^h])/$1h$2/     # z, c, s => zh, ch, sh
    - derive/^n/l/                     # n => l
    - derive/^l/n/                     # l => n
    - derive/([ei])n$/$1ng/            # en => eng, in => ing
    - derive/([ei])ng$/$1n/            # eng => en, ing => in
    - derive/ao$/oa/       # oa = ao
    - derive/([iu])a(o|ng?)$/a$1$2/    # aio = iao; aing = iang; aung = uang
    - derive/([aeiou])ng$/$1gn/   # gn = ng
    - derive/un$/uen/    # uen = un
    - derive/ui$/uei/    # uei = ui
    - derive/iu$/iou/    # iou = ui
    - derive/tie$/tei/   # tei = tie
    - derive/i$/ii/      # ii = i
    - derive/u$/uu/      # ui = u
#+end_src

* magit
#+begin_src emacs-lisp
(use-package magit
  :ensure
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(setq ediff-diff-options "-w" ;; 忽略空格
      ediff-split-window-function 'split-window-horizontally) 

(use-package git-link
  :ensure :defer
  :config
  (global-set-key (kbd "C-c g l") 'git-link)
  (setq git-link-use-commit t))
#+end_src

* python
#+begin_src emacs-lisp
;;(shell-command "which pyenv &>/dev/null || brew install --HEAD pyenv")
;;(shell-command "which pyenv-virtualenv &>/dev/null || brew install --HEAD pyenv-virtualenv")
(use-package pyenv-mode
  :ensure :demand :after (projectile)
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  (defun projectile-pyenv-mode-set ()
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))
  (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  :bind
  ;; 防止和 org-mode 快捷键冲突
  (:map pyenv-mode-map ("C-c C-u") . nil)
  (:map pyenv-mode-map ("C-c C-s") . nil))

(use-package python
  :ensure :demand :after (pyenv-mode)
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "")
  (python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
  (python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")
  (python-shell-completion-setup-code "from IPython.core.completerlib import module_completion")
  (python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
  :hook
  (python-mode . (lambda ()
                   (setq indent-tabs-mode nil)
                   (setq tab-width 4)
                   (setq python-indent-offset 4))))

;;(shell-command "mkdir -p ~/.emacs.d/.cache/lsp/npm/pyright/lib")
(use-package lsp-pyright
  :ensure :demand :after (python)
  :hook (python-mode . (lambda () (require 'lsp-pyright) (lsp))))
#+end_src

* java
默认将 lsp java server 安装到 ~/.emacs.d/.cache/lsp/eclipse.jdt.ls 目录。

手动安装 lombok: 
#+begin_src shell :results none
mvn dependency:get -DrepoUrl=http://download.java.net/maven/2/ -DgroupId=org.projectlombok -DartifactId=lombok -Dversion=1.18.6
#+end_src


#+begin_src emacs-lisp
(use-package lsp-java
  :ensure :demand :after (lsp-mode company)
  :init
  ;; 指定运行 jdtls 的 java 程序
  (setq lsp-java-java-path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
  ;; 指定 jdtls 编译源码使用的 jdk 版本（默认是启动 jdtls 的 java 版本）。
  ;; https://marketplace.visualstudio.com/items?itemName=redhat.java
  ;; 查看所有 java 版本：/usr/libexec/java_home -verbose
  (setq lsp-java-configuration-runtimes
        '[(:name "Java SE 8" :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home" :default t)
          (:name "Java SE 11.0.9" :path "/Library/Java/JavaVirtualMachines/jdk-11.0.9.jdk/Contents/Home")
          (:name "Java SE 15.0.1" :path "/Library/Java/JavaVirtualMachines/jdk-15.0.1.jdk/Contents/Home")])
  ;; jdk11 不支持 -Xbootclasspath/a: 参数。
  (setq lsp-java-vmargs
        (list "-noverify" "-Xmx2G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication"
              (concat "-javaagent:" (expand-file-name "~/.m2/repository/org/projectlombok/lombok/1.18.6/lombok-1.18.6.jar"))))
  :hook (java-mode . lsp)
  :config
  (use-package dap-mode :ensure :disabled :after (lsp-java) :config (dap-auto-configure-mode))
  (use-package dap-java :ensure :disabled))
#+end_src

* golang
安装最新的 gopls:
#+begin_src shell :results none
gopls version &>/dev/null || GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+end_src

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure :demand :after (lsp-mode)
    :init
    (defun lsp-go-install-save-hooks ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t))
    :custom
    (lsp-gopls-staticcheck t)
    (lsp-gopls-complete-unimported t)
    :hook
    (go-mode . lsp-go-install-save-hooks)
    :config
    (lsp-register-custom-settings
     `(("gopls.completeUnimported" t t)
       ("gopls.experimentalWorkspaceModule" t t)
       ("gopls.allExperiments" t t))))
#+end_src
+ gopls 的有些变量可以通过 setq 来设置，如 (setq lsp-gopls-use-placeholders
  nil), 详细参考 [[https://github.com/emacs-lsp/lsp-mode/blob/master/clients/lsp-go.el][lsp-go]] . 有些环境变量需要通过 =lsp-register-custom-settings= 来设
  置;
+ 需要开启 =gopls.experimentalWorkspaceModule=, 否则在打开相应 module 时提示 
#+begin_quote
emacs errors loading workspace: You are working in a nested module. Please open it as a separate workspace folder. Learn more:
#+end_quote

* markdown
multimarkdown 实现将 markdown 转换为 html 进行 preview，结合 xwidget webkit 可以
自动打开预览页面。
#+begin_src shell :results none
multimarkdown --version &>/dev/null || brew install multimarkdown
#+end_src

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure
  :commands (markdown-mode gfm-mode)
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown"))
#+end_src

* dockerfile

#+begin_src shell :results none
which dockerfile-language-server-nodejs &>/dev/null || npm install -g dockerfile-language-server-nodejs &>/dev/null
#+end_src

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure
    :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

* ansible
#+begin_src emacs-lisp  
  (use-package ansible
    :ensure :after (yaml-mode)
    :config
    (add-hook 'yaml-mode-hook '(lambda () (ansible 1))))
  
  (use-package company-ansible
    :ensure :after (ansible company)
    :config
    (add-hook 'ansible-hook
              (lambda()
                (add-to-list 'company-backends 'company-ansible))))
  
  ;; ansible-doc 使用系统的 ansible-doc 命令搜索文档
  ;; (shell-command "pip install ansible")
  (use-package ansible-doc
    :ensure :after (ansible yasnippet)
    :config
    (add-hook 'ansible-hook
              (lambda()
                (ansible-doc-mode) (yas-minor-mode-on)))
    (define-key ansible-doc-mode-map (kbd "M-?") #'ansible-doc))
#+end_src

* web
** typescript
#+begin_src emacs-lisp  
  (defun my/use-eslint-from-node-modules ()
  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
    (let* ((root (locate-dominating-file (or (buffer-file-name) default-directory) "node_modules"))
           (eslint (and root (expand-file-name "node_modules/eslint/bin/eslint.js" root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  
  ;; (shell-command "which npm &>/dev/null || brew install npm &>/dev/null")
  (defun my/setup-tide-mode ()
    "Use hl-identifier-mode only on js or ts buffers."
    (when (and (stringp buffer-file-name)
               (string-match "\\.[tj]sx?\\'" buffer-file-name))
      (tide-setup)
      (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
      (tide-hl-identifier-mode +1)))
  
  ;; for .ts and .tsx file
  (use-package typescript-mode
    :ensure :demand :after (flycheck)
    :init
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescript-mode))
    :hook
    ((typescript-mode . my/setup-tide-mode))
    :config
    (flycheck-add-mode 'typescript-tslint 'typescript-mode)
    (setq typescript-indent-level 2))
#+end_src

tide 是 typescript/javascript 交互式开发环境，支持 js-mode（Emacs 27 内置）、
js2-mode、web-mode（编辑模板文件，如 HTML、Go Template等）、typescript-mode。

通过调用 ts-ls(npm install -g typescript-language-server)语言服务器，结合company
和 lsp 为 js/ts 提供代码补全和导航。

jsts-ls(javascript-typescript-stdio) 不再维护了：
https://github.com/sourcegraph/javascript-typescript-langserver

#+begin_src  emacs-lisp
  (use-package tide
    :ensure :demand :after (typescript-mode company flycheck)
    :hook ((before-save . tide-format-before-save)))
  ;; 开启 tsserver 的 debug 日志模式
  (setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file /tmp/tss.log"))
#+end_src
** javascript
js-mode (Emacs 27 内置) 和 js2-mode （js-mode 的增强，主要是 jsx 相关）用于编辑
.js 和 .jsx 文件。

js-mode in Emacs 27 includes full support for syntax highlighting and indenting
of JSX syntax. The currently recommended solution is to install Emacs 27 and use
js-mode as the major mode. To make use of the JS2 AST and the packages that
integrate with it, we recommend js2-minor-mode.
https://github.com/mooz/js2-mode#react-and-jsx

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure :demand :after (tide)
    :config
    ;; js-mode-map 将 M-. 绑定到 js-find-symbol, 没有使用 tide 和 lsp, 所以需要解
    ;; 绑。这样 M-. 被 tide 绑定到 tide-jump-to-definition.
    (define-key js-mode-map (kbd "M-.") nil)
    ;; 如上所述, 使用 Emacs 27 自带的 js-mode major mode 来编辑 js 文件。
    ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js-mode-hook 'js2-minor-mode)
    ;; 为 js/jsx 文件启动 tide.
    (add-hook 'js-mode-hook 'my/setup-tide-mode)
    ;; disable jshint since we prefer eslint checking
    (setq-default flycheck-disabled-checkers
                  (append flycheck-disabled-checkers
                          '(javascript-jshint)))
    (flycheck-add-mode 'javascript-eslint 'js-mode)
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
    (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode)))
#+end_src

** web-mode
web-mode 指用于编辑 html/css/jinja2/gotmpl/tmpl 等模板文件。不用于编辑
js/jsx/ts/tsx 等类型文件。

#+begin_src  emacs-lisp
  (use-package web-mode
    :ensure :demand :after (tide)
    :custom
    (web-mode-enable-auto-pairing t)
    (web-mode-enable-css-colorization t)
    :config
    (setq web-mode-markup-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-code-indent-offset 4
          web-mode-enable-auto-quoting nil
          web-mode-enable-block-face t
          web-mode-enable-current-element-highlight t)
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.jinja2?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tmpl\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.gotmpl\\'" . web-mode)))
#+end_src
** dap-mode  
#+begin_src  emacs-lisp
  (use-package dap-mode
    :ensure :demand
    :config
    (dap-auto-configure-mode 1)
    (require 'dap-chrome))
#+end_src
+  执行 M-x dap-chrome-setup 安装 VSCode Chrome Debug Extension.
* yaml  

#+begin_src shell :results none
which yaml-language-server &>/dev/null || npm install -g yaml-language-server &>/dev/null
#+end_src

#+begin_src  emacs-lisp
  (use-package yaml-mode
    :ensure
    :hook
    (yaml-mode . (lambda () (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))
#+end_src

* lsp
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure 
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-delay 0.1)
  (lsp-ui-flycheck-enable t)
  (lsp-ui-sideline-enable nil)
  :config
  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

(use-package lsp-mode
  :ensure :demand :after (flycheck)
  :hook
  (java-mode . lsp)
  (python-mode . lsp)
  (go-mode . lsp)
  ;;(yaml-mode . lsp)
  (web-mode . lsp)
  (js-mode . lsp)
  (tide-mode . lsp)
  (typescript-mode . lsp)
  (dockerfile-mode . lsp)
  (lsp-mode . lsp-enable-which-key-integration)
  :custom
  ;; lsp 显示的 links 不准确，而且会导致 treemacs 目录显示异常，故关闭。
  ;; https://github.com/hlissner/doom-emacs/issues/2911
  ;; https://github.com/Alexander-Miller/treemacs/issues/626
  (lsp-enable-links nil)
  ;; 不在 modeline 上显示 code-actions 信息
  (lsp-modeline-code-actions-enable nil)
  (lsp-keymap-prefix "C-c l")
  (lsp-auto-guess-root t)
  (lsp-prefer-flymake nil)
  (lsp-diagnostic-package :flycheck)
  (lsp-completion-provider :capf)
  (lsp-enable-snippet nil)
  ;; 开启后，会用 minibuffer 显示文档，占用太多屏幕空间
  ;(lsp-eldoc-render-all nil)
  ;; 使用 lsp-describ-things-at-point(绑定到 C-c d) 显示详情
  (lsp-eldoc-enable-hover nil)
  ;; 显示函数签名
  (lsp-signature-auto-activate t)
  (lsp-signature-doc-lines 2)
  ;; 增大同 LSP 服务器交互时的读取文件的大小
  (read-process-output-max (* 1024 1024 2))
  (lsp-idle-delay 0.5)
  ;; 开启 log-io 会极大影响性能
  (lsp-log-io nil) 
  (lsp-keep-workspace-alive nil)
  (lsp-enable-file-watchers nil)
  (lsp-file-watch-ignored '(
    "[/\\\\][^/\\\\]*\\.\\(json\\|html\\|pyc\\|class\\|log\\|jade\\|md\\)\\'"
    ; java
    "[/\\\\]resources/META-INF\\'"
    "[/\\\\]src/test\\'"
    ; SCM tools
    "[/\\\\]\\.git\\'"
    "[/\\\\]\\.github\\'"
    "[/\\\\]\\.hg\\'"
    "[/\\\\]\\.bzr\\'"
    "[/\\\\]_darcs\\'"
    "[/\\\\]\\.svn\\'"
    "[/\\\\]_FOSSIL_\\'"
    ; IDE tools
    "[/\\\\]\\.idea\\'"
    "[/\\\\]\\.ensime_cache\\'"
    "[/\\\\]\\.eunit\\'"
    ; Others
    "[/\\\\]node_modules\\'"
    "[/\\\\]vendor\\'"
    "[/\\\\]\\.fslckout\\'"
    "[/\\\\]\\.tox\\'"
    "[/\\\\]\\.stack-work\\'"
    "[/\\\\]\\.bloop\\'"
    "[/\\\\]\\.metals\\'"
    "[/\\\\]target\\'"
    "[/\\\\]\\.settings\\'"
    "[/\\\\]\\.project\\'"
    ; Autotools output
    "[/\\\\]\\.travis\\'"
    "[/\\\\]\\.deps\\'"
    "[/\\\\]build-aux\\'"
    "[/\\\\]autom4te.cache\\'"
    "[/\\\\]\\.reference\\'"))
  :config
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  (setq lsp-completion-enable-additional-text-edit nil)
  :bind (:map lsp-mode-map
              ("C-c f" . lsp-format-region)
              ("C-c d" . lsp-describe-thing-at-point) 
              ("C-c a" . lsp-execute-code-action)
              ("C-c r" . lsp-rename)))

(use-package lsp-treemacs
  :ensure :after (lsp-mode treemacs)
  :config
  (lsp-treemacs-sync-mode 1)
  :commands
  lsp-treemacs-errors-list)
#+end_src

* misc
#+begin_src emacs-lisp
(setq  recentf-max-menu-items 100
       recentf-max-saved-items 100
       ;; 当 bookmark 发生变化时自动保存（默认是 Emacs 正常退出时保存）
       bookmark-save-flag 1
       ;; pdf 转为 png 时使用更高分辨率（默认 90）
       doc-view-resolution 144
       ring-bell-function 'ignore
       byte-compile-warnings '(cl-functions)
       confirm-kill-emacs #'y-or-n-p
       ad-redefinition-action 'accept
       vc-follow-symlinks t
       large-file-warning-threshold nil
       ;; 自动根据 window 大小显示图片
       image-transform-resize t
       grep-highlight-matches t
       ns-pop-up-frames nil)

(setq-default  line-spacing 1
               ;; fill-column 的值应该小于 visual-fill-column-width，
               ;; 否则居中显示时行内容会过长而被隐藏；
               fill-column 80
               comment-fill-column 0
               tab-width 4
               indent-tabs-mode nil
               debug-on-error nil
               message-log-max t
               load-prefer-newer t
               ad-redefinition-action 'accept)

(fset 'yes-or-no-p 'y-or-n-p)
(auto-image-file-mode t)
(winner-mode t)
;; 开启 recentf-mode 后，selectrum 和 consult 切换 buffer 时明显变慢。
;;(recentf-mode +1)

;; gcmh
(setq gc-cons-threshold most-positive-fixnum)
(defvar hidden-minor-modes '(whitespace-mode))
(use-package gcmh
  :ensure :demand
  :init
  (gcmh-mode))

(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] (lambda () (interactive) (scroll-down 1)))
  (global-set-key [mouse-5] (lambda () (interactive) (scroll-up 1)))
  (setq mouse-sel-mode t
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse 't)
  (mouse-avoidance-mode 'animate)
  ;; 关闭文件选择窗口
  (setq use-file-dialog nil
        use-dialog-box nil)
  ;; 平滑滚动
  (setq scroll-step 1
        scroll-margin 3
        next-screen-context-lines 5
        scroll-preserve-screen-position t
        scroll-conservatively 10000)
  ;; 支持 Emacs 和外部程序的粘贴
  (setq x-select-enable-clipboard t
        select-enable-primary t
        select-enable-clipboard t
        mouse-yank-at-point t))

(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)

;;(shell-command "mkdir -p ~/.emacs.d/backup")
(defvar backup-dir (expand-file-name "~/.emacs.d/backup/"))
(setq backup-by-copying t
      backup-directory-alist (list (cons ".*" backup-dir))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

;;(shell-command "mkdir -p ~/.emacs.d/autosave")
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq auto-save-list-file-prefix autosave-dir
      auto-save-file-name-transforms `((".*" ,autosave-dir t)))

(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq dired-recursive-deletes t
      dired-recursive-copies t)
(put 'dired-find-alternate-file 'disabled nil)

(prefer-coding-system 'utf-8)
(setq locale-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default buffer-file-coding-system 'utf8)
(set-default-coding-systems 'utf-8)
(setenv "LANG" "zh_CN.UTF-8")
(setenv "LC_ALL" "zh_CN.UTF-8")
(setenv "LC_CTYPE" "zh_CN.UTF-8")

(setq browse-url-browser-function 'xwidget-webkit-browse-url)
(defvar xwidget-webkit-bookmark-jump-new-session)
(defvar xwidget-webkit-last-session-buffer)
(add-hook 'pre-command-hook
          (lambda ()
            (if (eq this-command #'bookmark-bmenu-list)
                (if (not (eq major-mode 'xwidget-webkit-mode))
                    (setq xwidget-webkit-bookmark-jump-new-session t)
                  (setq xwidget-webkit-bookmark-jump-new-session nil)
                  (setq xwidget-webkit-last-session-buffer (current-buffer))))))

;;(shell-command "trash -v || brew install trash")
(use-package osx-trash
  :ensure :demand
  :config
  (when (eq system-type 'darwin)
    (osx-trash-setup))
  (setq delete-by-moving-to-trash t))

;; which-key 会导致 ediff 的 gX 命令 hang，解决办法是向 Emacs 发送 USR2 信号
(use-package which-key
  :ensure :demand
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1.1))

(server-start)
#+end_src

* orgmode

#+begin_src emacs-lisp
(dolist (package '(org org-plus-contrib ob-go ox-reveal))
  (unless (package-installed-p package)
    (package-install package)))

(use-package org
  :ensure :demand
  :config
  (setq org-todo-keywords
        '((sequence "☞ TODO(t)" "PROJ(p)" "⚔ INPROCESS(s)" "⚑ WAITING(w)"
                    "|" "☟ NEXT(n)" "✰ Important(i)" "✔ DONE(d)" "✘ CANCELED(c@)")
          (sequence "✍ NOTE(N)" "FIXME(f)" "☕ BREAK(b)" "❤ Love(l)" "REVIEW(r)" )))
  (setq org-ellipsis "▾"
        org-hide-emphasis-markers t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-cycle-separator-lines 2
        org-default-notes-file "~/docs/orgs/note.org"
        org-log-into-drawer t
        org-log-done 'note
        ;; 当 image 链接有 #+ATTR.*: width="XX" 时，将宽度设置为 XX, 否则为缺省
        ;; 值 300
        org-image-actual-width '(300)
        org-hidden-keywords '(title)
        org-export-with-broken-links t
        org-agenda-start-day "-7d"
        org-agenda-span 21
        org-agenda-include-diary t
        org-html-doctype "html5"
        org-html-html5-fancy t
        org-cycle-level-faces t
        org-n-level-faces 4
        org-startup-folded 'content
        org-src-fontify-natively t
        org-html-self-link-headlines t
        ;; 使用 R_{s} 形式的下标（默认是 R_s, 容易与正常内容混淆)
        org-use-sub-superscripts nil
        org-startup-indented t)
  ;; 使用 later.org 和 gtd.org 作为 refile target.
  (setq org-refile-targets '(("~/docs/orgs/later.org" :level . 1)
                             ("~/docs/orgs/gtd.org" :maxlevel . 3)))

  (setq org-agenda-time-grid (quote ((daily today require-timed)
                                     (300 600 900 1200 1500 1800 2100 2400)
                                     "......"
                                     "-----------------------------------------------------"
                                     )))
  ;; 设置 org-agenda 展示的文件
  (setq org-agenda-files '("~/docs/orgs/inbox.org"
                           "~/docs/orgs/gtd.org"
                           "~/docs/orgs/later.org"
                           "~/docs/orgs/capture.org"
                           ))
  (setq org-html-preamble "<a name=\"top\" id=\"top\"></a>")
  (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
  (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
  (set-face-attribute 'org-level-3 nil :inherit 'org-level-8 :height 1.2)
  (set-face-attribute 'org-level-2 nil :inherit 'org-level-8 :height 1.44)
  (set-face-attribute 'org-level-1 nil :inherit 'org-level-8 :height 1.728)
  (set-face-attribute 'org-document-title nil :height 2.074 :inherit 'org-level-8)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-switchb)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (define-key org-mode-map (kbd "M-n") 'org-next-link)
  (define-key org-mode-map (kbd "M-p") 'org-previous-link)
  (require 'org-protocol)
  (require 'org-capture)
  (add-to-list 'org-capture-templates
               '("c" "Capture" entry (file+headline "~/docs/orgs/capture.org" "Capture")
                 "* %^{Title}\nDate: %U\nSource: %:annotation\nContent:\n%:initial"
                 :empty-lines 1))
  (add-to-list 'org-capture-templates
               '("i" "Inbox" entry (file+headline "~/docs/orgs/inbox.org" "Inbox")
                 "* ☞ TODO [#B] %U %i%?"))
  (add-to-list 'org-capture-templates
               '("l" "Later" entry (file+headline "~/docs/orgs/later.org" "Later")
                 "* ☞ TODO [#C] %U %i%?" :empty-lines 1))
  (add-to-list 'org-capture-templates
               '("g" "GTD" entry (file+datetree "~/docs/orgs/gtd.org")
                 "* ☞ TODO [#B] %U %i%?"))
  (setq org-confirm-babel-evaluate nil)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (go . t)
     (emacs-lisp . t)
     (python . t)
     (dot . t)
     (css . t))))

(use-package org-superstar
  :ensure :demand :after (org)
  :hook
  (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t))

(use-package org-fancy-priorities
  :ensure :demand :after (org)
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("[A] ⚡" "[B] ⬆" "[C] ⬇" "[D] ☕")))

;; 拖拽保持图片或 F2 保存剪贴板中图片。
;;(shell-command "pngpaste -v &>/dev/null || brew install pngpaste")
(use-package org-download
  :ensure :demand :after (posframe)
  :bind
  ("<f2>" . org-download-screenshot)
  :config
  (setq-default org-download-image-dir "./images/")
  (setq org-download-method 'directory
        org-download-display-inline-images 'posframe
        org-download-screenshot-method "pngpaste %s"
        org-download-image-attr-list '("#+ATTR_HTML: :width 80% :align center"))
  (add-hook 'dired-mode-hook 'org-download-enable)
  (org-download-enable))

(use-package ox-reveal :ensure :after (org))

(use-package htmlize :ensure)

(use-package org-make-toc
  :ensure :disabled :after org
  :hook (org-mode . org-make-toc-mode))

(use-package org-tree-slide
  :ensure :after org
  :commands org-tree-slide-mode
  :config
  (setq org-tree-slide-slide-in-effect t
        org-tree-slide-activate-message "Presentation started."
        org-tree-slide-deactivate-message "Presentation ended."
        org-tree-slide-header t)
  (with-eval-after-load "org-tree-slide"
    (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
    (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
    (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
    (define-key org-tree-slide-mode-map (kbd "<f11>") 'org-tree-slide-content)))

(defun my/org-mode-visual-fill ()
  (setq
   ;; 自动换行的字符数
   fill-column 80
   ;; window 可视化行宽度，值应该比 fill-column 大，否则超出的字符被隐藏；
   visual-fill-column-width 130
   visual-fill-column-fringes-outside-margins nil
   visual-fill-column-center-text t)
  (visual-fill-column-mode 1))
(use-package visual-fill-column
  :ensure :demand :after org
  :hook
  (org-mode . my/org-mode-visual-fill))

(use-package all-the-icons
  :ensure :after org-agenda :after (org)
  :config
  (setq org-agenda-category-icon-alist
        `(("Diary" ,(list (all-the-icons-faicon "file-text-o")) nil nil :ascent center)
          ("Todo" ,(list (all-the-icons-faicon "check-square-o" :height 1.2)) nil nil :ascent center)
          ("Habit" ,(list (all-the-icons-faicon "refresh")) nil nil :ascent center)
          ("Star" ,(list (all-the-icons-faicon "star-o")) nil nil :ascent center)
          ("Org" ,(list (all-the-icons-fileicon "org")) nil nil :ascent center)
          
          ;; <Work>
          ("Work" ,(list (all-the-icons-faicon "black-tie")) nil nil :ascent center)
          ("Writing" ,(list (all-the-icons-faicon "pencil-square-o" :height 1.1)) nil nil :ascent center)
          ("Print" ,(list (all-the-icons-faicon "print")) nil nil :ascent center)

          ;; <Programming>
          ("Emacs" ,(list (all-the-icons-fileicon "emacs")) nil nil :ascent center)
          ("Code" ,(list (all-the-icons-faicon "keyboard-o")) nil nil :ascent center) ; "file-code-o"
          ("Programming" ,(list (all-the-icons-faicon "code")) nil nil :ascent center)
          ("Bug" ,(list (all-the-icons-faicon "bug" :height 1.1)) nil nil :ascent center)
          ("Issue" ,(list (all-the-icons-octicon "issue-opened" :height 1.2)) nil nil :ascent center)
          ("Feature" ,(list (all-the-icons-faicon "check-circle-o" :height 1.2)) nil nil :ascent center)
          ("VCS" ,(list (all-the-icons-faicon "git")) nil nil :ascent center)
          ("Git" ,(list (all-the-icons-faicon "git")) nil nil :ascent center)
          ("Database" ,(list (all-the-icons-faicon "database" :height 1.2)) nil nil :ascent center)
          ("Design" ,(list (all-the-icons-material "palette")) nil nil :ascent center)
          ("Computer" ,(list (all-the-icons-faicon "laptop")) nil nil :ascent center) ; desktop
          ("Laptop" ,(list (all-the-icons-faicon "laptop")) nil nil :ascent center)
          ("Hardware" ,(list (all-the-icons-faicon "desktop")) nil nil :ascent center)
          ("Server" ,(list (all-the-icons-faicon "server")) nil nil :ascent center)
          ("Audio" ,(list (all-the-icons-faicon "file-audio-o")) nil nil :ascent center)
          ("Analysis" ,(list (all-the-icons-faicon "bar-chart" :height 0.9)) nil nil :ascent center)
          ("Email" ,(list (all-the-icons-material "email")) nil nil :ascent center)
          ("Idea" ,(list (all-the-icons-faicon "lightbulb-o" :height 1.2)) nil nil :ascent center)
          ("Project" ,(list (all-the-icons-faicon "tasks" :height 1.1)) nil nil :ascent center)
          ("Agriculture" ,(list (all-the-icons-faicon "leaf" :height 1.1)) nil nil :ascent center)
          ("Industry" ,(list (all-the-icons-faicon "industry")) nil nil :ascent center)
          ("Express" ,(list (all-the-icons-faicon "truck")) nil nil :ascent center)
          ("Startup" ,(list (all-the-icons-faicon "codepen")) nil nil :ascent center)
          ("Hack" ,(list (all-the-icons-material "security")) nil nil :ascent center)
          ("Crack" ,(list (all-the-icons-faicon "user-secret" :height 1.1)) nil nil :ascent center)
          ("Security" ,(list (all-the-icons-material "security")) nil nil :ascent center)
          ;; ("Anonymous"  ,(expand-file-name "resources/icon/Anonymous.xpm" user-emacs-directory) nil nil :ascent center)
          ("Daily" ,(list (all-the-icons-faicon "calendar-check-o")) nil nil :ascent center)
          ("Learning" ,(list (all-the-icons-material "library_books")) nil nil :ascent center)
          ("University" ,(list (all-the-icons-faicon "university" :height 0.9)) nil nil :ascent center)
          ("Reading" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)
          ("Linux" ,(list (all-the-icons-faicon "linux" :height 1.2)) nil nil :ascent center)
          ("macOS" ,(list (all-the-icons-faicon "apple")) nil nil :ascent center)
          ("Windows" ,(list (all-the-icons-faicon "windows")) nil nil :ascent center)
          ("Config" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center)
          ("Command" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
          ("Document" ,(list (all-the-icons-faicon "file-o")) nil nil :ascent center)
          ("Info" ,(list (all-the-icons-faicon "info")) nil nil :ascent center)
          ;; ("GNU" ,(list (all-the-icons-faicon "")) nil nil :ascent center)
          ;; ("Arch" ,(list (all-the-icons-faicon "arch-linux")) nil nil :ascent center)
          ;; ("Ubuntu" ,(list (all-the-icons-faicon "ubuntu-linux")) nil nil :ascent center)
          ;; ("BSD" ,(list (all-the-icons-faicon "bsd")) nil nil :ascent center)
          ("Android" ,(list (all-the-icons-faicon "android")) nil nil :ascent center)
          ("Apple" ,(list (all-the-icons-faicon "apple")) nil nil :ascent center)
          ("Lisp" ,(list (all-the-icons-fileicon "lisp")) nil nil :ascent center)
          ("Common Lisp" ,(list (all-the-icons-fileicon "clisp")) nil nil :ascent center)
          ("Clojure" ,(list (all-the-icons-alltheicon "clojure-line")) nil nil :ascent center)
          ("CLJS" ,(list (all-the-icons-fileicon "cljs")) nil nil :ascent center)
          ("Ruby" ,(list (all-the-icons-alltheicon "ruby")) nil nil :ascent center)
          ("Python" ,(list (all-the-icons-alltheicon "python")) nil nil :ascent center)
          ("Perl" ,(list (all-the-icons-alltheicon "perl")) nil nil :ascent center)
          ("Shell" ,(list (all-the-icons-faicon "terminal")) nil nil :ascent center)
          ("PHP" ,(list (all-the-icons-fileicon "php")) nil nil :ascent center)
          ("Haskell" ,(list (all-the-icons-alltheicon "haskell")) nil nil :ascent center)
          ("Erlang" ,(list (all-the-icons-alltheicon "erlang")) nil nil :ascent center)
          ("Prolog" ,(list (all-the-icons-alltheicon "prolog")) nil nil :ascent center)
          ("C Language" ,(list (all-the-icons-alltheicon "c")) nil nil :ascent center)
          ("C++ Language" ,(list (all-the-icons-alltheicon "cplusplus")) nil nil :ascent center)
          ("Go Language" ,(list (all-the-icons-alltheicon "go")) nil nil :ascent center)
          ("Swift" ,(list (all-the-icons-alltheicon "swift")) nil nil :ascent center)
          ("Rust" ,(list (all-the-icons-alltheicon "rust")) nil nil :ascent center)
          ("JavaScript" ,(list (all-the-icons-alltheicon "javascript" :height 1.1)) nil nil :ascent center)
          ("Java" ,(list (all-the-icons-alltheicon "java")) nil nil :ascent center)
          ("HTML5" ,(list (all-the-icons-alltheicon "html5")) nil nil :ascent center)
          ("HTML" ,(list (all-the-icons-alltheicon "html5")) nil nil :ascent center)
          ("CSS3" ,(list (all-the-icons-alltheicon "css3")) nil nil :ascent center)
          ("CSS" ,(list (all-the-icons-alltheicon "css3")) nil nil :ascent center)
          ("SQL" ,(list (all-the-icons-faicon "database")) nil nil :ascent center)
          ("PostgreSQL" ,(list (all-the-icons-alltheicon "postgresql")) nil nil :ascent center)
          ("R" ,(list (all-the-icons-fileicon "R")) nil nil :ascent center)
          ("Julia" ,(list (all-the-icons-fileicon "julia")) nil nil :ascent center)
          ("TeX" ,(list (all-the-icons-fileicon "tex")) nil nil :ascent center)
          ("LaTeX" ,(list (all-the-icons-fileicon "tex")) nil nil :ascent center)
          ("Web" ,(list (all-the-icons-faicon "globe" :height 1.1)) nil nil :ascent center)
          ("Network" ,(list (all-the-icons-faicon "sitemap")) nil nil :ascent center)
          ("GitHub" ,(list (all-the-icons-faicon "github")) nil nil :ascent center)
          ("Bitbucket" ,(list (all-the-icons-faicon "bitbucket")) nil nil :ascent center)
          ("Bitcoin" ,(list (all-the-icons-faicon "btc")) nil nil :ascent center)

          ;; <Design>
          ("Design" ,(list (all-the-icons-faicon "paint-brush")) nil nil :ascent center)
          
          ;; <Life>
          ("Home" ,(list (all-the-icons-material "home" :height 1.1)) nil nil :ascent center)
          ("Hotel" ,(list (all-the-icons-material "hotel")) nil nil :ascent center)
          ("Entertainment" ,(list (all-the-icons-faicon "youtube")) nil nil :ascent center)
          ("Place" ,(list (all-the-icons-material "place")) nil nil :ascent center)
          ("Health" ,(list (all-the-icons-faicon "medkit" :height 1.1)) nil nil :ascent center)
          ("Hospital" ,(list (all-the-icons-faicon "hospital-o" :height 1.3)) nil nil :ascent center)
          ("Dining" ,(list (all-the-icons-faicon "cutlery")) nil nil :ascent center)
          ("Shopping" ,(list (all-the-icons-faicon "shopping-basket")) nil nil :ascent center)
          ("Express" ,(list (all-the-icons-material "local_shipping")) nil nil :ascent center)
          ("Sport" ,(list (all-the-icons-faicon "dribbble")) nil nil :ascent center)
          ("Game" ,(list (all-the-icons-faicon "gamepad")) nil nil :ascent center)
          ("Sex" ,(list (all-the-icons-faicon "female" :height 1.2)) nil nil :ascent center)
          ("News" ,(list (all-the-icons-faicon "newspaper-o")) nil nil :ascent center)
          ("Car" ,(list (all-the-icons-faicon "car")) nil nil :ascent center)
          ("Bus" ,(list (all-the-icons-faicon "bus")) nil nil :ascent center)
          ("Contact" ,(list (all-the-icons-material "contact_mail")) nil nil :ascent center)
          ("Talk" ,(list (all-the-icons-faicon "comments" :height 1.1)) nil nil :ascent center)
          ("Video-Call" ,(list (all-the-icons-material "video_call")) nil nil :ascent center)
          ("Call" ,(list (all-the-icons-faicon "phone" :height 1.3)) nil nil :ascent center)
          ("Music" ,(list (all-the-icons-faicon "music")) nil nil :ascent center)
          ("Airplane" ,(list (all-the-icons-faicon "plane")) nil nil :ascent center)
          ("Travel" ,(list (all-the-icons-faicon "motorcycle")) nil nil :ascent center)
          ("Gift" ,(list (all-the-icons-faicon "gift")) nil nil :ascent center)
          ("WiFi" ,(list (all-the-icons-faicon "wifi")) nil nil :ascent center)
          ("Search" ,(list (all-the-icons-faicon "search" :height 1.2)) nil nil :ascent center)
          ("Mobile" ,(list (all-the-icons-material "tablet_mac" :height 1.1)) nil nil :ascent center)
          ("WeChat" ,(list (all-the-icons-faicon "weixin")) nil nil :ascent center)
          ("QQ" ,(list (all-the-icons-faicon "qq" :height 1.1)) nil nil :ascent center)
          ("Weibo" ,(list (all-the-icons-faicon "weibo")) nil nil :ascent center)
          ("Slack" ,(list (all-the-icons-faicon "slack")) nil nil :ascent center)
          ("Facebook" ,(list (all-the-icons-faicon "facebook-official")) nil nil :ascent center)
          ("Twitter" ,(list (all-the-icons-faicon "twitter-square")) nil nil :ascent center)
          ("YouTube" ,(list (all-the-icons-faicon "youtube-square")) nil nil :ascent center)
          ("RSS" ,(list (all-the-icons-faicon "rss-square")) nil nil :ascent center)
          ("Wikipedia" ,(list (all-the-icons-faicon "wikipedia-w")) nil nil :ascent center)
          ("Money" ,(list (all-the-icons-faicon "usd")) nil nil :ascent center)
          ("Accounting" ,(list (all-the-icons-faicon "pie-chart")) nil nil :ascent center)
          ("Bank" ,(list (all-the-icons-material "account_balance")) nil nil :ascent center)
          ("Person" ,(list (all-the-icons-faicon "male")) nil nil :ascent center)
          ("Birthday" ,(list (all-the-icons-faicon "birthday-cake")) nil nil :ascent center)
          
          ;; <Business>
          ("Calculate" ,(list (all-the-icons-faicon "percent")) nil nil :ascent center)
          ("Chart" ,(list (all-the-icons-faicon "bar-chart")) nil nil :ascent center)
          
          ;; <Science>
          ("Chemistry" ,(list (all-the-icons-faicon "flask")) nil nil :ascent center)
          ("Language" ,(list (all-the-icons-faicon "language")) nil nil :ascent center)
          
          (".*" ,(list (all-the-icons-faicon "question-circle-o")) nil nil :ascent center)
          ;; (".*" '(space . (:width (16))))
          )))

(setq diary-file "~/docs/orgs/diary")
(setq diary-mail-addr "geekard@qq.com")
;; 获取经纬度：https://www.latlong.net/
(setq calendar-latitude +39.904202)
(setq calendar-longitude +116.407394)
(setq calendar-location-name "北京")
(setq calendar-remove-frame-by-deleting t)
(setq calendar-week-start-day 1)              ; 每周第一天是周一
(setq mark-diary-entries-in-calendar t)       ; 标记有记录的日子
(setq mark-holidays-in-calendar nil)          ; 标记节假日
(setq view-calendar-holidays-initially nil)   ; 不显示节日列表
(setq org-agenda-include-diary t)

;; 除去基督徒的节日、希伯来人的节日和伊斯兰教的节日。
(setq christian-holidays nil
      hebrew-holidays nil
      islamic-holidays nil
      solar-holidays nil
      bahai-holidays nil)

(setq general-holidays '((holiday-fixed 1 1   "元旦")
                         (holiday-fixed 2 14  "情人节")
                         (holiday-fixed 4 1   "愚人节")
                         (holiday-fixed 12 25 "圣诞节")
                         (holiday-fixed 10 1  "国庆节")
                         (holiday-float 5 0 2 "母亲节")
                         (holiday-float 6 0 3 "父亲节")))

(setq local-holidays '((holiday-chinese 1 15  "元宵节 (正月十五)")
                       (holiday-chinese 5 5   "端午节 (五月初五)")
                       (holiday-chinese 9 9   "重阳节 (九月初九)")
                       (holiday-chinese 8 15  "中秋节 (八月十五)")
                       ;; 生日
                       (holiday-chinese  5 12 "老婆生日(1987)")
                       (holiday-chinese 11 15 "老妈生日(1966)")
                       (holiday-chinese 5 20  "老爸生日(1965)")))
(setq chinese-calendar-celestial-stem
      ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
(setq chinese-calendar-terrestrial-branch
      ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])

(setq mark-diary-entries-in-calendar t
      appt-issue-message nil
      mark-holidays-in-calendar t
      view-calendar-holidays-initially nil)

(setq diary-date-forms '((year "/" month "/" day "[^/0-9]"))
      calendar-date-display-form '(year "/" month "/" day)
      calendar-time-display-form
      '(24-hours ":" minutes (if time-zone " (") time-zone (if time-zone ")")))

(add-hook 'today-visible-calendar-hook 'calendar-mark-today)

(autoload 'chinese-year "cal-china" "Chinese year data" t)

(setq calendar-load-hook
      '(lambda ()
         (set-face-foreground 'diary-face   "skyblue")
         (set-face-background 'holiday-face "slate blue")
         (set-face-foreground 'holiday-face "white"))) 

;; brew install terminal-notifier
(defvar terminal-notifier-command (executable-find "terminal-notifier") "The path to terminal-notifier.")

(defun terminal-notifier-notify (title message)
  (start-process "terminal-notifier"
                 "terminal-notifier"
                 terminal-notifier-command
                 "-title" title
                 "-sound" "default"
                 "-message" message
                 "-activate" "org.gnu.Emacs"))

(defun timed-notification (time msg)
  (interactive "sNotification when (e.g: 2 minutes, 60 seconds, 3 days): \nsMessage: ")
  (run-at-time time nil (lambda (msg) (terminal-notifier-notify "Emacs" msg)) msg))

;;(terminal-notifier-notify "Emacs notification" "Something amusing happened")
(setq org-show-notification-handler (lambda (msg) (timed-notification nil msg)))
#+end_src

* projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure :demand :after (treemacs)
  :config
  (projectile-global-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
  ;; selectrum 使用 'default，可选：'ivy、'helm、'ido、'auto
  (setq projectile-completion-system 'default)
  ;; 开启 cache 后，提高性能，也可以解决 TRAMP 的问题，https://github.com/bbatsov/projectile/pull/1129
  (setq projectile-enable-caching t)
  (setq projectile-sort-order 'recently-active)
  (add-hook 'projectile-after-switch-project-hook
            (lambda () (unless (bound-and-true-p treemacs-mode) (treemacs) (other-window 1))))
  (add-to-list 'projectile-ignored-projects (concat (getenv "HOME") "/" "/root" "/tmp" "/etc" "/home"))
  (dolist (dirs '(".cache"
                  ".dropbox"
                  ".git"
                  ".hg"
                  ".svn"
                  ".nx"
                  "elpa"
                  "auto"
                  "bak"
                  "__pycache__"
                  "vendor"
                  "node_modules"
                  "logs"
                  "target"
                  ".idea"
                  ".devcontainer"
                  ".settings"
                  ".gradle"
                  ".vscode"))
    (add-to-list 'projectile-globally-ignored-directories dirs))
  (dolist (item '("GPATH"
                  "GRTAGS"
                  "GTAGS"
                  "GSYMS"
                  "TAGS"
                  ".tags"
                  ".classpath"
                  ".project"
                  "__init__.py"))
    (add-to-list 'projectile-globally-ignored-files item))
  (dolist (list '("\\.elc\\'"
                  "\\.o\\'"
                  "\\.class\\'"
                  "\\.out\\'"
                  "\\.pdf\\'"
                  "\\.pyc\\'"
                  "\\.rel\\'"
                  "\\.rip\\'"
                  "\\.swp\\'"
                  "\\.iml\\'"
                  "\\.bak\\'"
                  "\\.log\\'"
                  "~\\'"))
    (add-to-list 'projectile-globally-ignored-file-suffixes list)))

;; C-c p s r (projectile-ripgrep)
(use-package ripgrep :ensure :demand :after (projectile))
#+end_src

* selectrum
#+begin_src emacs-lisp
(use-package selectrum
  :ensure :demand
  :init
  (selectrum-mode +1))

(use-package prescient
  :ensure :demand
  :config
  (prescient-persist-mode +1))

(use-package selectrum-prescient
  :ensure :demand :after selectrum
  :init
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))

(use-package company-prescient
  :ensure :demand :after prescient
  :init (company-prescient-mode +1))

(use-package consult
  :ensure :demand :after projectile
  :bind
  (;; C-c bindings (mode-specific-map)
   ("C-c h" . consult-history)
   ("C-c m" . consult-mode-command)
   ("C-c b" . consult-bookmark)
   ("C-c k" . consult-kmacro)
   ;; C-x bindings (ctl-x-map)
   ("C-x M-:" . consult-complex-command)
   ("C-x b" . consult-buffer)
   ("C-x 4 b" . consult-buffer-other-window)
   ("C-x 5 b" . consult-buffer-other-frame)
   ;; Custom M-# bindings for fast register access
   ("M-#" . consult-register-load)
   ("M-'" . consult-register-store)
   ("C-M-#" . consult-register)
   ;; Other custom bindings
   ("M-y" . consult-yank-pop)
   ("<help> a" . consult-apropos)
   ;; M-g bindings (goto-map)
   ("M-g e" . consult-compile-error)
   ("M-g f" . consult-flycheck)
   ("M-g g" . consult-goto-line)
   ("M-g M-g" . consult-goto-line)
   ("M-g o" . consult-outline)
   ("M-g m" . consult-mark)
   ("M-g k" . consult-global-mark)
   ("M-g i" . consult-imenu)
   ("M-g I" . consult-project-imenu)
   ;; M-s bindings (search-map)
   ("M-s f" . consult-find)
   ("M-s L" . consult-locate)
   ("M-s g" . consult-grep)
   ("M-s G" . consult-git-grep)
   ("M-s r" . consult-ripgrep)
   ("M-s l" . consult-line)
   ("M-s m" . consult-multi-occur)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ("M-s e" . consult-isearch)
   :map isearch-mode-map
   ("M-e" . consult-isearch)
   ("M-s e" . consult-isearch)
   ("M-s l" . consult-line))
  :hook
  (completion-list-mode . consult-preview-at-point-mode)
  :init
  (setq register-preview-delay 0.1
        register-preview-function #'consult-register-format)
  (advice-add #'register-preview :override #'consult-register-window)
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  :config
  ;; 下面的 preview-key 在 minibuff 中不生效，暂时关闭。
  ;; (consult-customize
  ;;  consult-ripgrep consult-git-grep consult-grep consult-bookmark consult-recent-file
  ;;  consult--source-file consult--source-project-file consult--source-bookmark
  ;;  :preview-key (kbd "M-."))
  ;; 选中候选者后，按 C-l 才会开启 preview，解决 preview TRAMP bookmark hang 的问题。
  (setq consult-preview-key (kbd "C-l"))
  (setq consult-narrow-key "<")
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root))

(use-package consult-flycheck
  :ensure :demand :after consult
  :bind
  (:map flycheck-command-map ("!" . consult-flycheck)))

;; consult-lsp 提供两个非常好用的函数：consult-lsp-symbols、consult-lsp-diagnostics
(use-package consult-lsp
  :ensure :demand :after (lsp-mode consult)
  :config
  (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))

(use-package marginalia
  :ensure :demand :after (selectrum)
  :init (marginalia-mode)
  :config
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light))
  (advice-add #'marginalia-cycle
              :after (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit 'keep-selected))))
  :bind
  (("M-A" . marginalia-cycle)
   :map minibuffer-local-map
   ("M-A" . marginalia-cycle)))

(use-package embark
  :ensure :demand :after (selectrum which-key)
  :config
  (setq embark-prompter 'embark-keymap-prompter)

  (defun refresh-selectrum ()
    (setq selectrum--previous-input-string nil))
  (add-hook 'embark-pre-action-hook #'refresh-selectrum)
  
  (defun embark-act-noquit ()
    (interactive)
    (let ((embark-quit-after-action nil)) (embark-act)))

  (setq embark-action-indicator
        (lambda (map &optional _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)

  :bind
  (("C-;" . embark-act-noquit)
   :map embark-variable-map ("l" . edit-list)))

(use-package embark-consult
  :ensure :demand :after (embark consult)
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src

* term
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/bash")
(setq shell-file-name "bash")
(setq shell-command-prompt-show-cwd t)
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
;;(global-set-key [f1] 'shell)

;;(shell-command "which cmake &>/dev/null || brew install cmake")
;;(shell-command "which glibtool &>/dev/null || brew install libtool")
(use-package vterm
  :ensure :demand
  :config
  (setq vterm-max-scrollback 100000)
  ;; 需要 shell-side 配置，如设置环境变量 PROMPT_COMMAND。
  (setq vterm-buffer-name-string "vterm %s")
  :bind
  (:map vterm-mode-map ("C-l" . nil))
  ;; 防止输入法切换冲突。
  (:map vterm-mode-map ("C-\\" . nil)) )

(use-package multi-vterm
  :ensure :after (vterm)
  :config
  (define-key vterm-mode-map (kbd "M-RET") 'multi-vterm))

;; vterm-toggle 如果报错 "tcsetattr: Interrupted system call"，则解决办法参考：
;; https://github.com/jixiuf/vterm-toggle/pull/28
;; sleep 时间可能需要增加，直到不再报错即可。
(use-package vterm-toggle
  :ensure :after (vterm)
  :custom
  ;; project scope 表示整个 project 的 buffers 都使用同一个 vterm buffer。
  (vterm-toggle-scope 'project)
  :config
  (global-set-key (kbd "C-`") 'vterm-toggle)
  (global-set-key (kbd "C-~") 'vterm-toggle-cd)
  (define-key vterm-mode-map (kbd "C-RET") #'vterm-toggle-insert-cd)
  ;; 避免执行 ns-print-buffer 命令
  (global-unset-key (kbd "s-p"))
  (define-key vterm-mode-map (kbd "s-n") 'vterm-toggle-forward)
  (define-key vterm-mode-map (kbd "s-p") 'vterm-toggle-backward)
  ;; 在 frame 底部显示终端窗口，https://github.com/jixiuf/vterm-toggle。
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list
   'display-buffer-alist
   '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
     (display-buffer-reuse-window display-buffer-in-direction)
     (direction . bottom)
     (dedicated . t)
     (reusable-frames . visible)
     (window-height . 0.3))))

(use-package eshell-toggle
  :ensure :demand
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :bind
  ("s-`" . eshell-toggle))

(use-package native-complete
  :ensure :demand
  :custom
  (with-eval-after-load 'shell
    (native-complete-setup-bash)))

(use-package company-native-complete
  :ensure :demand :after (company)
  :custom
  (add-to-list 'company-backends 'company-native-complete))

(setq  tramp-ssh-controlmaster-options
       "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=600 -o ServerAliveCountMax=60 -o ServerAliveInterval=10"
       vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)" vc-ignore-dir-regexp tramp-file-name-regexp)
       ;; 远程文件名不过期
       ;;remote-file-name-inhibit-cache nil
       ;;tramp-completion-reread-directory-timeout nil
       tramp-verbose 1
       ;; 增加压缩传输的文件起始大小（默认 4KB），否则容易出现出错： “gzip: (stdin): unexpected end of file”
       tramp-inline-compress-start-size (* 1024 1024 1)
       tramp-copy-size-limit nil
       tramp-default-method "ssh"
       tramp-default-user "root"
       ;; 在登录远程终端时设置 TERM 环境变量为 tramp。这样可以在远程 shell 的初始化文件中对 tramp 登录情况做特殊处理。
       ;; 例如，对于 zsh，可以设置 PS1。
       tramp-terminal-type "tramp"
       tramp-completion-reread-directory-timeout t)

;; eshell 高亮模式
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
#+end_src

* theme
#+begin_src emacs-lisp
  ;; preview theme: https://emacsthemes.com/
  (use-package doom-themes
    :ensure :demand
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t
          doom-themes-treemacs-theme "doom-colors")
    (load-theme 'doom-dracula t)
    (doom-themes-visual-bell-config)
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
  
  (use-package doom-modeline
    :ensure :demand
    :custom
    (doom-modeline-github nil)
    (doom-modeline-env-enable-python t)
    :init
    (doom-modeline-mode 1))
  
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons :ensure t :after (doom-modeline))
  
  ;; emacs 27 支持 Emoji
  (set-fontset-font "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
  
  (column-number-mode t)
  (display-time-mode t)
  (setq display-time-24hr-format t
        display-time-default-load-average nil
        display-time-day-and-date nil)
  
  (size-indication-mode t)
  (setq indicate-buffer-boundaries (quote left))
  
  (dolist (mode '(text-mode-hook prog-mode-hook conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
  (show-paren-mode t)
  (setq show-paren-style 'parentheses)
  
  (setq-default indicate-empty-lines t)
  (when (not indicate-empty-lines) (toggle-indicate-empty-lines))
  
  (setq inhibit-startup-screen t
        inhibit-startup-message t
        inhibit-startup-echo-area-message t
        initial-scratch-message nil)
  
  (use-package diredfl :ensure :demand :config (diredfl-global-mode))
  
  (use-package dashboard
    :ensure :demand
    :config
    (setq dashboard-banner-logo-title ";; Happy hacking, Zhang Jun - Emacs ♥ you!")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (bookmarks . 3)
                            (agenda . 3)))
    (dashboard-setup-startup-hook))
  
  ;; 字体
  ;; 中文：Sarasa Gothic: https://github.com/be5invis/Sarasa-Gothic
  ;; 英文：Iosevka SS14: https://github.com/be5invis/Iosevka/releases
  (use-package cnfonts
    :ensure :demand
    :init
    (setq cnfonts-personal-fontnames
          '(("Iosevka SS14" "Fira Code")
            ("Sarasa Gothic SC" "Source Han Mono SC")
            ("HanaMinB")))
    :config
    (setq cnfonts-use-face-font-rescale t)
    (cnfonts-enable))
  
  ;; M-x fira-code-mode-install-fonts
  (use-package fira-code-mode
    :ensure :demand
    :custom
    (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
    :hook prog-mode)
  
  (use-package emojify
    :ensure :demand
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
  
  (use-package ns-auto-titlebar
    :ensure :demand
    :config
    (when (eq system-type 'darwin) (ns-auto-titlebar-mode)))
  
  (setq inhibit-compacting-font-caches t)
  
  (use-package rainbow-delimiters
    :ensure :defer
    :hook (prog-mode . rainbow-delimiters-mode))
  
  (use-package volatile-highlights
    :ensure
    :init (volatile-highlights-mode))
  
  (use-package anzu
    :ensure
    :init
    (setq anzu-mode-lighter "")
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (define-key isearch-mode-map [remap isearch-query-replace] #'anzu-isearch-query-replace)
    (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp)
    (global-anzu-mode))
  
  (use-package symbol-overlay
    :ensure
    :config
    (global-set-key (kbd "M-i") 'symbol-overlay-put)
    (global-set-key (kbd "M-n") 'symbol-overlay-jump-next)
    (global-set-key (kbd "M-p") 'symbol-overlay-jump-prev)
    (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
    (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
    :hook (prog-mode . symbol-overlay-mode))
#+end_src

* treemacs
#+begin_src emacs-lisp
;;(shell-command "mkdir -p ~/.emacs.d/.cache")
(use-package treemacs
  :ensure :demand
  :init
  (with-eval-after-load 'winum (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq
     treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
     treemacs-deferred-git-apply-delay      0.1
     treemacs-display-in-side-window        t
     treemacs-eldoc-display                 t
     treemacs-file-event-delay              100
     treemacs-file-follow-delay             0.1
     treemacs-follow-after-init             t
     treemacs-git-command-pipe              ""
     treemacs-goto-tag-strategy             'refetch-index
     treemacs-indentation                   1
     treemacs-indentation-string            " "
     treemacs-is-never-other-window         nil
     treemacs-max-git-entries               3000
     treemacs-missing-project-action        'remove
     treemacs-no-png-images                 nil
     treemacs-no-delete-other-windows       t
     treemacs-project-follow-cleanup        t
     treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
     treemacs-position                      'left
     treemacs-recenter-distance             0.1
     treemacs-recenter-after-file-follow    t
     treemacs-recenter-after-tag-follow     t
     treemacs-recenter-after-project-jump   'always
     treemacs-recenter-after-project-expand 'on-distance
     treemacs-shownn-cursor                 t
     treemacs-show-hidden-files             t
     treemacs-silent-filewatch              nil
     treemacs-silent-refresh                nil
     treemacs-sorting                       'alphabetic-asc
     treemacs-space-between-root-nodes      nil
     treemacs-tag-follow-cleanup            t
     treemacs-tag-follow-delay              1
     treemacs-width                         35
     imenu-auto-rescan                      t)
    (treemacs-resize-icons 11)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git"))) (not (null treemacs-python-executable)))
      (`(t . t) (treemacs-git-mode 'deferred))
      (`(t . _) (treemacs-git-mode 'simple))))
  :bind
  (:map
   global-map
   ("M-0"       . treemacs-select-window)
   ("C-x t 1"   . treemacs-delete-other-windows)
   ("C-x t t"   . treemacs)
   ("C-x t B"   . treemacs-bookmark)
   ("C-x t C-t" . treemacs-find-file)
   ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile :after (treemacs projectile) :ensure  :demand)
(use-package treemacs-magit :after (treemacs magit) :ensure :demand)
(use-package persp-mode
  :ensure :demand :disabled
  :custom
  (persp-keymap-prefix (kbd "C-x p"))
  :config
  (persp-mode))

(use-package treemacs-persp 
  :ensure :demand :disabled
  :after (treemacs persp-mode)
  :config
  (treemacs-set-scope-type 'Perspectives))
#+end_src

